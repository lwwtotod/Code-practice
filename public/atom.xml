<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>网络日志</title>
  
  <subtitle>Web Developer &amp; Designer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lwwtotod.github.io/"/>
  <updated>2019-04-18T07:46:14.412Z</updated>
  <id>http://lwwtotod.github.io/</id>
  
  <author>
    <name>blankserver</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Css布局</title>
    <link href="http://lwwtotod.github.io/2019/04/18/CSS/layout/"/>
    <id>http://lwwtotod.github.io/2019/04/18/CSS/layout/</id>
    <published>2019-04-18T07:23:47.667Z</published>
    <updated>2019-04-18T07:46:14.412Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单栏布局"><a href="#单栏布局" class="headerlink" title="单栏布局"></a>单栏布局</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="html,result" data-user="lwwtotod" data-slug-hash="PgRzQx" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="单栏布局">  <span>See the Pen <a href="https://codepen.io/lwwtotod/pen/PgRzQx/" target="_blank" rel="noopener">  单栏布局</a> by lwwtotod (<a href="https://codepen.io/lwwtotod" target="_blank" rel="noopener">@lwwtotod</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h4 id="示例-2-通栏"><a href="#示例-2-通栏" class="headerlink" title="示例 2(通栏)"></a>示例 2(通栏)</h4><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="html,result" data-user="lwwtotod" data-slug-hash="wZmWjZ" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="单栏布局2">  <span>See the Pen <a href="https://codepen.io/lwwtotod/pen/wZmWjZ/" target="_blank" rel="noopener">  单栏布局2</a> by lwwtotod (<a href="https://codepen.io/lwwtotod" target="_blank" rel="noopener">@lwwtotod</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h3 id="两栏布局"><a href="#两栏布局" class="headerlink" title="两栏布局"></a>两栏布局</h3><h4 id="示例-1-1"><a href="#示例-1-1" class="headerlink" title="示例 1"></a>示例 1</h4><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="html,result" data-user="lwwtotod" data-slug-hash="pBLbPz" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="两栏布局">  <span>See the Pen <a href="https://codepen.io/lwwtotod/pen/pBLbPz/" target="_blank" rel="noopener">  两栏布局</a> by lwwtotod (<a href="https://codepen.io/lwwtotod" target="_blank" rel="noopener">@lwwtotod</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="html,result" data-user="lwwtotod" data-slug-hash="GLxqvB" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="两栏布局2">  <span>See the Pen <a href="https://codepen.io/lwwtotod/pen/GLxqvB/" target="_blank" rel="noopener">  两栏布局2</a> by lwwtotod (<a href="https://codepen.io/lwwtotod" target="_blank" rel="noopener">@lwwtotod</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h4><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="html,result" data-user="lwwtotod" data-slug-hash="NmYrwm" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="两栏布局3">  <span>See the Pen <a href="https://codepen.io/lwwtotod/pen/NmYrwm/" target="_blank" rel="noopener">  两栏布局3</a> by lwwtotod (<a href="https://codepen.io/lwwtotod" target="_blank" rel="noopener">@lwwtotod</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h3 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h3><h4 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h4><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="html" data-user="lwwtotod" data-slug-hash="ROxGMa" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="双飞翼布局">  <span>See the Pen <a href="https://codepen.io/lwwtotod/pen/ROxGMa/" target="_blank" rel="noopener">  双飞翼布局</a> by lwwtotod (<a href="https://codepen.io/lwwtotod" target="_blank" rel="noopener">@lwwtotod</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="html,result" data-user="lwwtotod" data-slug-hash="YMaWJv" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="三栏布局2">  <span>See the Pen <a href="https://codepen.io/lwwtotod/pen/YMaWJv/" target="_blank" rel="noopener">  三栏布局2</a> by lwwtotod (<a href="https://codepen.io/lwwtotod" target="_blank" rel="noopener">@lwwtotod</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;单栏布局&quot;&gt;&lt;a href=&quot;#单栏布局&quot; class=&quot;headerlink&quot; title=&quot;单栏布局&quot;&gt;&lt;/a&gt;单栏布局&lt;/h3&gt;&lt;h4 id=&quot;示例-1&quot;&gt;&lt;a href=&quot;#示例-1&quot; class=&quot;headerlink&quot; title=&quot;示例 1&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://lwwtotod.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Mac下配置ngxin</title>
    <link href="http://lwwtotod.github.io/2019/04/16/Nginx/mac%E4%B8%8B%E9%85%8D%E7%BD%AEngxin/"/>
    <id>http://lwwtotod.github.io/2019/04/16/Nginx/mac下配置ngxin/</id>
    <published>2019-04-16T03:21:37.982Z</published>
    <updated>2019-04-16T03:30:15.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-系统如何使用-Nginx"><a href="#Mac-系统如何使用-Nginx" class="headerlink" title="Mac 系统如何使用 Nginx"></a>Mac 系统如何使用 Nginx</h1><ol><li>使用 brew 安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 更新brew--&gt;</span><br><span class="line">brew update</span><br><span class="line"></span><br><span class="line">&lt;!-- 查看安装信息--&gt;</span><br><span class="line">brew -v</span><br><span class="line"></span><br><span class="line">&lt;!-- 查看是否安装了nginx--&gt;</span><br><span class="line">brew info nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 nginx</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><ol start="3"><li>启动 nginx</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--启动nginx--&gt;</span><br><span class="line">nginx</span><br><span class="line">&lt;!--重启nginx--&gt;</span><br><span class="line">nginx -s reload</span><br><span class="line">&lt;!--停止nginx--&gt;</span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac-系统如何使用-Nginx&quot;&gt;&lt;a href=&quot;#Mac-系统如何使用-Nginx&quot; class=&quot;headerlink&quot; title=&quot;Mac 系统如何使用 Nginx&quot;&gt;&lt;/a&gt;Mac 系统如何使用 Nginx&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;使用 brew 
      
    
    </summary>
    
      <category term="Mac" scheme="http://lwwtotod.github.io/categories/Mac/"/>
    
      <category term="ngxin" scheme="http://lwwtotod.github.io/categories/Mac/ngxin/"/>
    
    
      <category term="ngxin" scheme="http://lwwtotod.github.io/tags/ngxin/"/>
    
      <category term="Mac" scheme="http://lwwtotod.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://lwwtotod.github.io/2019/03/13/JavaScript/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lwwtotod.github.io/2019/03/13/JavaScript/观察者模式/</id>
    <published>2019-03-13T08:07:32.000Z</published>
    <updated>2019-06-11T02:35:40.425Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="设计模式" scheme="http://lwwtotod.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>leetcode初级算法</title>
    <link href="http://lwwtotod.github.io/2019/03/13/leetcode/LeetCode/"/>
    <id>http://lwwtotod.github.io/2019/03/13/leetcode/LeetCode/</id>
    <published>2019-03-13T08:07:32.000Z</published>
    <updated>2019-04-17T07:39:05.034Z</updated>
    
    <content type="html"><![CDATA[<h3 id="26-从排序数组中删除重复项"><a href="#26-从排序数组中删除重复项" class="headerlink" title="26.从排序数组中删除重复项"></a>26.从排序数组中删除重复项</h3><p>解题思路：<br>一级循环从左至右遍历数组，对比对象为该循环索引右侧的所有元素，所以二级循环取从右到左，并终止于一级循环索引数 i，<br>遇到相同元素，立即删除右侧（二级循环中的）元素并变更原始数组，以保证一级循环过的元素都是唯一的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment">* @return &#123;number&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// return [...new Set(nums)]</span></span><br><span class="line"> <span class="comment">// return Array.from(new Set(nums))</span></span><br><span class="line"> <span class="comment">// nums = [...new Set(nums)]</span></span><br><span class="line"> <span class="comment">// return nums</span></span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">   <span class="keyword">for</span>(j=nums.length<span class="number">-1</span>;j&gt;i;j--)&#123;</span><br><span class="line">     <span class="keyword">if</span>(nums[i]==nums[j])&#123;</span><br><span class="line">       nums.splice(i,<span class="number">1</span>)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;26-从排序数组中删除重复项&quot;&gt;&lt;a href=&quot;#26-从排序数组中删除重复项&quot; class=&quot;headerlink&quot; title=&quot;26.从排序数组中删除重复项&quot;&gt;&lt;/a&gt;26.从排序数组中删除重复项&lt;/h3&gt;&lt;p&gt;解题思路：&lt;br&gt;一级循环从左至右遍历数组，
      
    
    </summary>
    
      <category term="算法" scheme="http://lwwtotod.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://lwwtotod.github.io/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://lwwtotod.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://lwwtotod.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>npm 与 yarn 管理工具</title>
    <link href="http://lwwtotod.github.io/2019/03/13/Nodejs/npm%E4%B8%8Eyarn/"/>
    <id>http://lwwtotod.github.io/2019/03/13/Nodejs/npm与yarn/</id>
    <published>2019-03-13T02:02:44.000Z</published>
    <updated>2019-04-16T03:32:14.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm-与-yarn-管理工具"><a href="#npm-与-yarn-管理工具" class="headerlink" title="npm 与 yarn 管理工具"></a>npm 与 yarn 管理工具</h1><p>全局安装 nrm 与 yrm</p><pre><code>npm install nrm -g&amp;&amp;npm install yrm -g</code></pre><p>查看源</p><pre><code>nrm ls&amp;&amp;yrm ls</code></pre><p>使用淘宝源</p><pre><code>nrm use cnpm&amp;&amp;yrm ue cnpm</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;npm-与-yarn-管理工具&quot;&gt;&lt;a href=&quot;#npm-与-yarn-管理工具&quot; class=&quot;headerlink&quot; title=&quot;npm 与 yarn 管理工具&quot;&gt;&lt;/a&gt;npm 与 yarn 管理工具&lt;/h1&gt;&lt;p&gt;全局安装 nrm 与 yrm&lt;/p&gt;
      
    
    </summary>
    
      <category term="npm" scheme="http://lwwtotod.github.io/categories/npm/"/>
    
    
      <category term="npm" scheme="http://lwwtotod.github.io/tags/npm/"/>
    
      <category term="yarn" scheme="http://lwwtotod.github.io/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>个人管理</title>
    <link href="http://lwwtotod.github.io/2019/01/13/about/"/>
    <id>http://lwwtotod.github.io/2019/01/13/about/</id>
    <published>2019-01-13T08:07:32.000Z</published>
    <updated>2019-06-25T01:29:18.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人管理"><a href="#个人管理" class="headerlink" title="个人管理"></a>个人管理</h1><h2 id="计划-todos-📆"><a href="#计划-todos-📆" class="headerlink" title="计划 todos 📆"></a>计划 todos 📆</h2><h3 id="学习-🎯"><a href="#学习-🎯" class="headerlink" title="学习 🎯"></a>学习 🎯</h3><ul><li>React 系列（进行中）</li><li>Element 源码分析系列 （进行中）</li><li>英语语法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;个人管理&quot;&gt;&lt;a href=&quot;#个人管理&quot; class=&quot;headerlink&quot; title=&quot;个人管理&quot;&gt;&lt;/a&gt;个人管理&lt;/h1&gt;&lt;h2 id=&quot;计划-todos-📆&quot;&gt;&lt;a href=&quot;#计划-todos-📆&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="生活" scheme="http://lwwtotod.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>起步</title>
    <link href="http://lwwtotod.github.io/2018/01/13/Element/%E8%B5%B7%E6%AD%A5/"/>
    <id>http://lwwtotod.github.io/2018/01/13/Element/起步/</id>
    <published>2018-01-13T08:07:32.000Z</published>
    <updated>2019-06-11T02:32:22.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h3 id="本套源码为-2-5-3-版本"><a href="#本套源码为-2-5-3-版本" class="headerlink" title="本套源码为 2.5.3 版本"></a>本套源码为 2.5.3 版本</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/bd97bb05gy1g0bhl5xtg6j20bg0o6wfe.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><tabel><tbody>  <tr>    <td>build</td>    <td>编译相关</td>  </tr>  <tr>    <td>examples</td>    <td>示例代码</td>  </tr>  <tr>    <td>packages</td>    <td>组件</td>  </tr>  <tr>    <td>src</td>    <td>相关入口/工具函数</td>  </tr>  <tr><pre><code>&lt;td&gt;test/unit&lt;/td&gt;&lt;td&gt;测试相关&lt;/td&gt;</code></pre>  </tr>  <tr>    <td>types</td>    <td>接口声明</td>  </tr></tbody></tabel><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "bootstrap": "安装依赖",</span><br><span class="line">  "build:file": "编译源代码入口",</span><br><span class="line">  "build:theme": "编译主题相关",</span><br><span class="line">  "build:utils": "编译语言相关",</span><br><span class="line">  "build:umd": "编译语言相关/umd版本",</span><br><span class="line">  "clean": "rimraf lib &amp;&amp; rimraf packages/*/lib &amp;&amp; rimraf test/**/coverage",</span><br><span class="line">  "deploy:build": "npm run build:file &amp;&amp; cross-env NODE_ENV=production webpack --config build/webpack.demo.js &amp;&amp; echo element.eleme.io&gt;&gt;examples/element-ui/CNAME",</span><br><span class="line">  "dev": "运行开发模式 8085",</span><br><span class="line">  "dev:play": "npm run build:file &amp;&amp; cross-env NODE_ENV=development PLAY_ENV=true webpack-dev-server --config build/webpack.demo.js",</span><br><span class="line">  "dist": "打包",</span><br><span class="line">  "i18n": "i18n相关",</span><br><span class="line">  "lint": "lint相关",</span><br><span class="line">  "pub": "运行sh脚步 一次编译并部署",</span><br><span class="line">  "test": "测试",</span><br><span class="line">  "test:watch": "测试实时监测"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>查看<code>makefile</code>文件 执行<code>make</code>命令</p><p>使用<code>yarn</code>或<code>npm</code>安装依赖</p><p>安装完依赖之后执行<code>dev</code>命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn bootstrap</span><br><span class="line"></span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure><p>运行完 dev 命令后在<code>build</code>文件夹下<code>webpack.demo.js</code>查看端口号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">  port: <span class="number">8085</span>,</span><br><span class="line">  publicPath: <span class="string">'/'</span>,</span><br><span class="line">  noInfo: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>打开<a href="localhost:8085" target="_blank" rel="noopener">localhost:8085</a>预览项目</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h1&gt;&lt;h3 id=&quot;本套源码为-2-5-3-版本&quot;&gt;&lt;a href=&quot;#本套源码为-2-5-3-版本&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://lwwtotod.github.io/tags/JavaScript/"/>
    
      <category term="ElementUI" scheme="http://lwwtotod.github.io/tags/ElementUI/"/>
    
  </entry>
  
  <entry>
    <title>hexo 1</title>
    <link href="http://lwwtotod.github.io/2018/01/13/Hexo/1/"/>
    <id>http://lwwtotod.github.io/2018/01/13/Hexo/1/</id>
    <published>2018-01-13T08:07:32.000Z</published>
    <updated>2019-06-11T02:27:18.876Z</updated>
    
    <content type="html"><![CDATA[<p class="codepen" data-height="265" data-theme-id="light" data-default-tab="html,result" data-user="lwwtotod" data-slug-hash="vMWvEY" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="单栏布局">  <span>See the Pen <a href="https://codepen.io/lwwtotod/pen/vMWvEY/" target="_blank" rel="noopener">  单栏布局</a> by lwwtotod (<a href="https://codepen.io/lwwtotod" target="_blank" rel="noopener">@lwwtotod</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;lwwtotod&quot; data-slug-hash=&quot;vMWvEY&quot; style
      
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="hexo" scheme="http://lwwtotod.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>javascript 实现字典散列表</title>
    <link href="http://lwwtotod.github.io/2018/01/13/JavaScript/javascript%E5%AE%9E%E7%8E%B0%E5%AD%97%E5%85%B8%E6%95%A3%E5%88%97%E8%A1%A8/"/>
    <id>http://lwwtotod.github.io/2018/01/13/JavaScript/javascript实现字典散列表/</id>
    <published>2018-01-13T08:07:32.000Z</published>
    <updated>2019-04-16T03:35:26.469Z</updated>
    
    <content type="html"><![CDATA[<p>你已经知道，集合表示一组互不相同的元素（不重复的元素）。在字典中，存储的是[键，值] 对，其中键名是用来查询特定元素的。字典和集合很相似，集合以[值，值]的形式存储元素，字 典则是以[键，值]的形式来存储元素。字典也称作映射。</p><p>将要实现的类就是以 ECMAScript 6 中 Map 类的实现为基础的。你会发现它和 Set 类很相似（但不同于存储[值，值]对的形式，我们将要存储的是[键，值]对）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dictionary</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> items</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.set = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    items[key] = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.has(key)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> items[key]</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.has(key) ? items[key] : nuderfined</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> values = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> items) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.has(k)) &#123;</span><br><span class="line">        values.push(items[k])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> values</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    items = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(items).length</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.keys = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(items)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.getItems = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dictionary = <span class="keyword">new</span> Dictionary()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var loseloseHashCode = function(key) &#123;</span></span><br><span class="line"><span class="comment">//   var hash = 0</span></span><br><span class="line"><span class="comment">//   for (var i = 0; i &lt; key.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//     hash += key.charCodeAt(i)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   return hash % 37</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">var</span> loseloseHashCode = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash = <span class="number">5381</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">    hash = hash * <span class="number">33</span> + key.charCodeAt(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash % <span class="number">1013</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> table = []</span><br><span class="line">  <span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> position = loseloseHashCode(key)</span><br><span class="line">    <span class="built_in">console</span>.log(position + <span class="string">'-'</span> + key)</span><br><span class="line">    table[position] = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> table[loseloseHashCode(key)]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    table[loseloseHashCode(key)] = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hash = <span class="keyword">new</span> HashTable()</span><br><span class="line">hash.put(<span class="string">'Gandalf'</span>, <span class="string">'gandalf@email.com'</span>)</span><br><span class="line">hash.put(<span class="string">'John'</span>, <span class="string">'johnsnow@email.com'</span>)</span><br><span class="line">hash.put(<span class="string">'Tyrion'</span>, <span class="string">'tyrion@email.com'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Gandalf'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Loiane'</span>))</span><br><span class="line">hash.remove(<span class="string">'Gandalf'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Gandalf'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你已经知道，集合表示一组互不相同的元素（不重复的元素）。在字典中，存储的是[键，值] 对，其中键名是用来查询特定元素的。字典和集合很相似，集合以[值，值]的形式存储元素，字 典则是以[键，值]的形式来存储元素。字典也称作映射。&lt;/p&gt;
&lt;p&gt;将要实现的类就是以 ECMASc
      
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://lwwtotod.github.io/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://lwwtotod.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现排序算法</title>
    <link href="http://lwwtotod.github.io/2018/01/13/JavaScript/javascript%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://lwwtotod.github.io/2018/01/13/JavaScript/javascript实现排序算法/</id>
    <published>2018-01-13T08:07:32.000Z</published>
    <updated>2019-04-16T03:35:28.784Z</updated>
    
    <content type="html"><![CDATA[<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤 1~3，直到排序完成。<blockquote><p>冒泡排序</p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bubbleSort = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i, j, m, noswap</span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">'冒泡排序耗时'</span>)</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    noswap = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        m = arr[j]</span><br><span class="line">        arr[j] = arr[j + <span class="number">1</span>]</span><br><span class="line">        arr[j + <span class="number">1</span>] = m</span><br><span class="line">        noswap = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (noswap) &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">'冒泡排序耗时'</span>)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bubbleSort([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">79</span>]))</span><br></pre></td></tr></table></figure><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><blockquote><p>选择排序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">var</span> minIndex, temp</span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">'选择排序耗时'</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    minIndex = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">        minIndex = j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = arr[i]</span><br><span class="line">    arr[i] = arr[minIndex]</span><br><span class="line">    arr[minIndex] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">'选择排序耗时'</span>)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line"><span class="built_in">console</span>.log(selectionSort(arr)) <span class="comment">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 in-place 排序（即只需用到 O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><ol><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤 2~5。</li></ol><blockquote><p>插入排序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">'插入排序耗时'</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> key = arr[i]</span><br><span class="line">    <span class="keyword">var</span> j = i - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">      arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j + <span class="number">1</span>] = key</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">'插入排序耗时'</span>)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line"><span class="built_in">console</span>.log(insertionSort(arr))</span><br></pre></td></tr></table></figure><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>排序算法（Sorting algorithm）是计算机科学最古老、最基本的课题之一。要想成为合格的程序员，就必须理解和掌握各种排序算法。</p><p>目前，最常见的排序算法大概有七八种，其中”快速排序”（Quicksort）使用得最广泛，速度也较快。它是图灵奖得主 C. A. R. Hoare（1934–）于 1960 时提出来的。</p><ol><li>在数据集之中，选择一个元素作为”基准”（pivot）。</li><li>所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。</li><li>对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</li></ol><blockquote><p>快速排序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quickSort = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">var</span> left = []</span><br><span class="line">  <span class="keyword">var</span> right = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">      left.push(arr[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line"><span class="built_in">console</span>.log(quickSort(arr))</span><br></pre></td></tr></table></figure><script>export default {  method:{  },  mounted () {    console.log(`运行:`)    console.log(`var quickSort = function (arr) {      if (arr.length <= 1) {        return arr      }      var pivotIndex = Math.floor(arr.length / 2)      var pivot = arr.splice(pivotIndex, 1)[0]      var left = []      var right = []      for (var i = 0; i < arr.length; i++) {        if (arr[i] < pivot) {          left.push(arr[i])        } else {          right.push(arr[i])        }      }      return quickSort(left).concat([pivot], quickSort(right))    }    var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]    console.log(quickSort(arr))    `)    var quickSort = function (arr) {      if (arr.length <= 1) {        return arr      }      var pivotIndex = Math.floor(arr.length / 2)      var pivot = arr.splice(pivotIndex, 1)[0]      var left = []      var right = []      for (var i = 0; i < arr.length; i++) {        if (arr[i] < pivot) {          left.push(arr[i])        } else {          right.push(arr[i])        }      }      return quickSort(left).concat([pivot], quickSort(right))    }    var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]    console.log(`输出:`)    console.log(quickSort(arr))  }}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h4&gt;&lt;p&gt;冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工
      
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://lwwtotod.github.io/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://lwwtotod.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>javascript 实现图</title>
    <link href="http://lwwtotod.github.io/2018/01/13/JavaScript/javascript%E5%AE%9E%E7%8E%B0%E5%9B%BE/"/>
    <id>http://lwwtotod.github.io/2018/01/13/JavaScript/javascript实现图/</id>
    <published>2018-01-13T08:07:32.000Z</published>
    <updated>2019-06-25T01:28:14.962Z</updated>
    
    <content type="html"><![CDATA[<p>由一条边连接在一起的顶点称为相邻顶点。比如，A 和 B 是相邻的，A 和 D 是相邻的，A 和 C 是相邻的，A 和 E 不是相邻的。<br>一个顶点的度是其相邻顶点的数量。比如，A 和其他三个顶点相连接，因此，A 的度为 3；E 和其他两个顶点相连，因此，E 的度为 2。 路径是顶点 v1, v2,…,vk 的一个连续序列，其中 vi 和 vi+1 是相邻的。以上一示意图中的图为例， 其中包含路径 A B E I 和 A C D G。<br>简单路径要求不包含重复的顶点。举个例子，A D G 是一条简单路径。除去最后一个顶点（因 为它和第一个顶点是同一个顶点），环也是一个简单路径，比如 A D C A（最后一个顶点重新回到 A）。</p><h3 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h3><p>如果图中不存在环，则称该图是无环的。如果图中每两个顶点间都存在路径，则该图是连通的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://or2vgb0pq.bkt.clouddn.com//18-10-29/45067468.jpg" alt="图" title>                </div>                <div class="image-caption">图</div>            </figure><p>图还可以是未加权的（目前为止我们看到的图都是未加权的）或是加权的。如下图所示，加 权图的边被赋予了权值：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://or2vgb0pq.bkt.clouddn.com/18-10-29/23327009.jpg" alt="加权图" title>                </div>                <div class="image-caption">加权图</div>            </figure><p>我们可以使用图来解决计算机科学世界中的很多问题，比如搜索图中的一个特定顶点或搜索 一条特定边，寻找图中的一条路径（从一个顶点到另一个顶点），寻找两个顶点之间的最短路径， 以及环检测。</p><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p>图最常见的实现是邻接矩阵。每个节点都和一个整数相关联，该整数将作为数组的索引。我 们用一个二维数组来表示顶点之间的连接。如果索引为 i 的节点和索引为 j 的节点相邻，则 array[i][j] === 1，否则 array[i][j] === 0，如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://or2vgb0pq.bkt.clouddn.com//18-10-29/71130959.jpg" alt="邻接矩阵" title>                </div>                <div class="image-caption">邻接矩阵</div>            </figure><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p>我们也可以使用一种叫作邻接表的动态数据结构来表示图。邻接表由图中每个顶点的相邻顶 点列表所组成。存在好几种方式来表示这种数据结构。我们可以用列表（数组）、链表，甚至是 散列表或是字典来表示相邻顶点列表。下面的示意图展示了邻接表数据结构</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://or2vgb0pq.bkt.clouddn.com//18-10-29/43873809.jpg" alt="邻接表" title>                </div>                <div class="image-caption">邻接表</div>            </figure><h3 id="关联矩阵"><a href="#关联矩阵" class="headerlink" title="关联矩阵"></a>关联矩阵</h3><p>我们还可以用关联矩阵来表示图。在关联矩阵中，矩阵的行表示顶点，列表示边。如下图所 示，我们使用二维数组来表示两者之间的连通性，如果顶点 v 是边 e 的入射点，则 array[v][e] === 1； 否则，array[v][e] === 0</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://or2vgb0pq.bkt.clouddn.com//18-10-29/9738760.jpg" alt="关联矩阵" title>                </div>                <div class="image-caption">关联矩阵</div>            </figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//需要用到的队列类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//相队列尾部添加一个元素</span></span><br><span class="line">  enqueue(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//移除队列的一个个元素</span></span><br><span class="line">  dequeue() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.shift()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回队列第一个元素,第一个被添加的元素</span></span><br><span class="line">  front() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 查看队列是否为空</span></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length == <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 清除队列</span></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回队列包含的元素个数</span></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.items.toString())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要用到字典类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dictionary</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> items</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.set = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    items[key] = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.has(key)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> items[key]</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.has(key) ? items[key] : nuderfined</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> values = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> items) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.has(k)) &#123;</span><br><span class="line">        values.push(items[k])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> values</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    items = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(items).length</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.keys = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(items)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.getItems = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Graph</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//用一个数组存储顶点的名字</span></span><br><span class="line">  <span class="keyword">var</span> vertices = []</span><br><span class="line">  <span class="comment">//用一个字典存储邻接表</span></span><br><span class="line">  <span class="keyword">var</span> adjList = <span class="keyword">new</span> Dictionary()</span><br><span class="line">  <span class="comment">//这个方法接受顶点v作为参数</span></span><br><span class="line">  <span class="keyword">this</span>.addVertex = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//将顶点加到顶点列表中</span></span><br><span class="line">    vertices.push(v)</span><br><span class="line">    <span class="comment">// 在邻接表中设置v为键对于值为一个空数组</span></span><br><span class="line">    adjList.set(v, [])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//这个方法接受两个顶点作为参数</span></span><br><span class="line">  <span class="keyword">this</span>.addEdge = <span class="function"><span class="keyword">function</span>(<span class="params">v, w</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过将w加入到v的邻接表中，我们添加了一条自顶 点v到顶点w的边</span></span><br><span class="line">    adjList.get(v).push(w)</span><br><span class="line">    <span class="comment">// 无向图我们需要添加一条自w向v的边</span></span><br><span class="line">    adjList.get(w).push(v)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//实现一下Graph类的toString方法，以便于在控制台输出图</span></span><br><span class="line">  <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vertices.length; i++) &#123;</span><br><span class="line">      s += vertices[i] + <span class="string">' -&gt; '</span></span><br><span class="line">      <span class="keyword">var</span> neighbors = adjList.get(vertices[i])</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; neighbors.length; j++) &#123;</span><br><span class="line">        s += neighbors[j] + <span class="string">' '</span></span><br><span class="line">      &#125;</span><br><span class="line">      s += <span class="string">'\n'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> initializeColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vertices.length; i++) &#123;</span><br><span class="line">      color[vertices[i]] = <span class="string">'white'</span> <span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> color</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 广度优先搜索</span></span><br><span class="line">  <span class="keyword">this</span>.bfs = <span class="function"><span class="keyword">function</span>(<span class="params">v, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color = initializeColor() <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">var</span> queue = <span class="keyword">new</span> Queue() <span class="comment">//3</span></span><br><span class="line">    queue.enqueue(v) <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">      <span class="comment">//5</span></span><br><span class="line">      <span class="keyword">var</span> u = queue.dequeue() <span class="comment">//6</span></span><br><span class="line">      <span class="keyword">var</span> neighbors = adjList.get(u) <span class="comment">//7</span></span><br><span class="line">      color[u] = <span class="string">'grey'</span> <span class="comment">//8</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; neighbors.length; i++) &#123;</span><br><span class="line">        <span class="comment">//9</span></span><br><span class="line">        <span class="keyword">var</span> w = neighbors[i] <span class="comment">//10</span></span><br><span class="line">        <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>) &#123;</span><br><span class="line">          <span class="comment">//11</span></span><br><span class="line">          color[w] = <span class="string">'grey'</span> <span class="comment">//12</span></span><br><span class="line">          queue.enqueue(w) <span class="comment">//13</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      color[u] = <span class="string">'black'</span> <span class="comment">//14</span></span><br><span class="line">      <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">        <span class="comment">//15</span></span><br><span class="line">        callback(u)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试这段代码：</span></span><br><span class="line"><span class="keyword">var</span> graph = <span class="keyword">new</span> Graph()</span><br><span class="line"><span class="keyword">var</span> myVertices = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myVertices.length; i++) &#123;</span><br><span class="line">  graph.addVertex(myVertices[i])</span><br><span class="line">&#125;</span><br><span class="line">graph.addEdge(<span class="string">'A'</span>, <span class="string">'B'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'A'</span>, <span class="string">'C'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'A'</span>, <span class="string">'D'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'C'</span>, <span class="string">'D'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'C'</span>, <span class="string">'G'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'D'</span>, <span class="string">'G'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'D'</span>, <span class="string">'H'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'B'</span>, <span class="string">'E'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'B'</span>, <span class="string">'F'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'E'</span>, <span class="string">'I'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(graph.toString())</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printNode</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Visited vertex: '</span> + value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//广度优先搜索</span></span><br><span class="line">graph.bfs(myVertices[<span class="number">0</span>], printNode)</span><br><span class="line"><span class="comment">// 输出结果为:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  A -&gt; B C D</span></span><br><span class="line"><span class="comment">  B -&gt; A E F</span></span><br><span class="line"><span class="comment">  C -&gt; A D G</span></span><br><span class="line"><span class="comment">  D -&gt; A C G H</span></span><br><span class="line"><span class="comment">  E -&gt; B I</span></span><br><span class="line"><span class="comment">  F -&gt; B</span></span><br><span class="line"><span class="comment">  G -&gt; C D</span></span><br><span class="line"><span class="comment">  H -&gt; D</span></span><br><span class="line"><span class="comment">  I -&gt; E</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Visited vertex: A</span></span><br><span class="line"><span class="comment">  Visited vertex: B</span></span><br><span class="line"><span class="comment">  Visited vertex: C</span></span><br><span class="line"><span class="comment">  Visited vertex: D</span></span><br><span class="line"><span class="comment">  Visited vertex: E</span></span><br><span class="line"><span class="comment">  Visited vertex: F</span></span><br><span class="line"><span class="comment">  Visited vertex: G</span></span><br><span class="line"><span class="comment">  Visited vertex: H</span></span><br><span class="line"><span class="comment">  Visited vertex: I</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><disqus></disqus>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由一条边连接在一起的顶点称为相邻顶点。比如，A 和 B 是相邻的，A 和 D 是相邻的，A 和 C 是相邻的，A 和 E 不是相邻的。&lt;br&gt;一个顶点的度是其相邻顶点的数量。比如，A 和其他三个顶点相连接，因此，A 的度为 3；E 和其他两个顶点相连，因此，E 的度为 2。
      
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://lwwtotod.github.io/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://lwwtotod.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>javascript 实现链表</title>
    <link href="http://lwwtotod.github.io/2018/01/13/JavaScript/javascript%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%A1%A8/"/>
    <id>http://lwwtotod.github.io/2018/01/13/JavaScript/javascript实现链表/</id>
    <published>2018-01-13T08:07:32.000Z</published>
    <updated>2019-04-16T03:35:36.588Z</updated>
    
    <content type="html"><![CDATA[<p>链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个 元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针或链接）组成。</p><p>相对于传统的数组，链表的一个好处在于，添加或移除元素的时候不需要移动其他元素。然 而，链表需要使用指针，因此实现链表时需要额外注意。数组的另一个细节是可以直接访问任何 位置的任何元素，而要想访问链表中间的一个元素，需要从起点（表头）开始迭代列表直到找到 所需的元素。<br>现实中也有一些链表的例子。第一个例子就是康加舞队。每个人是一个元素，手就是链向下 一个人的指针。可以向队列中增加人——只需要找到想加入的点，断开连接，插入一个人，再重 新连接起来。</p><p>另一个例子是寻宝游戏。你有一条线索，这条线索是指向寻找下一条线索的地点的指针。你顺着这条链接去下一个地点，得到另一条指向再下一处的线索。得到列表中间的线索的唯一办法， 就是从起点（第一条线索）顺着列表寻找。<br>还有一个可能是用来说明链表的最流行的例子，那就是火车。一列火车是由一系列车厢（也 称车皮）组成的。每节车厢或车皮都相互连接。你很容易分离一节车皮，改变它的位置，添加或 移除它。</p><h3 id="创建一个链表"><a href="#创建一个链表" class="headerlink" title="创建一个链表"></a>创建一个链表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 一个辅助类,表示一个节点,包含一个指针,指向下一个节点</span></span><br><span class="line">  <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.element = element</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 表示列表项的长度</span></span><br><span class="line">  <span class="keyword">var</span> length = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 第一个节点的引用</span></span><br><span class="line">  <span class="keyword">var</span> head = <span class="literal">null</span></span><br><span class="line">  <span class="comment">// 向链表尾部添加一个新的项</span></span><br><span class="line">  <span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个节点</span></span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">      current <span class="comment">//用于暂存当前项</span></span><br><span class="line">    <span class="comment">//如果是空链表 那么 直接让head成为一个节点head.next自动变成null</span></span><br><span class="line">    <span class="keyword">if</span> (head === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">//列表中第一个节点</span></span><br><span class="line">      head = node</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 当前的head不为null,说明当前的head有next属性</span></span><br><span class="line">      current = head</span><br><span class="line">      <span class="comment">// 循环链表找到最后一项</span></span><br><span class="line">      <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">        current = current.next</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 当curent.next等于空时说明已经到了最后一项</span></span><br><span class="line">      <span class="comment">// 然后把node赋值给最后一项即可</span></span><br><span class="line">      current.next = node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新长度</span></span><br><span class="line">    length++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 向链表的特定位置插入一个新的项</span></span><br><span class="line">  <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position, element</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//检查越界值</span></span><br><span class="line">    <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length) &#123;</span><br><span class="line">      <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">        current = head,</span><br><span class="line">        previous,</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">      <span class="comment">//在第一个位置添加</span></span><br><span class="line">      <span class="comment">//current是对链表中第一个元素的引用</span></span><br><span class="line">      <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 现在head和node.next都指向了current</span></span><br><span class="line">        node.next = current</span><br><span class="line">        <span class="comment">// 把head的引用改为node</span></span><br><span class="line">        head = node</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 当跳出循环时，current变量将是对想要插入新元素的位置之后一个 元素的引用，</span></span><br><span class="line">        <span class="comment">// 而previous将是对想要插入新元素的位置之前一个元素的引用。</span></span><br><span class="line">        <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">          previous = current</span><br><span class="line">          current = current.next</span><br><span class="line">        &#125;</span><br><span class="line">        // 因此，首先需要把新项（node）和当前项链接起来，然后需要改变previous和current之间的链接。</span><br><span class="line">        // 我们还需要让previous.next 指向node。</span><br><span class="line">        node.next = current</span><br><span class="line">        previous.next = node</span><br><span class="line">      &#125;</span><br><span class="line">      //更新长度</span><br><span class="line">      length++</span><br><span class="line"></span><br><span class="line">      return true</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 从链表中移除一项</span><br><span class="line">  this.remove = function(element) &#123;&#125;</span><br><span class="line">  // 从链表中的特定位置移除一项</span><br><span class="line">  this.removeAt = function(position) &#123;</span><br><span class="line">    //检查越界值</span><br><span class="line">    if (position &gt; -1 &amp;&amp; positon &lt; length) &#123;</span><br><span class="line">      var current = head, //暂存当前项</span><br><span class="line">        previous, //暂存之前项</span><br><span class="line">        index = 0 //索引</span><br><span class="line">      // 如果移除第一项,直接让head置空即可</span><br><span class="line">      if (position === 0) &#123;</span><br><span class="line">        head = current.next</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        // 迭代链表</span><br><span class="line">        while (index++ &lt; position) &#123;</span><br><span class="line">          // 用previous(上一个)暂存current(当前项),当前项指向下一项</span><br><span class="line">          previous = current</span><br><span class="line">          current = current.next</span><br><span class="line">        &#125;</span><br><span class="line">        //将previous(上一个))与current(当前的)的下一项连接起来;跳过current,从而移除它</span><br><span class="line">        previous.next = current.next</span><br><span class="line">      &#125;</span><br><span class="line">      // 更新长度</span><br><span class="line">      length--</span><br><span class="line">      return current.element</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return null</span><br><span class="line">    &#125;</span><br><span class="line">    // current变量是对要移除元素的引用。previous变量是对要移除元素的前一个元素的引用。</span><br><span class="line">    // 那么要移除current元素，需要做的就是将previous.next与current.next链接起来。</span><br><span class="line">    // 因此， 我们的逻辑对这两种情况都管用。</span><br><span class="line">  &#125;</span><br><span class="line">  // 返回元素在链表中的索引</span><br><span class="line">  this.indexOf = function(element) &#123;</span><br><span class="line">    var current = head,</span><br><span class="line">      index = -1</span><br><span class="line">    while (current) &#123;</span><br><span class="line">      if (element === current.element) &#123;</span><br><span class="line">        return index</span><br><span class="line">      &#125;</span><br><span class="line">      index++</span><br><span class="line">      current = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    return -1</span><br><span class="line">  &#125;</span><br><span class="line">  // 返回链表是否为空</span><br><span class="line">  this.isEmpty = function() &#123;</span><br><span class="line">    return length === 0</span><br><span class="line">  &#125;</span><br><span class="line">  // 返回链表中的元素个数</span><br><span class="line">  this.size = function() &#123;</span><br><span class="line">    return length</span><br><span class="line">  &#125;</span><br><span class="line">  // 输出值</span><br><span class="line">  this.toString = function() &#123;</span><br><span class="line">    var current = head,</span><br><span class="line">      string = ''</span><br><span class="line">    while (current) &#123;</span><br><span class="line">      string = current.element</span><br><span class="line">      current = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    return string</span><br><span class="line">  &#125;</span><br><span class="line">  this.getHead = function() &#123;</span><br><span class="line">    return head</span><br><span class="line">  &#125;</span><br><span class="line">  this.print = function() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.element = element</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.prev = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> length = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> head = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">var</span> tail = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position, element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length) &#123;</span><br><span class="line">      <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">        current = head,</span><br><span class="line">        previous,</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">          <span class="comment">//1</span></span><br><span class="line">          head = node</span><br><span class="line">          tail = node</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          node.next = current</span><br><span class="line">          current.prev = node <span class="comment">//2</span></span><br><span class="line">          head = node</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === length) &#123;</span><br><span class="line">        current = tail <span class="comment">//3</span></span><br><span class="line">        current.next = node</span><br><span class="line">        node.prev = current</span><br><span class="line">        tail = node</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (index++ &lt; position) &#123; //4</span><br><span class="line">          previous = current</span><br><span class="line">          current = current.next</span><br><span class="line">        &#125;</span><br><span class="line">        node.next = current //5</span><br><span class="line">        previous.next = node</span><br><span class="line"></span><br><span class="line">        current.prev = node</span><br><span class="line">        node.prev = previous</span><br><span class="line">      &#125;</span><br><span class="line">      length++</span><br><span class="line">      return true</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个 元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针或链接）组成。&lt;/p&gt;
&lt;p&gt;相对于传统的数组，链表的一个好处在于，添加或移除元素的时候不需要移动其他元素。然 而，链表需要使用
      
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://lwwtotod.github.io/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://lwwtotod.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>javascript 实现栈</title>
    <link href="http://lwwtotod.github.io/2018/01/13/JavaScript/javascript%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
    <id>http://lwwtotod.github.io/2018/01/13/JavaScript/javascript实现栈/</id>
    <published>2018-01-13T08:07:32.000Z</published>
    <updated>2019-04-16T03:35:30.932Z</updated>
    
    <content type="html"><![CDATA[<p>栈是一种遵从后进先出（LIFO）原则的有序集合。新添加的或待删除的元素都保存在栈的 末尾，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。</p><p>在现实生活中也能发现很多栈的例子。例如，下图里的一摞书或者餐厅里堆放的盘子。</p><p>我们将创建一个类来表示栈。让我们从基础开始，先声明这个类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//各种属性和方法的声明</span></span><br><span class="line">  <span class="keyword">var</span> items = []</span><br><span class="line">  <span class="comment">//添加一个（或几个）新元素到栈顶</span></span><br><span class="line">  <span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    items.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//移除栈顶的元素，同时返回被移除的元素。</span></span><br><span class="line">  <span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.pop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返 回它）</span></span><br><span class="line">  <span class="keyword">this</span>.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length - <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果栈里没有任何元素就返回true，否则返回false。</span></span><br><span class="line">  <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items == []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//移除栈里的所有元素</span></span><br><span class="line">  <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    items = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回栈里的元素个数。</span></span><br><span class="line">  <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(items.toString())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用刚刚声明的栈方法实现一个十进制数转二进制数的算法</p><p>要把十进制转化成二进制，我们可以将该十进制数字和 2 整除（二进制是满二进一），直到结 果是 0 为止</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divideBy2</span>(<span class="params">decNumber</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> remStack = <span class="keyword">new</span> Stack(),</span><br><span class="line">      rem,</span><br><span class="line">      binaryString =<span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (decNumber &gt;<span class="number">0</span> )&#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(decNumber % <span class="number">2</span>);</span><br><span class="line">    remStack.push(rem);</span><br><span class="line">    decNumber = <span class="built_in">Math</span>.floor(decNumber / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!remStack.isEmpty())&#123;</span><br><span class="line">    binaryString += remStack.pop().toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> binaryString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们很容易修改之前的算法，使之能把十进制转换成任何进制。除了让十进制数字和 2 整除 转成二进制数，还可以传入其他任意进制的基数为参数，就像下面算法这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseConverter</span>(<span class="params">decNumber,base</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> remStack = <span class="keyword">new</span> Stack(),</span><br><span class="line">      rem,</span><br><span class="line">      baseString = <span class="string">''</span>,</span><br><span class="line">      digits = <span class="string">'0123456789ABCDEF'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (decNumber &gt;<span class="number">0</span>)&#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(decNumber % base);</span><br><span class="line">    remStack.push(rem);</span><br><span class="line">    decNumber = <span class="built_in">Math</span>.floor(decNumber / base)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!remStack.isEmpty())&#123;</span><br><span class="line">    baseString +=  digits[remStack.pop()];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> baseString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script>export default {  mounted () {    function Stack() {      //各种属性和方法的声明      var items = []      //添加一个（或几个）新元素到栈顶      this.push = function(item) {        items.push(item)      }      //移除栈顶的元素，同时返回被移除的元素。      this.pop = function() {        return items.pop()      }      //返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返 回它）      this.peek = function() {        return items.length - 1      }      //如果栈里没有任何元素就返回true，否则返回false。      this.isEmpty = function() {        return items == []      }      //移除栈里的所有元素      this.clear = function() {        items = []      }      //返回栈里的元素个数。      this.size = function() {        return items.length      }      this.print = function() {        console.log(items.toString())      }    }    function baseConverter(decNumber,base){        var remStack = new Stack(),            rem,            baseString = '',            digits = '0123456789ABCDEF';        while (decNumber >0){          rem = Math.floor(decNumber % base);          remStack.push(rem);          decNumber = Math.floor(decNumber / base)        }        while (!remStack.isEmpty()){          baseString +=  digits[remStack.pop()];         }        return baseString;     }    // console.log(baseConverter(1345, 2))     // console.log(baseConverter(100345, 8))     // console.log(baseConverter(100345, 16))  }}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;栈是一种遵从后进先出（LIFO）原则的有序集合。新添加的或待删除的元素都保存在栈的 末尾，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。&lt;/p&gt;
&lt;p&gt;在现实生活中也能发现很多栈的例子。例如，下图里的一摞书或者餐厅里堆放的盘子。&lt;/p&gt;
&lt;p&gt;我们将
      
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://lwwtotod.github.io/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://lwwtotod.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>组件皮肤样式篇</title>
    <link href="http://lwwtotod.github.io/2018/01/13/Element/%E7%BB%84%E4%BB%B6%E7%9A%AE%E8%82%A4%E6%A0%B7%E5%BC%8F%E7%AF%87/"/>
    <id>http://lwwtotod.github.io/2018/01/13/Element/组件皮肤样式篇/</id>
    <published>2018-01-13T08:07:32.000Z</published>
    <updated>2019-04-16T03:36:12.346Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://lwwtotod.github.io/tags/JavaScript/"/>
    
      <category term="ElementUI" scheme="http://lwwtotod.github.io/tags/ElementUI/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现简单二叉查找树</title>
    <link href="http://lwwtotod.github.io/2018/01/13/JavaScript/javascript%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/"/>
    <id>http://lwwtotod.github.io/2018/01/13/JavaScript/javascript实现简单二叉查找树/</id>
    <published>2018-01-13T08:07:32.000Z</published>
    <updated>2019-04-16T03:35:34.196Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://or2vgb0pq.bkt.clouddn.com//18-10-29/46844758.jpg" alt="二叉树" title>                </div>                <div class="image-caption">二叉树</div>            </figure><p>二叉树：二叉树就是一种数据结构， 它的组织关系就像是自然界中的树一样。官方语言的定义是：是一个有限元素的集合,该集合或者为空、或者由一个称为根的元素及两个不相交的、被分别称为左子树和右子树的二叉树组成。</p><p>节点： 树中的每个元素称为一个节点，</p><p>根节点： 位于整棵树顶点的节点，它没有父节点。</p><p>子节点： 其他节点的后代</p><p>叶子节点: 没有子节点的元素称为叶子节点。</p><h4 id="二叉树创建代码的实现"><a href="#二叉树创建代码的实现" class="headerlink" title="二叉树创建代码的实现"></a>二叉树创建代码的实现</h4><blockquote><p>创建二叉树</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明根节点</span></span><br><span class="line"><span class="keyword">var</span> root = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinarSearchTree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.key = key</span><br><span class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个方法会通过递归得调用自身，来找到新添加节点的合适位置</span></span><br><span class="line">  <span class="keyword">var</span> insertNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, newNode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断插入左节点还是右节点,然后递归调用</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.key &lt;= node.key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.left = newNode</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(node.left, newNode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.right = newNode</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(node.right, newNode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断创建根节点还是插入子节点</span></span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 创建一个用来表示新节点的Node类实例，因此需要new一下Node类并传入需要插入的key值，它会自动初始化为左右节点为null的一个新节点</span></span><br><span class="line">      <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(key)</span><br><span class="line">      <span class="comment">// 先判断树是否为空，若为空，新插入的节点就作为根节点，如不为空，调用一个辅助方法insertNode()方法，将根节点和新节点传入</span></span><br><span class="line">      <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">        root = newNode</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(root, newNode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义要插入的二叉树</span></span><br><span class="line"><span class="keyword">var</span> nodes = [<span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment">// 实例化二叉树函数</span></span><br><span class="line"><span class="keyword">var</span> _binarSearchTree = <span class="keyword">new</span> BinarSearchTree()</span><br><span class="line"><span class="comment">// 遍历数组插入节点</span></span><br><span class="line">nodes.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  _binarSearchTree.insert(key)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//查看二叉树输出结果】</span></span><br><span class="line"><span class="built_in">console</span>.log(root)</span><br></pre></td></tr></table></figure><h4 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h4><p>中序遍历（LDR）是二叉树遍历的一种，也叫做中根遍历、中序周游。在二叉树中，先左后根再右。巧记：左根右。</p><p>中序便历可用于排序。</p><p>以下代码先查找最左叶子节点然后打印出来，如果没有最左叶子节点则打印根节点，最后打印右子节点。</p><blockquote><p>中序遍历</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> inOrderTraverseNode = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断当前节点如果不为空则递归查找节点，按照左根右的顺序</span></span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 先查找左叶子节点，如果左叶子节点有值则递归此节点</span></span><br><span class="line">      inOrderTraverseNode(node.left)</span><br><span class="line">      <span class="comment">// 如果没有左叶子节点则打印当前根节点</span></span><br><span class="line">      <span class="built_in">console</span>.log(node.key)</span><br><span class="line">      <span class="comment">// 最后查找右子节点</span></span><br><span class="line">      inOrderTraverseNode(node.right)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//中序遍历</span></span><br><span class="line">  <span class="keyword">this</span>.inOrderTraverse = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将二叉树根节点传入</span></span><br><span class="line">    inOrderTraverseNode(root)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树的先序遍历"><a href="#二叉树的先序遍历" class="headerlink" title="二叉树的先序遍历"></a>二叉树的先序遍历</h4><p>先序遍历(Pre-order)，按照根左右的顺序沿一定路径经过路径上所有的结点。在二叉树中，先根后左再右。巧记：根左右。</p><p>先序遍历常用于复制二叉树。</p><p>先序遍历与中序遍历代码很像，只不过先查找根节点打印出来，然后在查找最左叶子节点然后打印出来，最后打印右子节点。</p><blockquote><p>先序遍历</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> preOrderTraverseNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 先打印当前节点然后在查找左右子节点</span></span><br><span class="line">    <span class="built_in">console</span>.log(node.key)</span><br><span class="line">    preOrderTraverseNode(node.left)</span><br><span class="line">    preOrderTraverseNode(node.right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.preOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  preOrderTraverseNode(root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树的后序遍历"><a href="#二叉树的后序遍历" class="headerlink" title="二叉树的后序遍历"></a>二叉树的后序遍历</h4><p>后序遍历（LRD）是二叉树遍历的一种，也叫做后根遍历、后序周游，可记做左右根。后序遍历有递归算法和非递归算法两种。在二叉树中，先左后右再根。巧记：左右根。</p><p>后序遍历实际应用于操作系统的文件系统遍历中。</p><p>后序遍历与上面两个遍历一样，这回变为左右根的顺序。</p><blockquote><p>后序遍历</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.postOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  postOrderTraverseNode(root)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> postOrderTraverseNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    postOrderTraverseNode(node.left)</span><br><span class="line">    postOrderTraverseNode(node.right)</span><br><span class="line">    <span class="comment">// 如果没有左右子节点最后打印根节点</span></span><br><span class="line">    <span class="built_in">console</span>.log(node.key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树查找最大值与最小值"><a href="#二叉树查找最大值与最小值" class="headerlink" title="二叉树查找最大值与最小值"></a>二叉树查找最大值与最小值</h4><p>二叉树的最左子节点为最小，最右节点为最大，按照这个规律我们只需要递归查找最左与最右子节点就可以查到最大与最下值。</p><blockquote><p>查找最小节点</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node) &#123;</span><br><span class="line">    <span class="comment">// 如果当前节点不为空并且含有左子节点</span></span><br><span class="line">    <span class="keyword">while</span> (node &amp;&amp; node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.left</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.key</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查找最小节点</span></span><br><span class="line"><span class="keyword">this</span>.min = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> minNode(root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>查找最大节点</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node) &#123;</span><br><span class="line">    <span class="comment">// 如果当前节点不为空并且含有右子节点</span></span><br><span class="line">    <span class="keyword">while</span> (node &amp;&amp; node.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.key</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查找最大节点</span></span><br><span class="line"><span class="keyword">this</span>.max = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> maxNode(root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树查找指定值"><a href="#二叉树查找指定值" class="headerlink" title="二叉树查找指定值"></a>二叉树查找指定值</h4><p>实现查找二叉树特定值这个方法首先检验 node 的合法性，如果为 null，直接退出，并返回 fasle。如果传入的 key 比当前传入 node 的 key 值小，它会继续递归查找 node 的左侧节点，反之，查找右侧节点。如果找到相等节点，直接退出，并返回 true。</p><blockquote><p>查找指定值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果节点为空则返回</span></span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">    <span class="comment">// 如果查找值小于当前节点值则查找左子节点</span></span><br><span class="line">    <span class="keyword">return</span> searchNode(node.left, key)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">    <span class="comment">// 如果查找值大于当前节点值则查找右子节点</span></span><br><span class="line">    <span class="keyword">return</span> searchNode(node.right, key)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查找指定节点</span></span><br><span class="line"><span class="keyword">this</span>.search = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> searchNode(root, key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="移除节点"><a href="#移除节点" class="headerlink" title="移除节点"></a>移除节点</h4><p>移除节点的实现情况比较复杂，它会有三种不同的情况：</p><ol><li><p>需要移除的节点是一个叶子节点</p></li><li><p>需要移除的节点包含一个子节点</p></li><li><p>需要移除的节点包含两个子节点</p></li></ol><p>和实现搜索指定节点一元，要移除某个节点，必须先找到它所在的位置，因此移除方法的实现中部分代码和上面相同，其中，移除包含两个子节点的节点是最复杂的情况，它包含左侧节点和右侧节点，对它进行移除主要需要三个步骤：</p><ol><li>需要找到它右侧子树中的最小节点来代替它的位置</li><li>将它右侧子树中的最小节点移除</li><li>将更新后的节点的引用指向原节点的父节点</li></ol><p>有点绕，但必须这样，因为删除元素后的二叉搜索树必须保持它的排序性质。</p><blockquote><p>移除节点</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">    node.left = removeNode(node.left, key)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">    node.right = removeNode(node.right, key)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 需要移除的是一个叶子节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.left === <span class="literal">null</span> &amp;&amp; node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">      node = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要移除的节点包含一个叶子节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.right</span><br><span class="line">      <span class="keyword">return</span> node</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.left</span><br><span class="line">      <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//需要移除的节点包含两个子节点</span></span><br><span class="line">    <span class="keyword">var</span> aux = findMinNode(node.right)</span><br><span class="line">    node.key = aux.key</span><br><span class="line">    node.right = removeNode(node.right, axu.key)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> findMinNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node) &#123;</span><br><span class="line">    <span class="keyword">while</span> (node &amp;&amp; node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.left</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移除节点</span></span><br><span class="line"><span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  removeNode(root, key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明根节点</span></span><br><span class="line"><span class="keyword">var</span> root = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinarSearchTree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.key = key</span><br><span class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断创建根节点还是插入子节点</span></span><br><span class="line">  <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(key)</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">      root = newNode</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      insertNode(root, newNode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断插入左节点还是右节点</span></span><br><span class="line">  <span class="keyword">var</span> insertNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, newNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newNode.key &lt;= node.key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.left = newNode</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(node.left, newNode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.right = newNode</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(node.right, newNode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> inOrderTraverseNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断当前节点如果不为空则递归查找节点，按照左根右的顺序</span></span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 先查找左叶子节点，如果左叶子节点有值则递归此节点</span></span><br><span class="line">      inOrderTraverseNode(node.left)</span><br><span class="line">      <span class="comment">// 如果没有左叶子节点则打印当前根节点</span></span><br><span class="line">      <span class="built_in">console</span>.log(node.key)</span><br><span class="line">      <span class="comment">// 最后查找右子节点</span></span><br><span class="line">      inOrderTraverseNode(node.right)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//中序遍历</span></span><br><span class="line">  <span class="keyword">this</span>.inOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将二叉树根节点传入</span></span><br><span class="line">    inOrderTraverseNode(root)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> preOrderTraverseNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(node.key)</span><br><span class="line">      preOrderTraverseNode(node.left)</span><br><span class="line">      preOrderTraverseNode(node.right)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 先序遍历</span></span><br><span class="line">  <span class="keyword">this</span>.preOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    preOrderTraverseNode(root)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> postOrderTraverseNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      postOrderTraverseNode(node.left)</span><br><span class="line">      postOrderTraverseNode(node.right)</span><br><span class="line">      <span class="comment">// 如果没有左右子节点最后打印根节点</span></span><br><span class="line">      <span class="built_in">console</span>.log(node.key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 后序遍历</span></span><br><span class="line">  <span class="keyword">this</span>.postOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    postOrderTraverseNode(root)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> minNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="comment">// 如果当前节点不为空并且含有左子节点</span></span><br><span class="line">      <span class="keyword">while</span> (node &amp;&amp; node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.left</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> node.key</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 查找最小节点</span></span><br><span class="line">  <span class="keyword">this</span>.min = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> minNode(root)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> maxNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="comment">// 如果当前节点不为空并且含有右子节点</span></span><br><span class="line">      <span class="keyword">while</span> (node &amp;&amp; node.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.right</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> node.key</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//查找最大节点</span></span><br><span class="line">  <span class="keyword">this</span>.max = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> maxNode(root)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> searchNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果节点为空则返回</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">      <span class="comment">// 如果查找值小于当前节点值则查找左子节点</span></span><br><span class="line">      <span class="keyword">return</span> searchNode(node.left, key)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">      <span class="comment">// 如果查找值大于当前节点值则查找右子节点</span></span><br><span class="line">      <span class="keyword">return</span> searchNode(node.right, key)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 查找指定节点</span></span><br><span class="line">  <span class="keyword">this</span>.search = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> searchNode(root, key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> removeNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">      node.left = removeNode(node.left, key)</span><br><span class="line">      <span class="keyword">return</span> node</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">      node.right = removeNode(node.right, key)</span><br><span class="line">      <span class="keyword">return</span> node</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 需要移除的是一个叶子节点</span></span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span> &amp;&amp; node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//需要移除的节点包含一个叶子节点</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.right</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.left</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//需要移除的节点包含两个子节点</span></span><br><span class="line">      <span class="keyword">var</span> aux = findMinNode(node.right)</span><br><span class="line">      node.key = aux.key</span><br><span class="line">      node.right = removeNode(node.right, axu.key)</span><br><span class="line">      <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> findMinNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="keyword">while</span> (node &amp;&amp; node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.left</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//移除节点</span></span><br><span class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    removeNode(root, key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nodes = [<span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">15</span>]</span><br><span class="line"><span class="keyword">var</span> _binarSearchTree = <span class="keyword">new</span> BinarSearchTree()</span><br><span class="line">nodes.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  _binarSearchTree.insert(key)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 打印插入完的二叉树</span></span><br><span class="line"><span class="built_in">console</span>.log(root)</span><br><span class="line"><span class="comment">// 调用中序遍历方法</span></span><br><span class="line">_binarSearchTree.inOrderTraverse()</span><br><span class="line"><span class="comment">// 调用先序遍历方法</span></span><br><span class="line">_binarSearchTree.preOrderTraverse()</span><br><span class="line"><span class="comment">// 调用后序遍历方法</span></span><br><span class="line">_binarSearchTree.postOrderTraverse()</span><br><span class="line"><span class="comment">// 查找最小值</span></span><br><span class="line"><span class="built_in">console</span>.log(_binarSearchTree.min())</span><br><span class="line"><span class="comment">// 查找最大值</span></span><br><span class="line"><span class="built_in">console</span>.log(_binarSearchTree.max())</span><br><span class="line"><span class="comment">// 查找特定值</span></span><br><span class="line"><span class="built_in">console</span>.log(_binarSearchTree.search(<span class="number">2</span>))</span><br><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line">_binarSearchTree.remove(<span class="number">8</span>)</span><br><span class="line">_binarSearchTree.inOrderTraverse()</span><br></pre></td></tr></table></figure><script>export default {  mounted(){     // 声明根节点    var root = null;    // 声明函数    function BinarSearchTree() {      var Node = function (key) {        this.key = key;        this.left = null;        this.right = null;      };      // 判断创建根节点还是插入子节点      this.insert = function (key) {        var newNode = new Node(key)        if (root === null) {          root = newNode        } else {          insertNode(root, newNode)        }      }      // 判断插入左节点还是右节点      var insertNode = function (node, newNode) {        if (newNode.key <= node.key) {          if (node.left === null) {            node.left = newNode          } else {            insertNode(node.left, newNode)          }        } else {          if (node.right === null) {            node.right = newNode          } else {            insertNode(node.right, newNode)          }        }      }      var inOrderTraverseNode = function (node) {        // 判断当前节点如果不为空则递归查找节点，按照左根右的顺序        if (node !== null) {          // 先查找左叶子节点，如果左叶子节点有值则递归此节点          inOrderTraverseNode(node.left)          // 如果没有左叶子节点则打印当前根节点          console.log(node.key)          // 最后查找右子节点          inOrderTraverseNode(node.right)        }      }      //中序遍历      this.inOrderTraverse = function () {        // 将二叉树根节点传入        inOrderTraverseNode(root)      }      var preOrderTraverseNode = function (node) {        if (node !== null) {          console.log(node.key)          preOrderTraverseNode(node.left)          preOrderTraverseNode(node.right)        }      }      // 先序遍历      this.preOrderTraverse = function () {        preOrderTraverseNode(root)      }      var postOrderTraverseNode = function (node) {        if (node !== null) {          postOrderTraverseNode(node.left)          postOrderTraverseNode(node.right)          // 如果没有左右子节点最后打印根节点          console.log(node.key)        }      }      // 后序遍历      this.postOrderTraverse = function () {        postOrderTraverseNode(root)      }      var minNode = function (node) {        if (node) {          // 如果当前节点不为空并且含有左子节点          while (node && node.left !== null) {            node = node.left          }          return node.key        }      }      // 查找最小节点      this.min = function () {        return minNode(root)      }      var maxNode = function (node) {        if (node) {          // 如果当前节点不为空并且含有右子节点          while (node && node.right !== null) {            node = node.right          }          return node.key        }      }      this.max = function () {        return maxNode(root)      }      var searchNode = function (node, key) {        // 如果节点为空则返回        if (node === null) {          return false        }        if (key < node.key) {          // 如果查找值小于当前节点值则查找左子节点          return searchNode(node.left, key)        } else if (key > node.key) {          // 如果查找值大于当前节点值则查找右子节点          return searchNode(node.right, key)        } else {          return true        }      }      // 查找指定节点      this.search = function (key) {        return searchNode(root, key)      }      var removeNode = function (node, key) {        if (node == null) {          return null        }        if (key < node.key) {          node.left = removeNode(node.left, key)          return node        } else if (key > node.key) {          node.right = removeNode(node.right, key)          return node        } else {          // 需要移除的是一个叶子节点          if (node.left === null && node.right === null) {            node = null            return node          }          //需要移除的节点包含一个叶子节点          if (node.left === null) {            node = node.right            return node          } else if (node.left === null) {            node = node.left            return node          }          //需要移除的节点包含两个子节点          var aux = findMinNode(node.right)          node.key = aux.key          node.right = removeNode(node.right, axu.key)          return node        }      }      var findMinNode = function (node) {        if (node) {          while (node && node.left !== null) {            node = node.left          }          return node        }        return null      }      //移除节点      this.remove = function (key) {        removeNode(root, key)      }    }    var nodes = [7, 3, 6, 2, 8, 13, 5, 15];    var _binarSearchTree = new BinarSearchTree();    nodes.forEach(key => {      _binarSearchTree.insert(key)    })    // 打印插入完的二叉树    console.log(root)    // 调用中序遍历方法    _binarSearchTree.inOrderTraverse()    // 调用先序遍历方法    _binarSearchTree.preOrderTraverse()    // 调用后序遍历方法    _binarSearchTree.postOrderTraverse()    // 查找最小值    console.log(_binarSearchTree.min())    // 查找最大值    console.log(_binarSearchTree.max())    // 查找特定值    console.log(_binarSearchTree.search(2));    // 删除节点    _binarSearchTree.remove(8)    _binarSearchTree.inOrderTraverse()  }}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://lwwtotod.github.io/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://lwwtotod.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>面试题</title>
    <link href="http://lwwtotod.github.io/2018/01/13/InterView/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://lwwtotod.github.io/2018/01/13/InterView/常见面试题/</id>
    <published>2018-01-13T08:07:32.000Z</published>
    <updated>2019-04-16T03:35:51.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="的-title-和-alt-有什么区别？"><a href="#的-title-和-alt-有什么区别？" class="headerlink" title="的 title 和 alt 有什么区别？"></a><img>的 title 和 alt 有什么区别？</h3><p>alt 主要是无法加载显示图片时，代替文字，搜索引擎时主要是 <code>alt</code>，<code>alt</code> 只适用于图片 img。 鼠标悬浮文字上显示文字的诗 <code>title</code> 属性，<code>title</code> 适用于很多标签。</p><h3 id="什么是-web-语义化？html5-有哪些语义化标签？语义化有什么好处？"><a href="#什么是-web-语义化？html5-有哪些语义化标签？语义化有什么好处？" class="headerlink" title="什么是 web 语义化？html5 有哪些语义化标签？语义化有什么好处？"></a>什么是 web 语义化？html5 有哪些语义化标签？语义化有什么好处？</h3><p>W3C 组织意识到了之前 HTML 版本的不足，推出的 HTML5 进一步推进了 Web 语义化发展，采用了诸如 footer、section 等语义化标签，弥补了采用 id=”footer”或者 class=”footer”形式的不足，以更好的推动 Web 的发展。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  、</span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    、<span class="tag">&lt;<span class="name">sections</span></span></span><br><span class="line"><span class="tag">      &gt;</span>、</span><br><span class="line">      <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">        、</span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">sections</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="display-none-与-visibility-hidden-的区别？"><a href="#display-none-与-visibility-hidden-的区别？" class="headerlink" title="display: none;与 visibility: hidden;的区别？"></a>display: none;与 visibility: hidden;的区别？</h3><p>是否是继承属性：display 不是继承属性，而 visibility 是继承属性。</p><h3 id="如何分别水平、垂直居中一个元素？"><a href="#如何分别水平、垂直居中一个元素？" class="headerlink" title="如何分别水平、垂直居中一个元素？"></a>如何分别水平、垂直居中一个元素？</h3><ul><li>行内水平居中</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>块状水平居中</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多个块状元素的水平居中</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> <span class="selector-tag">flex</span> <span class="selector-tag">--</span> &gt; <span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>已知高度宽度元素的水平垂直居中</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 1 <span class="selector-tag">--</span> &gt; <span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 2 <span class="selector-tag">--</span> &gt; <span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>未知高度和宽度元素的水平垂直居中</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> <span class="selector-tag">base</span> <span class="selector-tag">--</span> &gt; <span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> <span class="selector-tag">css3</span> <span class="selector-tag">--</span> &gt; <span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> <span class="selector-tag">flex</span> <span class="selector-tag">--</span> &gt; <span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><h3 id="如何实现一个-JS-对象的深度克隆？"><a href="#如何实现一个-JS-对象的深度克隆？" class="headerlink" title="如何实现一个 JS 对象的深度克隆？"></a>如何实现一个 JS 对象的深度克隆？</h3><p>先来说一下什么是深度克隆：深拷贝是指源对象与拷贝对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。 举个例子，一个人名叫张三，后来用他克隆（假设法律允许）了另外一个人，叫李四，不管是张三缺胳膊少腿还是李四缺胳膊少腿都不会影响另外一个人。</p><p>在 JavaScript 中，对于 Object 和 Array 这类引用类型值，当从一个变量向另一个变量复制引用类型值时，这个值的副本其实是一个指针，两个变量指向同一个堆对象，改变其中一个变量，另一个也会受到影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> o2 = o1</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o1 === o2) <span class="comment">// =&gt;true</span></span><br><span class="line">o2.a = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(o1.a) <span class="comment">// =&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">var</span> o1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> o2 = o1</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o1 === o2) <span class="comment">// =&gt; true</span></span><br><span class="line">o2.push(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(o1) <span class="comment">// =&gt; [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>这种拷贝分为两种情况：拷贝引用和拷贝实例，也就是我们说的浅拷贝和深拷贝</p><p>浅拷贝（shallow copy）代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowClone</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!source || <span class="keyword">typeof</span> source !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error arguments'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> targetObj = source.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> keys <span class="keyword">in</span> source) &#123;</span><br><span class="line">    <span class="keyword">if</span> (source.hasOwnProperty(keys)) &#123;</span><br><span class="line">      targetObj[keys] = source[keys]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> targetObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深拷贝（deep copy）<br>深拷贝也就是拷贝出一个新的实例，新的实例和之前的实例互不影响，深拷贝的实现有几种方法，首先我们可以借助 jQuery，lodash 等第三方库完成一个深拷贝实例。在 jQuery 中可以通过添加一个参数来实现递归 extend，调用$.extend(true, {}, …)就可以实现一个深拷贝。</p><p>深拷贝（deep copy）代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归实现一个深拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//判断传入的参数是否是对象</span></span><br><span class="line">  <span class="keyword">if</span> (!source || <span class="keyword">typeof</span> source !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error arguments'</span>, <span class="string">'shallowClone'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  判断要深拷贝的是数组还是对象</span></span><br><span class="line">  <span class="keyword">var</span> targetObj = source.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">  <span class="comment">//  遍历复制对象</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> keys <span class="keyword">in</span> source) &#123;</span><br><span class="line">    <span class="keyword">if</span> (source.hasOwnProperty(keys)) &#123;</span><br><span class="line">      <span class="comment">//  判断如果为对象的key还是对象的话就递归调用</span></span><br><span class="line">      <span class="keyword">if</span> (source[keys] &amp;&amp; <span class="keyword">typeof</span> source[keys] === <span class="string">'object'</span>) &#123;</span><br><span class="line">        targetObj[keys] = source[keys].constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">        targetObj[keys] = deepClone(source[keys])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        targetObj[keys] = source[keys]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  返回克隆完的对象</span></span><br><span class="line">  <span class="keyword">return</span> targetObj</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test example</span></span><br><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">  arr: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  obj: &#123;</span><br><span class="line">    key: <span class="string">'value'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o3 = deepClone(o1)</span><br><span class="line"><span class="built_in">console</span>.log(o3 === o1) <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(o3.obj === o1.obj) <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(o2.func === o1.func) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><a href="https://yuchengkai.cn/docs/zh/frontend/#%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D" target="_blank" rel="noopener">参考详情</a></li></ul></blockquote><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><h4 id="IE-与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？"><a href="#IE-与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？" class="headerlink" title="IE 与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？"></a>IE 与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？</h4><ol><li>我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为</li><li>事件处理机制：IE 是事件冒泡、firefox 同时支持两种事件模型，也就是：捕获型事件和冒泡型事件</li><li>ev.stopPropagation();</li></ol><ul><li>注意旧 ie 的方法：ev.cancelBubble = true;</li></ul><h3 id="在浏览器地址栏中输入一个-URL-后回车，背后会进行哪些技术步骤？"><a href="#在浏览器地址栏中输入一个-URL-后回车，背后会进行哪些技术步骤？" class="headerlink" title="在浏览器地址栏中输入一个 URL 后回车，背后会进行哪些技术步骤？"></a>在浏览器地址栏中输入一个 URL 后回车，背后会进行哪些技术步骤？</h3><blockquote><ul><li><a href="https://www.zhihu.com/question/34873227" target="_blank" rel="noopener">参考详情</a></li></ul></blockquote><h3 id="编程实现获取-URL-中的参数："><a href="#编程实现获取-URL-中的参数：" class="headerlink" title="编程实现获取 URL 中的参数："></a>编程实现获取 URL 中的参数：</h3><ol><li><p>指定参数名称，返回该参数的值或者空字符串;</p></li><li><p>不指定参数名称，返回全部的参数对象或者{};</p></li><li><p>如果存在多个同名参数，则返回数组;</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; Url</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; Key</span></span><br><span class="line"><span class="comment"> * @return &#123;Object&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlParam</span>(<span class="params">Url, Key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> param = Url.split(<span class="string">'#'</span>)[<span class="number">0</span>].split(<span class="string">'?'</span>)[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">if</span> (Key) &#123;</span><br><span class="line">    <span class="comment">//指定参数名称</span></span><br><span class="line">    <span class="keyword">var</span> strs = param.split(<span class="string">'&amp;'</span>)</span><br><span class="line">    <span class="keyword">var</span> arrs = <span class="keyword">new</span> <span class="built_in">Array</span>() <span class="comment">//如果存在多个同名参数，则返回数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = strs.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmp = strs[i].split(<span class="string">'='</span>)</span><br><span class="line">      <span class="keyword">if</span> (tmp[<span class="number">0</span>] == Key) &#123;</span><br><span class="line">        arrs.push(tmp[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arrs.length == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">//返回该参数的值或者空字符串</span></span><br><span class="line">      <span class="keyword">return</span> arrs[<span class="number">0</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arrs.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> arrs</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//不指定参数名称，返回全部的参数对象 或者 &#123;&#125;</span></span><br><span class="line">    <span class="keyword">if</span> (param == <span class="literal">undefined</span> || param == <span class="string">''</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> strs = param.split(<span class="string">'&amp;'</span>)</span><br><span class="line">      <span class="keyword">var</span> arrObj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = strs.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = strs[i].split(<span class="string">'='</span>)</span><br><span class="line">        <span class="keyword">if</span> (!(tmp[<span class="number">0</span>] <span class="keyword">in</span> arrObj)) &#123;</span><br><span class="line">          arrObj[tmp[<span class="number">0</span>]] = []</span><br><span class="line">        &#125;</span><br><span class="line">        arrObj[tmp[<span class="number">0</span>]].push(tmp[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> arrObj</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// testUrl</span></span><br><span class="line"><span class="comment">//http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;test=4#hehe</span></span><br></pre></td></tr></table></figure><h3 id="输入习题"><a href="#输入习题" class="headerlink" title="输入习题"></a>输入习题</h3><h4 id="以下程序输出结果是？"><a href="#以下程序输出结果是？" class="headerlink" title="以下程序输出结果是？"></a>以下程序输出结果是？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="以下程序输出结果是？-1"><a href="#以下程序输出结果是？-1" class="headerlink" title="以下程序输出结果是？"></a>以下程序输出结果是？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">a.pro = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(a.pro + a)</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'hello'</span></span><br><span class="line">s.pro = <span class="string">'world'</span></span><br><span class="line"><span class="built_in">console</span>.log(s.pro + s)</span><br></pre></td></tr></table></figure><h4 id="写出输出结果"><a href="#写出输出结果" class="headerlink" title="写出输出结果"></a>写出输出结果</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> [])</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure><h4 id="写出输出结果？"><a href="#写出输出结果？" class="headerlink" title="写出输出结果？"></a>写出输出结果？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line">printing()</span><br></pre></td></tr></table></figure><h3 id="如何判断一个对象是否为函数？"><a href="#如何判断一个对象是否为函数？" class="headerlink" title="如何判断一个对象是否为函数？"></a>如何判断一个对象是否为函数？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(fn) === <span class="string">'[object Function]'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写出几种-js-跳转的常见方式？"><a href="#写出几种-js-跳转的常见方式？" class="headerlink" title="写出几种 js 跳转的常见方式？"></a>写出几种 js 跳转的常见方式？</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一种：直接跳转加参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.location.href=<span class="string">"login.jsp?backurl="</span>+<span class="built_in">window</span>.location.href;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 直接跳转无参数： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.location.href=<span class="string">'http://www.baidu.com'</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第二种：返回上一次预览界面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">alert(<span class="string">"返回"</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.history.back(<span class="number">-1</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签嵌套： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:history.go(-1)"</span>&gt;</span>返回上一步<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=Request.ServerVariables("</span><span class="attr">HTTP_REFERER</span>")%&gt;</span>"&gt;返回上一步<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第三种：指定跳转页面 对框架无效。。。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.navigate(<span class="string">"top.jsp"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第四种：指定自身跳转页面 对框架无效。。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"JavaScript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  self.location=<span class="string">'top.htm'</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第五种：指定自身跳转页面 对框架有效。。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      alert(<span class="string">"非法访问！"</span>);</span></span><br><span class="line"><span class="javascript">      top.location=<span class="string">'xx.aspx'</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第六种：按钮式 在button按钮添加 事件跳转。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"pclog"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"GO"</span> <span class="attr">onClick</span>=<span class="string">"location.href='login.aspx'"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第七种：在新窗口打开： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:"</span> <span class="attr">onClick</span>=<span class="string">"window.open('login.aspx','','height=500,width=611,scrollbars=yes,status=yes')"</span>&gt;</span>开新窗口<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="写出客户端存储-localStorage-和-sessionStorage-的-set、get-方法，localStorage-和-sessionStorage-有何区别？"><a href="#写出客户端存储-localStorage-和-sessionStorage-的-set、get-方法，localStorage-和-sessionStorage-有何区别？" class="headerlink" title="写出客户端存储 localStorage 和 sessionStorage 的 set、get 方法，localStorage 和 sessionStorage 有何区别？"></a>写出客户端存储 localStorage 和 sessionStorage 的 set、get 方法，localStorage 和 sessionStorage 有何区别？</h3><blockquote><p><a href="https://blog.csdn.net/xiaoermingn/article/details/53178092" target="_blank" rel="noopener">参考详情</a></p></blockquote><h3 id="通过-JS-获取页面尺寸、屏幕的方法？"><a href="#通过-JS-获取页面尺寸、屏幕的方法？" class="headerlink" title="通过 JS 获取页面尺寸、屏幕的方法？"></a>通过 JS 获取页面尺寸、屏幕的方法？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">网页可见区域宽：document.body.clientWidth</span><br><span class="line">网页可见区域高：document.body.clientHeight</span><br><span class="line">网页可见区域宽：document.body.offsetWidth (包括边线的宽)</span><br><span class="line">网页可见区域高：document.body.offsetHeight (包括边线的宽)</span><br><span class="line">网页正文全文宽：document.body.scrollWidth</span><br><span class="line">网页正文全文高：document.body.scrollHeight</span><br><span class="line">网页被卷去的高：document.body.scrollTop</span><br><span class="line">网页被卷去的左：document.body.scrollLeft</span><br><span class="line">网页正文部分上：window.screenTop</span><br><span class="line">网页正文部分左：window.screenLeft</span><br><span class="line">屏幕分辨率的高：window.screen.height</span><br><span class="line">屏幕分辨率的宽：window.screen.width</span><br><span class="line">屏幕可用工作区高度：window.screen.availHeight</span><br><span class="line">屏幕可用工作区宽度：window.screen.availWidth</span><br></pre></td></tr></table></figure><h3 id="列举-JS-实现跨域的几种方式？"><a href="#列举-JS-实现跨域的几种方式？" class="headerlink" title="列举 JS 实现跨域的几种方式？"></a>列举 JS 实现跨域的几种方式？</h3><blockquote><p><a href="https://juejin.im/entry/57d21eadbf22ec005f9c7d76" target="_blank" rel="noopener">参考详情</a></p></blockquote><h3 id="列举几种立即执行函数的实现方式。"><a href="#列举几种立即执行函数的实现方式。" class="headerlink" title="列举几种立即执行函数的实现方式。"></a>列举几种立即执行函数的实现方式。</h3><blockquote><p><a href="https://blog.csdn.net/wei_smile/article/details/77938180" target="_blank" rel="noopener">参考详情</a></p></blockquote><h3 id="var-numberArray-3-6-2-4-1-5"><a href="#var-numberArray-3-6-2-4-1-5" class="headerlink" title="var numberArray = [3, 6, 2, 4, 1, 5];"></a>var numberArray = [3, 6, 2, 4, 1, 5];</h3><ol><li>实现对该数组的倒排，输出[5, 1, 4, 2, 6, 3]</li><li>实现对该数组的的将序排列，输出[6, 5, 4, 3, 2, 1];</li></ol><h3 id="编写一个方法，去掉一个数组的重复元素"><a href="#编写一个方法，去掉一个数组的重复元素" class="headerlink" title="编写一个方法，去掉一个数组的重复元素"></a>编写一个方法，去掉一个数组的重复元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, item; (item = arr[i++]); ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newArr.indexOf(item) === <span class="number">-1</span>) &#123;</span><br><span class="line">      newArr.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写一个简单的-ajax-示例"><a href="#写一个简单的-ajax-示例" class="headerlink" title="写一个简单的 ajax 示例"></a>写一个简单的 ajax 示例</h3><blockquote><p><a href="http://www.runoob.com/try/try.php?filename=tryajax_first" target="_blank" rel="noopener">参考详情</a></p></blockquote><h3 id="JavaScript-有哪些方法定义对象？"><a href="#JavaScript-有哪些方法定义对象？" class="headerlink" title="JavaScript 有哪些方法定义对象？"></a>JavaScript 有哪些方法定义对象？</h3><blockquote><p><a href="http://www.runoob.com/js/js-objects.html" target="_blank" rel="noopener">参考详情</a></p></blockquote><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="HTTP-request-报文结构是怎样的？"><a href="#HTTP-request-报文结构是怎样的？" class="headerlink" title="HTTP request 报文结构是怎样的？"></a>HTTP request 报文结构是怎样的？</h3><ul><li><p>请求行: {请求方法} {资源路径} {协议版本}</p></li><li><p>请求头: 紧跟请求行的下一行，所有的请求头，除 Host 外都是可选的。</p></li><li><p>空行: 告诉服务器请求头部到此为止。</p></li><li><p>消息体: 消息的主体部分，消息体的数据格式通过 header 里面的 Content-Type 属性指定。</p></li></ul><h3 id="描述常见的-HTTP-状态码和-HTTP-方法"><a href="#描述常见的-HTTP-状态码和-HTTP-方法" class="headerlink" title="描述常见的 HTTP 状态码和 HTTP 方法"></a>描述常见的 HTTP 状态码和 HTTP 方法</h3><ul><li><code>200</code> - 请求成功</li><li><code>301</code> - 资源（网页等）被永久转移到其它 URL</li><li><code>404</code> - 请求的资源（网页等）不存在</li><li><code>500</code> - 内部服务器错误</li></ul><blockquote><ul><li><a href="http://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">参考详情</a></li></ul></blockquote><p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。</p><p>HTTP1.0 定义了三种请求方法： <code>GET</code>, <code>POST</code> 和 <code>HEAD</code> 方法。</p><p>HTTP1.1 新增了五种请求方法：<code>OPTIONS</code>, <code>PUT</code>, <code>DELETE</code>, <code>TRACE</code> 和 <code>CONNECT</code> 方法。</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>请求指定的页面信息，并返回实体主体。</td></tr><tr><td>2</td><td>HEAD</td><td>类似于 get 请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>3</td><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</td></tr><tr><td>4</td><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td>5</td><td>DELETE</td><td>请求服务器删除指定的页面。</td></tr><tr><td>6</td><td>CONNECT</td><td>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td>7</td><td>OPTIONS</td><td>允许客户端查看服务器的性能。</td></tr><tr><td>8</td><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断。</td></tr></tbody></table><blockquote><ul><li><a href="http://www.runoob.com/http/http-methods.html" target="_blank" rel="noopener">参考详情</a></li></ul></blockquote><h3 id="HTTP-状态码及其含义？"><a href="#HTTP-状态码及其含义？" class="headerlink" title="HTTP 状态码及其含义？"></a>HTTP 状态码及其含义？</h3><blockquote><p><a href="https://lwwtotod.github.io/doc/InterView/%E4%B8%80%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98.html#_2-%E6%8F%8F%E8%BF%B0%E5%B8%B8%E8%A7%81%E7%9A%84-http-%E7%8A%B6%E6%80%81%E7%A0%81%E5%92%8C-http-%E6%96%B9%E6%B3%95">参考链接</a></p></blockquote><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="请简单描述-Vue-双向绑定底层实现原理，常用到的指令及-Vue-实例的生命周期"><a href="#请简单描述-Vue-双向绑定底层实现原理，常用到的指令及-Vue-实例的生命周期" class="headerlink" title="请简单描述 Vue 双向绑定底层实现原理，常用到的指令及 Vue 实例的生命周期"></a>请简单描述 Vue 双向绑定底层实现原理，常用到的指令及 Vue 实例的生命周期</h3><blockquote><ul><li><a href="https://juejin.im/post/5abdd6f6f265da23793c4458" target="_blank" rel="noopener">参考详情</a></li></ul></blockquote><h2 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h2><h3 id="给出两个单词-word1-和-word2，找出将-word1-转换成-word2-所使用的最少的步骤数（每个操作记为一步）。"><a href="#给出两个单词-word1-和-word2，找出将-word1-转换成-word2-所使用的最少的步骤数（每个操作记为一步）。" class="headerlink" title="给出两个单词 word1 和 word2，找出将 word1 转换成 word2 所使用的最少的步骤数（每个操作记为一步）。"></a>给出两个单词 word1 和 word2，找出将 word1 转换成 word2 所使用的最少的步骤数（每个操作记为一步）。</h3><p>你可以对一个单词进行以下三种操作</p><ol><li>插入一个字符;</li><li>删除一个字符;</li><li>替换一个字符;</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; word1</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; word2</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minDistance = <span class="function"><span class="keyword">function</span>(<span class="params">word1, word2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len1 = word1.length,</span><br><span class="line">    len2 = word2.length,</span><br><span class="line">    matrix = [],</span><br><span class="line">    i,</span><br><span class="line">    j</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (len1 === <span class="number">0</span> || len2 === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(len1, len2)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//initialization</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">    matrix[i] = []</span><br><span class="line">    matrix[i][<span class="number">0</span>] = i</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= len2; j++) &#123;</span><br><span class="line">    matrix[<span class="number">0</span>][j] = j</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= len2; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) === word2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">        matrix[i][j] = matrix[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        matrix[i][j] =</span><br><span class="line">          <span class="built_in">Math</span>.min(matrix[i - <span class="number">1</span>][j], matrix[i][j - <span class="number">1</span>], matrix[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> matrix[len1][len2]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="如何进行网站性能优化，请简述。"><a href="#如何进行网站性能优化，请简述。" class="headerlink" title="如何进行网站性能优化，请简述。"></a>如何进行网站性能优化，请简述。</h3><ul><li>代码层面：避免使用 css 表达式，避免使用高级选择器，通配选择器。</li><li>缓存利用：缓存 Ajax，使用 CDN，使用外部 js 和 css 文件以便缓存，添加 Expires 头，服务端配置 Etag，减少 DNS 查找等</li><li>请求数量：合并样式和脚本，使用 css 图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载。</li><li>请求带宽：压缩文件，开启 GZIP，<br>代码层面的优化</li><li>用 hash-table 来优化查找</li><li>少用全局变量</li><li>用 innerHTML 代替 DOM 操作，减少 DOM 操作次数，优化 javascript 性能</li><li>用 setTimeout 来避免页面失去响应</li><li>缓存 DOM 节点查找的结果</li><li>避免使用 CSS Expression</li><li>避免全局查询</li><li>避免使用 with(with 会创建自己的作用域，会增加作用域链长度)</li><li>多个变量声明合并</li><li>避免图片和 iFrame 等的空 Src。空 Src 会重新加载当前页面，影响速度和效率</li><li>尽量避免写在 HTML 标签中写 Style 属性</li><li>移动端性能优化</li><li>尽量使用 css3 动画，开启硬件加速。</li><li>适当使用 touch 事件代替 click 事件。</li><li>避免使用 css3 渐变阴影效果。</li><li>可以用 transform: translateZ(0) 来开启硬件加速。（见下面的详细解释）</li><li>不滥用 Float。Float 在渲染时计算量比较大，尽量减少使用</li><li>不滥用 Web 字体。Web 字体需要下载，解析，重绘当前页面，尽量减少使用。</li><li>合理使用 requestAnimationFrame 动画代替 setTimeout</li><li>CSS 中的属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）会触发 GPU 渲染，请合理使用。过渡使用会引发手机过耗电增加</li><li>PC 端的在移动端同样适用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h1&gt;&lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTM
      
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://lwwtotod.github.io/tags/JavaScript/"/>
    
      <category term="面试题" scheme="http://lwwtotod.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>常用命令</title>
    <link href="http://lwwtotod.github.io/2018/01/13/Git/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://lwwtotod.github.io/2018/01/13/Git/常用命令/</id>
    <published>2018-01-13T08:07:32.000Z</published>
    <updated>2019-04-16T03:35:58.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-配置用户信息与-SSH-密钥"><a href="#Git-配置用户信息与-SSH-密钥" class="headerlink" title="Git 配置用户信息与 SSH 密钥"></a>Git 配置用户信息与 SSH 密钥</h1><h3 id="安装完-Git-第一件事要配置自己的信息"><a href="#安装完-Git-第一件事要配置自己的信息" class="headerlink" title="安装完 Git 第一件事要配置自己的信息"></a>安装完 Git 第一件事要配置自己的信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;John Doe&quot;</span><br><span class="line">$ git config --global user.email &quot;johndoe@example.com&quot;</span><br></pre></td></tr></table></figure><h3 id="连接远程仓库要配置自己的-ssh-秘钥"><a href="#连接远程仓库要配置自己的-ssh-秘钥" class="headerlink" title="连接远程仓库要配置自己的 ssh 秘钥"></a>连接远程仓库要配置自己的 ssh 秘钥</h3><p>默认情况下，用户的 SSH 私钥存储在其 ~/.ssh 目录下。 进入该目录并列出其中内容，你便可以快速确认自己是否已拥有私钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br><span class="line">$ ls</span><br><span class="line">authorized_keys2  id_dsa       known_hosts</span><br><span class="line">config            id_dsa.pub</span><br><span class="line"></span><br><span class="line">cat id_dsa.pub</span><br></pre></td></tr></table></figure><h3 id="如果没有-SSH-私钥则需要创建一个私钥来放到-Github-上面使用"><a href="#如果没有-SSH-私钥则需要创建一个私钥来放到-Github-上面使用" class="headerlink" title="如果没有 SSH 私钥则需要创建一个私钥来放到 Github 上面使用"></a>如果没有 SSH 私钥则需要创建一个私钥来放到 Github 上面使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/schacon/.ssh/id_rsa):</span><br><span class="line">Created directory &apos;/home/schacon/.ssh&apos;.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /home/schacon/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/schacon/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git-配置用户信息与-SSH-密钥&quot;&gt;&lt;a href=&quot;#Git-配置用户信息与-SSH-密钥&quot; class=&quot;headerlink&quot; title=&quot;Git 配置用户信息与 SSH 密钥&quot;&gt;&lt;/a&gt;Git 配置用户信息与 SSH 密钥&lt;/h1&gt;&lt;h3 id=&quot;安
      
    
    </summary>
    
      <category term="git" scheme="http://lwwtotod.github.io/categories/git/"/>
    
    
      <category term="JavaScript" scheme="http://lwwtotod.github.io/tags/JavaScript/"/>
    
      <category term="git" scheme="http://lwwtotod.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>javascript 实现图</title>
    <link href="http://lwwtotod.github.io/2018/01/13/Nodejs/Sequelize%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>http://lwwtotod.github.io/2018/01/13/Nodejs/Sequelize的配置/</id>
    <published>2018-01-13T08:07:32.000Z</published>
    <updated>2019-04-16T03:36:39.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nodejs-ORM-Sequelize-的基础配置"><a href="#Nodejs-ORM-Sequelize-的基础配置" class="headerlink" title="Nodejs ORM Sequelize 的基础配置"></a>Nodejs ORM Sequelize 的基础配置</h1><p>ORM</p><blockquote><p>Object-Relational Mapping，把关系数据库的表结构映射到对象上。</p></blockquote><p>使用 npm 安装 Sequelize 与 mysql</p><p>mysql 是驱动我们不使用但是 Sequelize 会使用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nodejs-ORM-Sequelize-的基础配置&quot;&gt;&lt;a href=&quot;#Nodejs-ORM-Sequelize-的基础配置&quot; class=&quot;headerlink&quot; title=&quot;Nodejs ORM Sequelize 的基础配置&quot;&gt;&lt;/a&gt;Nodejs O
      
    
    </summary>
    
      <category term="Nodejs" scheme="http://lwwtotod.github.io/categories/Nodejs/"/>
    
    
      <category term="Koa" scheme="http://lwwtotod.github.io/tags/Koa/"/>
    
      <category term="Sequelize" scheme="http://lwwtotod.github.io/tags/Sequelize/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置</title>
    <link href="http://lwwtotod.github.io/2018/01/13/Vscode/%E9%85%8D%E7%BD%AE/"/>
    <id>http://lwwtotod.github.io/2018/01/13/Vscode/配置/</id>
    <published>2018-01-13T08:07:32.000Z</published>
    <updated>2019-04-16T03:37:00.457Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.fontFamily"</span>: <span class="string">"Consolas, 'Courier New', monospace"</span>,</span><br><span class="line">  <span class="attr">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"editor.fontSize"</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">"workbench.iconTheme"</span>: <span class="string">"vscode-icons"</span>,</span><br><span class="line">  <span class="attr">"workbench.colorTheme"</span>: <span class="string">"One Dark Pro"</span>,</span><br><span class="line">  <span class="attr">"window.zoomLevel"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"extensions.ignoreRecommendations"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"emmet.syntaxProfiles"</span>: &#123;</span><br><span class="line">    <span class="attr">"vue-html"</span>: <span class="string">"html"</span>,</span><br><span class="line">    <span class="attr">"vue"</span>: <span class="string">"html"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">"eslint.options"</span>: &#123;</span><br><span class="line">    <span class="attr">"plugins"</span>: [<span class="string">"html"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"eslint.validate"</span>: [</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"javascriptreact"</span>,</span><br><span class="line">    <span class="string">"html"</span>,</span><br><span class="line">    <span class="string">"vue"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"html"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"prettier.singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"prettier.semi"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"prettier.eslintIntegration"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"vetur.validation.template"</span>: <span class="literal">false</span>,</span><br><span class="line">  // 使用 js-beautify-html 插件格式化 html</span><br><span class="line">  "vetur.format.defaultFormatter.html": "js-beautify-html",</span><br><span class="line">  // 格式化插件的配置</span><br><span class="line">  "vetur.format.defaultFormatterOptions": &#123;</span><br><span class="line">    "js-beautify-html": &#123;</span><br><span class="line">      // 属性强制折行对齐</span><br><span class="line">      "wrap_attributes": "force-aligned"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line
      
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://lwwtotod.github.io/tags/JavaScript/"/>
    
      <category term="vscode" scheme="http://lwwtotod.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Axios 基础配置</title>
    <link href="http://lwwtotod.github.io/2018/01/13/Vue/Axios%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <id>http://lwwtotod.github.io/2018/01/13/Vue/Axios基础配置/</id>
    <published>2018-01-13T08:07:32.000Z</published>
    <updated>2019-04-16T03:37:22.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Axios-基础配置"><a href="#Axios-基础配置" class="headerlink" title="Axios 基础配置"></a>Axios 基础配置</h1><h3 id="全局的-axios-默认值"><a href="#全局的-axios-默认值" class="headerlink" title="全局的 axios 默认值"></a>全局的 axios 默认值</h3><p>引入 axios 后</p><pre><code>axios.defaults.baseURL = &apos;https://api.example.com&apos;;axios.defaults.headers.common[&apos;Authorization&apos;] = AUTH_TOKEN;axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;;</code></pre><h3 id="自定义实例默认值"><a href="#自定义实例默认值" class="headerlink" title="自定义实例默认值"></a>自定义实例默认值</h3><pre><code>// 创建实例时设置配置的默认值var instance = axios.create({baseURL: &apos;https://api.example.com&apos;});// 在实例已创建后修改默认值instance.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/json&apos;instance.defaults.headers.common[&apos;Authorization&apos;] = AUTH_TOKEN;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Axios-基础配置&quot;&gt;&lt;a href=&quot;#Axios-基础配置&quot; class=&quot;headerlink&quot; title=&quot;Axios 基础配置&quot;&gt;&lt;/a&gt;Axios 基础配置&lt;/h1&gt;&lt;h3 id=&quot;全局的-axios-默认值&quot;&gt;&lt;a href=&quot;#全局的-axio
      
    
    </summary>
    
      <category term="前端" scheme="http://lwwtotod.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://lwwtotod.github.io/tags/Vue/"/>
    
      <category term="Axios" scheme="http://lwwtotod.github.io/tags/Axios/"/>
    
  </entry>
  
</feed>
