{"meta":{"title":"网络日志","subtitle":"Web Developer & Designer","description":"Beijing, China","author":"blankserver","url":"http://lwwtotod.github.io","root":"/"},"pages":[{"title":"","date":"2019-04-15T06:13:04.981Z","updated":"2019-04-15T05:53:46.000Z","comments":false,"path":"categories/index.html","permalink":"http://lwwtotod.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-04-15T06:13:04.981Z","updated":"2019-04-15T05:53:56.000Z","comments":false,"path":"tags/index.html","permalink":"http://lwwtotod.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Css布局","slug":"CSS/layout","date":"2019-04-18T07:23:47.667Z","updated":"2019-04-18T07:46:14.412Z","comments":true,"path":"2019/04/18/CSS/layout/","link":"","permalink":"http://lwwtotod.github.io/2019/04/18/CSS/layout/","excerpt":"","text":"单栏布局示例 1 See the Pen 单栏布局 by lwwtotod (@lwwtotod) on CodePen. 示例 2(通栏) See the Pen 单栏布局2 by lwwtotod (@lwwtotod) on CodePen. 两栏布局示例 1 See the Pen 两栏布局 by lwwtotod (@lwwtotod) on CodePen. 示例 2 See the Pen 两栏布局2 by lwwtotod (@lwwtotod) on CodePen. 示例 3 See the Pen 两栏布局3 by lwwtotod (@lwwtotod) on CodePen. 三栏布局双飞翼布局 See the Pen 双飞翼布局 by lwwtotod (@lwwtotod) on CodePen. 圣杯布局 See the Pen 三栏布局2 by lwwtotod (@lwwtotod) on CodePen.","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://lwwtotod.github.io/tags/CSS/"}]},{"title":"Mac下配置ngxin","slug":"Nginx/mac下配置ngxin","date":"2019-04-16T03:21:37.982Z","updated":"2019-04-16T03:30:15.524Z","comments":true,"path":"2019/04/16/Nginx/mac下配置ngxin/","link":"","permalink":"http://lwwtotod.github.io/2019/04/16/Nginx/mac下配置ngxin/","excerpt":"","text":"Mac 系统如何使用 Nginx 使用 brew 安装 12345678&lt;!-- 更新brew--&gt;brew update&lt;!-- 查看安装信息--&gt;brew -v&lt;!-- 查看是否安装了nginx--&gt;brew info nginx 安装 nginx 1brew install nginx 启动 nginx 123456&lt;!--启动nginx--&gt;nginx&lt;!--重启nginx--&gt;nginx -s reload&lt;!--停止nginx--&gt;nginx -s stop","categories":[{"name":"Mac","slug":"Mac","permalink":"http://lwwtotod.github.io/categories/Mac/"},{"name":"ngxin","slug":"Mac/ngxin","permalink":"http://lwwtotod.github.io/categories/Mac/ngxin/"}],"tags":[{"name":"ngxin","slug":"ngxin","permalink":"http://lwwtotod.github.io/tags/ngxin/"},{"name":"Mac","slug":"Mac","permalink":"http://lwwtotod.github.io/tags/Mac/"}]},{"title":"观察者模式","slug":"JavaScript/观察者模式","date":"2019-03-13T08:07:32.000Z","updated":"2019-06-11T02:35:40.425Z","comments":true,"path":"2019/03/13/JavaScript/观察者模式/","link":"","permalink":"http://lwwtotod.github.io/2019/03/13/JavaScript/观察者模式/","excerpt":"","text":"","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://lwwtotod.github.io/tags/设计模式/"}]},{"title":"leetcode初级算法","slug":"leetcode/LeetCode","date":"2019-03-13T08:07:32.000Z","updated":"2019-04-17T07:39:05.034Z","comments":true,"path":"2019/03/13/leetcode/LeetCode/","link":"","permalink":"http://lwwtotod.github.io/2019/03/13/leetcode/LeetCode/","excerpt":"","text":"26.从排序数组中删除重复项解题思路：一级循环从左至右遍历数组，对比对象为该循环索引右侧的所有元素，所以二级循环取从右到左，并终止于一级循环索引数 i，遇到相同元素，立即删除右侧（二级循环中的）元素并变更原始数组，以保证一级循环过的元素都是唯一的。 1234567891011121314151617/*** @param &#123;number[]&#125; nums* @return &#123;number&#125;*/var removeDuplicates = function(nums) &#123; // return [...new Set(nums)] // return Array.from(new Set(nums)) // nums = [...new Set(nums)] // return nums for(i=0;i&lt;nums.length;i++)&#123; for(j=nums.length-1;j&gt;i;j--)&#123; if(nums[i]==nums[j])&#123; nums.splice(i,1) &#125; &#125; &#125;&#125;;","categories":[{"name":"算法","slug":"算法","permalink":"http://lwwtotod.github.io/categories/算法/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"},{"name":"算法","slug":"算法","permalink":"http://lwwtotod.github.io/tags/算法/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://lwwtotod.github.io/tags/LeetCode/"}]},{"title":"npm 与 yarn 管理工具","slug":"Nodejs/npm与yarn","date":"2019-03-13T02:02:44.000Z","updated":"2019-04-16T03:32:14.513Z","comments":true,"path":"2019/03/13/Nodejs/npm与yarn/","link":"","permalink":"http://lwwtotod.github.io/2019/03/13/Nodejs/npm与yarn/","excerpt":"","text":"npm 与 yarn 管理工具全局安装 nrm 与 yrm npm install nrm -g &amp;&amp; npm install yrm -g查看源 nrm ls &amp;&amp; yrm ls使用淘宝源 nrm use cnpm &amp;&amp; yrm ue cnpm","categories":[{"name":"npm","slug":"npm","permalink":"http://lwwtotod.github.io/categories/npm/"}],"tags":[{"name":"npm","slug":"npm","permalink":"http://lwwtotod.github.io/tags/npm/"},{"name":"yarn","slug":"yarn","permalink":"http://lwwtotod.github.io/tags/yarn/"}]},{"title":"个人管理","slug":"about","date":"2019-01-13T08:07:32.000Z","updated":"2019-06-25T01:29:18.941Z","comments":true,"path":"2019/01/13/about/","link":"","permalink":"http://lwwtotod.github.io/2019/01/13/about/","excerpt":"","text":"个人管理计划 todos 📆学习 🎯 React 系列（进行中） Element 源码分析系列 （进行中） 英语语法","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://lwwtotod.github.io/tags/生活/"}]},{"title":"起步","slug":"Element/起步","date":"2018-01-13T08:07:32.000Z","updated":"2019-06-11T02:32:22.306Z","comments":true,"path":"2018/01/13/Element/起步/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/Element/起步/","excerpt":"","text":"起步本套源码为 2.5.3 版本 build 编译相关 examples 示例代码 packages 组件 src 相关入口/工具函数 &lt;td&gt;test/unit&lt;/td&gt; &lt;td&gt;测试相关&lt;/td&gt; types 接口声明 1234567891011121314151617\"scripts\": &#123; \"bootstrap\": \"安装依赖\", \"build:file\": \"编译源代码入口\", \"build:theme\": \"编译主题相关\", \"build:utils\": \"编译语言相关\", \"build:umd\": \"编译语言相关/umd版本\", \"clean\": \"rimraf lib &amp;&amp; rimraf packages/*/lib &amp;&amp; rimraf test/**/coverage\", \"deploy:build\": \"npm run build:file &amp;&amp; cross-env NODE_ENV=production webpack --config build/webpack.demo.js &amp;&amp; echo element.eleme.io&gt;&gt;examples/element-ui/CNAME\", \"dev\": \"运行开发模式 8085\", \"dev:play\": \"npm run build:file &amp;&amp; cross-env NODE_ENV=development PLAY_ENV=true webpack-dev-server --config build/webpack.demo.js\", \"dist\": \"打包\", \"i18n\": \"i18n相关\", \"lint\": \"lint相关\", \"pub\": \"运行sh脚步 一次编译并部署\", \"test\": \"测试\", \"test:watch\": \"测试实时监测\"&#125;, 查看makefile文件 执行make命令 使用yarn或npm安装依赖 安装完依赖之后执行dev命令 123yarn bootstrapyarn dev 运行完 dev 命令后在build文件夹下webpack.demo.js查看端口号 123456devServer: &#123; host: '0.0.0.0', port: 8085, publicPath: '/', noInfo: true&#125;, 打开localhost:8085预览项目","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"},{"name":"ElementUI","slug":"ElementUI","permalink":"http://lwwtotod.github.io/tags/ElementUI/"}]},{"title":"hexo 1","slug":"Hexo/1","date":"2018-01-13T08:07:32.000Z","updated":"2019-06-11T02:27:18.876Z","comments":true,"path":"2018/01/13/Hexo/1/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/Hexo/1/","excerpt":"","text":"See the Pen 单栏布局 by lwwtotod (@lwwtotod) on CodePen.","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://lwwtotod.github.io/tags/hexo/"}]},{"title":"javascript 实现字典散列表","slug":"JavaScript/javascript实现字典散列表","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T03:35:26.469Z","comments":true,"path":"2018/01/13/JavaScript/javascript实现字典散列表/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/JavaScript/javascript实现字典散列表/","excerpt":"","text":"你已经知道，集合表示一组互不相同的元素（不重复的元素）。在字典中，存储的是[键，值] 对，其中键名是用来查询特定元素的。字典和集合很相似，集合以[值，值]的形式存储元素，字 典则是以[键，值]的形式来存储元素。字典也称作映射。 将要实现的类就是以 ECMAScript 6 中 Map 类的实现为基础的。你会发现它和 Set 类很相似（但不同于存储[值，值]对的形式，我们将要存储的是[键，值]对）。 123456789101112131415161718192021222324252627282930313233343536373839404142function Dictionary() &#123; var items = &#123;&#125; this.has = function(key) &#123; return key in items &#125; this.set = function(key, value) &#123; items[key] = value &#125; this.remove = function() &#123; if (this.has(key)) &#123; delete items[key] return true &#125; return false &#125; this.get = function(key) &#123; return this.has(key) ? items[key] : nuderfined &#125; this.values = function() &#123; var values = [] for (var k in items) &#123; if (this.has(k)) &#123; values.push(items[k]) &#125; &#125; return values &#125; this.clear = function() &#123; items = &#123;&#125; &#125; this.size = function() &#123; return Object.keys(items).length &#125; this.keys = function() &#123; return Object.keys(items) &#125; this.getItems = function() &#123; return items &#125;&#125;var dictionary = new Dictionary() 123456789101112131415161718192021222324252627282930313233343536// var loseloseHashCode = function(key) &#123;// var hash = 0// for (var i = 0; i &lt; key.length; i++) &#123;// hash += key.charCodeAt(i)// &#125;// return hash % 37// &#125;var loseloseHashCode = function(key) &#123; var hash = 5381 for (var i = 0; i &lt; key.length; i++) &#123; hash = hash * 33 + key.charCodeAt(i) &#125; return hash % 1013&#125;function HashTable() &#123; var table = [] this.put = function(key, value) &#123; var position = loseloseHashCode(key) console.log(position + '-' + key) table[position] = value &#125; this.get = function(key) &#123; return table[loseloseHashCode(key)] &#125; this.remove = function(key) &#123; table[loseloseHashCode(key)] = undefined &#125;&#125;var hash = new HashTable()hash.put('Gandalf', 'gandalf@email.com')hash.put('John', 'johnsnow@email.com')hash.put('Tyrion', 'tyrion@email.com')console.log(hash.get('Gandalf'))console.log(hash.get('Loiane'))hash.remove('Gandalf')console.log(hash.get('Gandalf'))","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"},{"name":"算法","slug":"算法","permalink":"http://lwwtotod.github.io/tags/算法/"}]},{"title":"JavaScript 实现排序算法","slug":"JavaScript/javascript实现排序算法","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T03:35:28.784Z","comments":true,"path":"2018/01/13/JavaScript/javascript实现排序算法/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/JavaScript/javascript实现排序算法/","excerpt":"","text":"冒泡排序冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 比较相邻的元素。如果第一个比第二个大，就交换它们两个； 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数； 针对所有的元素重复以上的步骤，除了最后一个； 重复步骤 1~3，直到排序完成。 冒泡排序 1234567891011121314151617181920212223242526var bubbleSort = function(arr) &#123; var i, j, m, noswap var len = arr.length if (len &lt;= 1) &#123; return &#125; console.time('冒泡排序耗时') for (i = 0; i &lt; len; i++) &#123; noswap = true for (j = 0; j &lt; len - i - 1; j++) &#123; if (arr[j] &gt; arr[j + 1]) &#123; m = arr[j] arr[j] = arr[j + 1] arr[j + 1] = m noswap = false &#125; &#125; if (noswap) &#123; break &#125; &#125; console.timeEnd('冒泡排序耗时') return arr&#125;console.log(bubbleSort([2, 3, 4, 5, 1, 2, 23, 4, 5, 6, 79])) 选择排序选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 选择排序 1234567891011121314151617181920function selectionSort(arr) &#123; var len = arr.length var minIndex, temp console.time('选择排序耗时') for (var i = 0; i &lt; len - 1; i++) &#123; minIndex = i for (var j = i + 1; j &lt; len; j++) &#123; if (arr[j] &lt; arr[minIndex]) &#123; minIndex = j &#125; &#125; temp = arr[i] arr[i] = arr[minIndex] arr[minIndex] = temp &#125; console.timeEnd('选择排序耗时') return arr&#125;var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]console.log(selectionSort(arr)) //[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50] 插入排序插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 in-place 排序（即只需用到 O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。 从第一个元素开始，该元素可以认为已经被排序； 取出下一个元素，在已经排序的元素序列中从后向前扫描； 如果该元素（已排序）大于新元素，将该元素移到下一位置； 重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置； 将新元素插入到该位置后； 重复步骤 2~5。 插入排序 1234567891011121314151617function insertionSort(arr) &#123; var len = arr.length console.time('插入排序耗时') for (var i = 1; i &lt; len; i++) &#123; var key = arr[i] var j = i - 1 while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) &#123; arr[j + 1] = arr[j] j-- &#125; arr[j + 1] = key &#125; console.timeEnd('插入排序耗时') return arr&#125;var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]console.log(insertionSort(arr)) 快速排序排序算法（Sorting algorithm）是计算机科学最古老、最基本的课题之一。要想成为合格的程序员，就必须理解和掌握各种排序算法。 目前，最常见的排序算法大概有七八种，其中”快速排序”（Quicksort）使用得最广泛，速度也较快。它是图灵奖得主 C. A. R. Hoare（1934–）于 1960 时提出来的。 在数据集之中，选择一个元素作为”基准”（pivot）。 所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。 对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。 快速排序 12345678910111213141516171819var quickSort = function(arr) &#123; if (arr.length &lt;= 1) &#123; return arr &#125; var pivotIndex = Math.floor(arr.length / 2) var pivot = arr.splice(pivotIndex, 1)[0] var left = [] var right = [] for (var i = 0; i &lt; arr.length; i++) &#123; if (arr[i] &lt; pivot) &#123; left.push(arr[i]) &#125; else &#123; right.push(arr[i]) &#125; &#125; return quickSort(left).concat([pivot], quickSort(right))&#125;var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]console.log(quickSort(arr)) export default { method:{ }, mounted () { console.log(`运行:`) console.log(`var quickSort = function (arr) { if (arr.length","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"},{"name":"算法","slug":"算法","permalink":"http://lwwtotod.github.io/tags/算法/"}]},{"title":"javascript 实现图","slug":"JavaScript/javascript实现图","date":"2018-01-13T08:07:32.000Z","updated":"2019-06-25T01:28:14.962Z","comments":true,"path":"2018/01/13/JavaScript/javascript实现图/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/JavaScript/javascript实现图/","excerpt":"","text":"由一条边连接在一起的顶点称为相邻顶点。比如，A 和 B 是相邻的，A 和 D 是相邻的，A 和 C 是相邻的，A 和 E 不是相邻的。一个顶点的度是其相邻顶点的数量。比如，A 和其他三个顶点相连接，因此，A 的度为 3；E 和其他两个顶点相连，因此，E 的度为 2。 路径是顶点 v1, v2,…,vk 的一个连续序列，其中 vi 和 vi+1 是相邻的。以上一示意图中的图为例， 其中包含路径 A B E I 和 A C D G。简单路径要求不包含重复的顶点。举个例子，A D G 是一条简单路径。除去最后一个顶点（因 为它和第一个顶点是同一个顶点），环也是一个简单路径，比如 A D C A（最后一个顶点重新回到 A）。 有向图如果图中不存在环，则称该图是无环的。如果图中每两个顶点间都存在路径，则该图是连通的。 图 图还可以是未加权的（目前为止我们看到的图都是未加权的）或是加权的。如下图所示，加 权图的边被赋予了权值： 加权图 我们可以使用图来解决计算机科学世界中的很多问题，比如搜索图中的一个特定顶点或搜索 一条特定边，寻找图中的一条路径（从一个顶点到另一个顶点），寻找两个顶点之间的最短路径， 以及环检测。 邻接矩阵图最常见的实现是邻接矩阵。每个节点都和一个整数相关联，该整数将作为数组的索引。我 们用一个二维数组来表示顶点之间的连接。如果索引为 i 的节点和索引为 j 的节点相邻，则 array[i][j] === 1，否则 array[i][j] === 0，如下图所示 邻接矩阵 邻接表我们也可以使用一种叫作邻接表的动态数据结构来表示图。邻接表由图中每个顶点的相邻顶 点列表所组成。存在好几种方式来表示这种数据结构。我们可以用列表（数组）、链表，甚至是 散列表或是字典来表示相邻顶点列表。下面的示意图展示了邻接表数据结构 邻接表 关联矩阵我们还可以用关联矩阵来表示图。在关联矩阵中，矩阵的行表示顶点，列表示边。如下图所 示，我们使用二维数组来表示两者之间的连通性，如果顶点 v 是边 e 的入射点，则 array[v][e] === 1； 否则，array[v][e] === 0 关联矩阵 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191//需要用到的队列类class Queue &#123; constructor() &#123; this.items = [] &#125; //相队列尾部添加一个元素 enqueue(element) &#123; this.items.push(element) &#125; //移除队列的一个个元素 dequeue() &#123; return this.items.shift() &#125; // 返回队列第一个元素,第一个被添加的元素 front() &#123; return this.items[0] &#125; // 查看队列是否为空 isEmpty() &#123; return this.items.length == 0 &#125; // 清除队列 clear() &#123; this.items = [] &#125; // 返回队列包含的元素个数 size() &#123; return this.items.length &#125; print() &#123; console.log(this.items.toString()) &#125;&#125;//需要用到字典类型function Dictionary() &#123; var items = &#123;&#125; this.has = function(key) &#123; return key in items &#125; this.set = function(key, value) &#123; items[key] = value &#125; this.remove = function() &#123; if (this.has(key)) &#123; delete items[key] return true &#125; return false &#125; this.get = function(key) &#123; return this.has(key) ? items[key] : nuderfined &#125; this.values = function() &#123; var values = [] for (var k in items) &#123; if (this.has(k)) &#123; values.push(items[k]) &#125; &#125; return values &#125; this.clear = function() &#123; items = &#123;&#125; &#125; this.size = function() &#123; return Object.keys(items).length &#125; this.keys = function() &#123; return Object.keys(items) &#125; this.getItems = function() &#123; return items &#125;&#125;function Graph() &#123; //用一个数组存储顶点的名字 var vertices = [] //用一个字典存储邻接表 var adjList = new Dictionary() //这个方法接受顶点v作为参数 this.addVertex = function(v) &#123; //将顶点加到顶点列表中 vertices.push(v) // 在邻接表中设置v为键对于值为一个空数组 adjList.set(v, []) &#125; //这个方法接受两个顶点作为参数 this.addEdge = function(v, w) &#123; // 通过将w加入到v的邻接表中，我们添加了一条自顶 点v到顶点w的边 adjList.get(v).push(w) // 无向图我们需要添加一条自w向v的边 adjList.get(w).push(v) &#125; //实现一下Graph类的toString方法，以便于在控制台输出图 this.toString = function() &#123; var s = '' for (var i = 0; i &lt; vertices.length; i++) &#123; s += vertices[i] + ' -&gt; ' var neighbors = adjList.get(vertices[i]) for (var j = 0; j &lt; neighbors.length; j++) &#123; s += neighbors[j] + ' ' &#125; s += '\\n' &#125; return s &#125; var initializeColor = function() &#123; var color = [] for (var i = 0; i &lt; vertices.length; i++) &#123; color[vertices[i]] = 'white' //1 &#125; return color &#125; // 广度优先搜索 this.bfs = function(v, callback) &#123; var color = initializeColor() //2 var queue = new Queue() //3 queue.enqueue(v) //4 while (!queue.isEmpty()) &#123; //5 var u = queue.dequeue() //6 var neighbors = adjList.get(u) //7 color[u] = 'grey' //8 for (var i = 0; i &lt; neighbors.length; i++) &#123; //9 var w = neighbors[i] //10 if (color[w] === 'white') &#123; //11 color[w] = 'grey' //12 queue.enqueue(w) //13 &#125; &#125; color[u] = 'black' //14 if (callback) &#123; //15 callback(u) &#125; &#125; &#125;&#125;&#125;// 测试这段代码：var graph = new Graph()var myVertices = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']for (var i = 0; i &lt; myVertices.length; i++) &#123; graph.addVertex(myVertices[i])&#125;graph.addEdge('A', 'B')graph.addEdge('A', 'C')graph.addEdge('A', 'D')graph.addEdge('C', 'D')graph.addEdge('C', 'G')graph.addEdge('D', 'G')graph.addEdge('D', 'H')graph.addEdge('B', 'E')graph.addEdge('B', 'F')graph.addEdge('E', 'I')console.log(graph.toString())function printNode(value) &#123; console.log('Visited vertex: ' + value)&#125;//广度优先搜索graph.bfs(myVertices[0], printNode)// 输出结果为:/** A -&gt; B C D B -&gt; A E F C -&gt; A D G D -&gt; A C G H E -&gt; B I F -&gt; B G -&gt; C D H -&gt; D I -&gt; E Visited vertex: A Visited vertex: B Visited vertex: C Visited vertex: D Visited vertex: E Visited vertex: F Visited vertex: G Visited vertex: H Visited vertex: I*/","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"},{"name":"算法","slug":"算法","permalink":"http://lwwtotod.github.io/tags/算法/"}]},{"title":"javascript 实现链表","slug":"JavaScript/javascript实现链表","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T03:35:36.588Z","comments":true,"path":"2018/01/13/JavaScript/javascript实现链表/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/JavaScript/javascript实现链表/","excerpt":"","text":"链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个 元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针或链接）组成。 相对于传统的数组，链表的一个好处在于，添加或移除元素的时候不需要移动其他元素。然 而，链表需要使用指针，因此实现链表时需要额外注意。数组的另一个细节是可以直接访问任何 位置的任何元素，而要想访问链表中间的一个元素，需要从起点（表头）开始迭代列表直到找到 所需的元素。现实中也有一些链表的例子。第一个例子就是康加舞队。每个人是一个元素，手就是链向下 一个人的指针。可以向队列中增加人——只需要找到想加入的点，断开连接，插入一个人，再重 新连接起来。 另一个例子是寻宝游戏。你有一条线索，这条线索是指向寻找下一条线索的地点的指针。你顺着这条链接去下一个地点，得到另一条指向再下一处的线索。得到列表中间的线索的唯一办法， 就是从起点（第一条线索）顺着列表寻找。还有一个可能是用来说明链表的最流行的例子，那就是火车。一列火车是由一系列车厢（也 称车皮）组成的。每节车厢或车皮都相互连接。你很容易分离一节车皮，改变它的位置，添加或 移除它。 创建一个链表123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136function LinkedList() &#123; // 一个辅助类,表示一个节点,包含一个指针,指向下一个节点 var Node = function(element) &#123; this.element = element this.next = null &#125; // 表示列表项的长度 var length = 0 // 第一个节点的引用 var head = null // 向链表尾部添加一个新的项 this.append = function(element) &#123; // 创建一个节点 var node = new Node(element), current //用于暂存当前项 //如果是空链表 那么 直接让head成为一个节点head.next自动变成null if (head === null) &#123; //列表中第一个节点 head = node &#125; else &#123; // 当前的head不为null,说明当前的head有next属性 current = head // 循环链表找到最后一项 while (current.next) &#123; current = current.next &#125; // 当curent.next等于空时说明已经到了最后一项 // 然后把node赋值给最后一项即可 current.next = node &#125; // 更新长度 length++ &#125; // 向链表的特定位置插入一个新的项 this.insert = function(position, element) &#123; //检查越界值 if (position &gt;= 0 &amp;&amp; position &lt;= length) &#123; var node = new Node(element), current = head, previous, index = 0 //在第一个位置添加 //current是对链表中第一个元素的引用 if (position === 0) &#123; // 现在head和node.next都指向了current node.next = current // 把head的引用改为node head = node &#125; else &#123; // 当跳出循环时，current变量将是对想要插入新元素的位置之后一个 元素的引用， // 而previous将是对想要插入新元素的位置之前一个元素的引用。 while (index++ &lt; position) &#123; previous = current current = current.next &#125; // 因此，首先需要把新项（node）和当前项链接起来，然后需要改变previous和current之间的链接。 // 我们还需要让previous.next 指向node。 node.next = current previous.next = node &#125; //更新长度 length++ return true &#125; else &#123; return false &#125; &#125; // 从链表中移除一项 this.remove = function(element) &#123;&#125; // 从链表中的特定位置移除一项 this.removeAt = function(position) &#123; //检查越界值 if (position &gt; -1 &amp;&amp; positon &lt; length) &#123; var current = head, //暂存当前项 previous, //暂存之前项 index = 0 //索引 // 如果移除第一项,直接让head置空即可 if (position === 0) &#123; head = current.next &#125; else &#123; // 迭代链表 while (index++ &lt; position) &#123; // 用previous(上一个)暂存current(当前项),当前项指向下一项 previous = current current = current.next &#125; //将previous(上一个))与current(当前的)的下一项连接起来;跳过current,从而移除它 previous.next = current.next &#125; // 更新长度 length-- return current.element &#125; else &#123; return null &#125; // current变量是对要移除元素的引用。previous变量是对要移除元素的前一个元素的引用。 // 那么要移除current元素，需要做的就是将previous.next与current.next链接起来。 // 因此， 我们的逻辑对这两种情况都管用。 &#125; // 返回元素在链表中的索引 this.indexOf = function(element) &#123; var current = head, index = -1 while (current) &#123; if (element === current.element) &#123; return index &#125; index++ current = current.next &#125; return -1 &#125; // 返回链表是否为空 this.isEmpty = function() &#123; return length === 0 &#125; // 返回链表中的元素个数 this.size = function() &#123; return length &#125; // 输出值 this.toString = function() &#123; var current = head, string = '' while (current) &#123; string = current.element current = current.next &#125; return string &#125; this.getHead = function() &#123; return head &#125; this.print = function() &#123;&#125;&#125; 双向链表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152function DoublyLinkedList() &#123; var Node = function(element) &#123; this.element = element this.next = null this.prev = null &#125; var length = 0 var head = null var tail = null this.insert = function(position, element) &#123; if (position &gt;= 0 &amp;&amp; position &lt;= length) &#123; var node = new Node(element), current = head, previous, index = 0 if (position === 0) &#123; if (!head) &#123; //1 head = node tail = node &#125; else &#123; node.next = current current.prev = node //2 head = node &#125; &#125; else if (position === length) &#123; current = tail //3 current.next = node node.prev = current tail = node &#125; else &#123; while (index++ &lt; position) &#123; //4 previous = current current = current.next &#125; node.next = current //5 previous.next = node current.prev = node node.prev = previous &#125; length++ return true &#125; else &#123; return false &#125; &#125;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"},{"name":"算法","slug":"算法","permalink":"http://lwwtotod.github.io/tags/算法/"}]},{"title":"javascript 实现栈","slug":"JavaScript/javascript实现栈","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T03:35:30.932Z","comments":true,"path":"2018/01/13/JavaScript/javascript实现栈/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/JavaScript/javascript实现栈/","excerpt":"","text":"栈是一种遵从后进先出（LIFO）原则的有序集合。新添加的或待删除的元素都保存在栈的 末尾，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。 在现实生活中也能发现很多栈的例子。例如，下图里的一摞书或者餐厅里堆放的盘子。 我们将创建一个类来表示栈。让我们从基础开始，先声明这个类： 12345678910111213141516171819202122232425262728293031function Stack() &#123; //各种属性和方法的声明 var items = [] //添加一个（或几个）新元素到栈顶 this.push = function(item) &#123; items.push(item) &#125; //移除栈顶的元素，同时返回被移除的元素。 this.pop = function() &#123; return items.pop() &#125; //返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返 回它） this.peek = function() &#123; return items.length - 1 &#125; //如果栈里没有任何元素就返回true，否则返回false。 this.isEmpty = function() &#123; return items == [] &#125; //移除栈里的所有元素 this.clear = function() &#123; items = [] &#125; //返回栈里的元素个数。 this.size = function() &#123; return items.length &#125; this.print = function() &#123; console.log(items.toString()) &#125;&#125; 使用刚刚声明的栈方法实现一个十进制数转二进制数的算法 要把十进制转化成二进制，我们可以将该十进制数字和 2 整除（二进制是满二进一），直到结 果是 0 为止 123456789101112131415161718function divideBy2(decNumber)&#123; var remStack = new Stack(), rem, binaryString =''; while (decNumber &gt;0 )&#123; rem = Math.floor(decNumber % 2); remStack.push(rem); decNumber = Math.floor(decNumber / 2) &#125; while (!remStack.isEmpty())&#123; binaryString += remStack.pop().toString(); &#125; return binaryString&#125; 我们很容易修改之前的算法，使之能把十进制转换成任何进制。除了让十进制数字和 2 整除 转成二进制数，还可以传入其他任意进制的基数为参数，就像下面算法这样： 12345678910111213141516171819function baseConverter(decNumber,base)&#123; var remStack = new Stack(), rem, baseString = '', digits = '0123456789ABCDEF'; while (decNumber &gt;0)&#123; rem = Math.floor(decNumber % base); remStack.push(rem); decNumber = Math.floor(decNumber / base) &#125; while (!remStack.isEmpty())&#123; baseString += digits[remStack.pop()]; &#125; return baseString;&#125; export default { mounted () { function Stack() { //各种属性和方法的声明 var items = [] //添加一个（或几个）新元素到栈顶 this.push = function(item) { items.push(item) } //移除栈顶的元素，同时返回被移除的元素。 this.pop = function() { return items.pop() } //返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返 回它） this.peek = function() { return items.length - 1 } //如果栈里没有任何元素就返回true，否则返回false。 this.isEmpty = function() { return items == [] } //移除栈里的所有元素 this.clear = function() { items = [] } //返回栈里的元素个数。 this.size = function() { return items.length } this.print = function() { console.log(items.toString()) } } function baseConverter(decNumber,base){ var remStack = new Stack(), rem, baseString = '', digits = '0123456789ABCDEF'; while (decNumber >0){ rem = Math.floor(decNumber % base); remStack.push(rem); decNumber = Math.floor(decNumber / base) } while (!remStack.isEmpty()){ baseString += digits[remStack.pop()]; } return baseString; } // console.log(baseConverter(1345, 2)) // console.log(baseConverter(100345, 8)) // console.log(baseConverter(100345, 16)) } }","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"},{"name":"算法","slug":"算法","permalink":"http://lwwtotod.github.io/tags/算法/"}]},{"title":"组件皮肤样式篇","slug":"Element/组件皮肤样式篇","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T03:36:12.346Z","comments":true,"path":"2018/01/13/Element/组件皮肤样式篇/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/Element/组件皮肤样式篇/","excerpt":"","text":"","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"},{"name":"ElementUI","slug":"ElementUI","permalink":"http://lwwtotod.github.io/tags/ElementUI/"}]},{"title":"JavaScript 实现简单二叉查找树","slug":"JavaScript/javascript实现简单二叉查找树","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T03:35:34.196Z","comments":true,"path":"2018/01/13/JavaScript/javascript实现简单二叉查找树/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/JavaScript/javascript实现简单二叉查找树/","excerpt":"","text":"二叉树 二叉树：二叉树就是一种数据结构， 它的组织关系就像是自然界中的树一样。官方语言的定义是：是一个有限元素的集合,该集合或者为空、或者由一个称为根的元素及两个不相交的、被分别称为左子树和右子树的二叉树组成。 节点： 树中的每个元素称为一个节点， 根节点： 位于整棵树顶点的节点，它没有父节点。 子节点： 其他节点的后代 叶子节点: 没有子节点的元素称为叶子节点。 二叉树创建代码的实现 创建二叉树 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// 声明根节点var root = null// 声明函数function BinarSearchTree() &#123; var Node = function(key) &#123; this.key = key this.left = null this.right = null &#125; // 这个方法会通过递归得调用自身，来找到新添加节点的合适位置 var insertNode = function(node, newNode) &#123; // 判断插入左节点还是右节点,然后递归调用 if (newNode.key &lt;= node.key) &#123; if (node.left === null) &#123; node.left = newNode &#125; else &#123; insertNode(node.left, newNode) &#125; &#125; else &#123; if (node.right === null) &#123; node.right = newNode &#125; else &#123; insertNode(node.right, newNode) &#125; &#125; // 判断创建根节点还是插入子节点 this.insert = function(key) &#123; // 创建一个用来表示新节点的Node类实例，因此需要new一下Node类并传入需要插入的key值，它会自动初始化为左右节点为null的一个新节点 var newNode = new Node(key) // 先判断树是否为空，若为空，新插入的节点就作为根节点，如不为空，调用一个辅助方法insertNode()方法，将根节点和新节点传入 if (root === null) &#123; root = newNode &#125; else &#123; insertNode(root, newNode) &#125; &#125; &#125;&#125;//定义要插入的二叉树var nodes = [7, 3, 6, 2, 8, 13, 5, 15]// 实例化二叉树函数var _binarSearchTree = new BinarSearchTree()// 遍历数组插入节点nodes.forEach(key =&gt; &#123; _binarSearchTree.insert(key)&#125;)//查看二叉树输出结果】console.log(root) 二叉树的中序遍历中序遍历（LDR）是二叉树遍历的一种，也叫做中根遍历、中序周游。在二叉树中，先左后根再右。巧记：左根右。 中序便历可用于排序。 以下代码先查找最左叶子节点然后打印出来，如果没有最左叶子节点则打印根节点，最后打印右子节点。 中序遍历 1234567891011121314151617 var inOrderTraverseNode = function (node) &#123; // 判断当前节点如果不为空则递归查找节点，按照左根右的顺序 if (node !== null) &#123; // 先查找左叶子节点，如果左叶子节点有值则递归此节点 inOrderTraverseNode(node.left) // 如果没有左叶子节点则打印当前根节点 console.log(node.key) // 最后查找右子节点 inOrderTraverseNode(node.right) &#125; &#125; //中序遍历 this.inOrderTraverse = function () &#123; // 将二叉树根节点传入 inOrderTraverseNode(root) &#125;&#125; 二叉树的先序遍历先序遍历(Pre-order)，按照根左右的顺序沿一定路径经过路径上所有的结点。在二叉树中，先根后左再右。巧记：根左右。 先序遍历常用于复制二叉树。 先序遍历与中序遍历代码很像，只不过先查找根节点打印出来，然后在查找最左叶子节点然后打印出来，最后打印右子节点。 先序遍历 1234567891011var preOrderTraverseNode = function(node) &#123; if (node !== null) &#123; // 先打印当前节点然后在查找左右子节点 console.log(node.key) preOrderTraverseNode(node.left) preOrderTraverseNode(node.right) &#125;&#125;this.preOrderTraverse = function() &#123; preOrderTraverseNode(root)&#125; 二叉树的后序遍历后序遍历（LRD）是二叉树遍历的一种，也叫做后根遍历、后序周游，可记做左右根。后序遍历有递归算法和非递归算法两种。在二叉树中，先左后右再根。巧记：左右根。 后序遍历实际应用于操作系统的文件系统遍历中。 后序遍历与上面两个遍历一样，这回变为左右根的顺序。 后序遍历 1234567891011this.postOrderTraverse = function() &#123; postOrderTraverseNode(root)&#125;var postOrderTraverseNode = function(node) &#123; if (node !== null) &#123; postOrderTraverseNode(node.left) postOrderTraverseNode(node.right) // 如果没有左右子节点最后打印根节点 console.log(node.key) &#125;&#125; 二叉树查找最大值与最小值二叉树的最左子节点为最小，最右节点为最大，按照这个规律我们只需要递归查找最左与最右子节点就可以查到最大与最下值。 查找最小节点 12345678910111213var minNode = function(node) &#123; if (node) &#123; // 如果当前节点不为空并且含有左子节点 while (node &amp;&amp; node.left !== null) &#123; node = node.left &#125; return node.key &#125;&#125;// 查找最小节点this.min = function() &#123; return minNode(root)&#125; 查找最大节点 12345678910111213var maxNode = function(node) &#123; if (node) &#123; // 如果当前节点不为空并且含有右子节点 while (node &amp;&amp; node.right !== null) &#123; node = node.right &#125; return node.key &#125;&#125;// 查找最大节点this.max = function() &#123; return maxNode(root)&#125; 二叉树查找指定值实现查找二叉树特定值这个方法首先检验 node 的合法性，如果为 null，直接退出，并返回 fasle。如果传入的 key 比当前传入 node 的 key 值小，它会继续递归查找 node 的左侧节点，反之，查找右侧节点。如果找到相等节点，直接退出，并返回 true。 查找指定值 1234567891011121314151617181920var searchNode = function(node, key) &#123; // 如果节点为空则返回 if (node === null) &#123; return false &#125; if (key &lt; node.key) &#123; // 如果查找值小于当前节点值则查找左子节点 return searchNode(node.left, key) &#125; else if (key &gt; node.key) &#123; // 如果查找值大于当前节点值则查找右子节点 return searchNode(node.right, key) &#125; else &#123; return true &#125;&#125;// 查找指定节点this.search = function(key) &#123; return searchNode(root, key)&#125; 移除节点移除节点的实现情况比较复杂，它会有三种不同的情况： 需要移除的节点是一个叶子节点 需要移除的节点包含一个子节点 需要移除的节点包含两个子节点 和实现搜索指定节点一元，要移除某个节点，必须先找到它所在的位置，因此移除方法的实现中部分代码和上面相同，其中，移除包含两个子节点的节点是最复杂的情况，它包含左侧节点和右侧节点，对它进行移除主要需要三个步骤： 需要找到它右侧子树中的最小节点来代替它的位置 将它右侧子树中的最小节点移除 将更新后的节点的引用指向原节点的父节点 有点绕，但必须这样，因为删除元素后的二叉搜索树必须保持它的排序性质。 移除节点 12345678910111213141516171819202122232425262728293031323334353637383940414243444546var removeNode = function(node, key) &#123; if (node == null) &#123; return null &#125; if (key &lt; node.key) &#123; node.left = removeNode(node.left, key) return node &#125; else if (key &gt; node.key) &#123; node.right = removeNode(node.right, key) return node &#125; else &#123; // 需要移除的是一个叶子节点 if (node.left === null &amp;&amp; node.right === null) &#123; node = null return node &#125; //需要移除的节点包含一个叶子节点 if (node.left === null) &#123; node = node.right return node &#125; else if (node.left === null) &#123; node = node.left return node &#125; //需要移除的节点包含两个子节点 var aux = findMinNode(node.right) node.key = aux.key node.right = removeNode(node.right, axu.key) return node &#125;&#125;var findMinNode = function(node) &#123; if (node) &#123; while (node &amp;&amp; node.left !== null) &#123; node = node.left &#125; return node &#125; return null&#125;//移除节点this.remove = function(key) &#123; removeNode(root, key)&#125; 完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193// 声明根节点var root = null// 声明函数function BinarSearchTree() &#123; var Node = function(key) &#123; this.key = key this.left = null this.right = null &#125; // 判断创建根节点还是插入子节点 this.insert = function(key) &#123; var newNode = new Node(key) if (root === null) &#123; root = newNode &#125; else &#123; insertNode(root, newNode) &#125; &#125; // 判断插入左节点还是右节点 var insertNode = function(node, newNode) &#123; if (newNode.key &lt;= node.key) &#123; if (node.left === null) &#123; node.left = newNode &#125; else &#123; insertNode(node.left, newNode) &#125; &#125; else &#123; if (node.right === null) &#123; node.right = newNode &#125; else &#123; insertNode(node.right, newNode) &#125; &#125; &#125; var inOrderTraverseNode = function(node) &#123; // 判断当前节点如果不为空则递归查找节点，按照左根右的顺序 if (node !== null) &#123; // 先查找左叶子节点，如果左叶子节点有值则递归此节点 inOrderTraverseNode(node.left) // 如果没有左叶子节点则打印当前根节点 console.log(node.key) // 最后查找右子节点 inOrderTraverseNode(node.right) &#125; &#125; //中序遍历 this.inOrderTraverse = function() &#123; // 将二叉树根节点传入 inOrderTraverseNode(root) &#125; var preOrderTraverseNode = function(node) &#123; if (node !== null) &#123; console.log(node.key) preOrderTraverseNode(node.left) preOrderTraverseNode(node.right) &#125; &#125; // 先序遍历 this.preOrderTraverse = function() &#123; preOrderTraverseNode(root) &#125; var postOrderTraverseNode = function(node) &#123; if (node !== null) &#123; postOrderTraverseNode(node.left) postOrderTraverseNode(node.right) // 如果没有左右子节点最后打印根节点 console.log(node.key) &#125; &#125; // 后序遍历 this.postOrderTraverse = function() &#123; postOrderTraverseNode(root) &#125; var minNode = function(node) &#123; if (node) &#123; // 如果当前节点不为空并且含有左子节点 while (node &amp;&amp; node.left !== null) &#123; node = node.left &#125; return node.key &#125; &#125; // 查找最小节点 this.min = function() &#123; return minNode(root) &#125; var maxNode = function(node) &#123; if (node) &#123; // 如果当前节点不为空并且含有右子节点 while (node &amp;&amp; node.right !== null) &#123; node = node.right &#125; return node.key &#125; &#125; //查找最大节点 this.max = function() &#123; return maxNode(root) &#125; var searchNode = function(node, key) &#123; // 如果节点为空则返回 if (node === null) &#123; return false &#125; if (key &lt; node.key) &#123; // 如果查找值小于当前节点值则查找左子节点 return searchNode(node.left, key) &#125; else if (key &gt; node.key) &#123; // 如果查找值大于当前节点值则查找右子节点 return searchNode(node.right, key) &#125; else &#123; return true &#125; &#125; // 查找指定节点 this.search = function(key) &#123; return searchNode(root, key) &#125; var removeNode = function(node, key) &#123; if (node == null) &#123; return null &#125; if (key &lt; node.key) &#123; node.left = removeNode(node.left, key) return node &#125; else if (key &gt; node.key) &#123; node.right = removeNode(node.right, key) return node &#125; else &#123; // 需要移除的是一个叶子节点 if (node.left === null &amp;&amp; node.right === null) &#123; node = null return node &#125; //需要移除的节点包含一个叶子节点 if (node.left === null) &#123; node = node.right return node &#125; else if (node.left === null) &#123; node = node.left return node &#125; //需要移除的节点包含两个子节点 var aux = findMinNode(node.right) node.key = aux.key node.right = removeNode(node.right, axu.key) return node &#125; &#125; var findMinNode = function(node) &#123; if (node) &#123; while (node &amp;&amp; node.left !== null) &#123; node = node.left &#125; return node &#125; return null &#125; //移除节点 this.remove = function(key) &#123; removeNode(root, key) &#125;&#125;var nodes = [7, 3, 6, 2, 8, 13, 5, 15]var _binarSearchTree = new BinarSearchTree()nodes.forEach(key =&gt; &#123; _binarSearchTree.insert(key)&#125;)// 打印插入完的二叉树console.log(root)// 调用中序遍历方法_binarSearchTree.inOrderTraverse()// 调用先序遍历方法_binarSearchTree.preOrderTraverse()// 调用后序遍历方法_binarSearchTree.postOrderTraverse()// 查找最小值console.log(_binarSearchTree.min())// 查找最大值console.log(_binarSearchTree.max())// 查找特定值console.log(_binarSearchTree.search(2))// 删除节点_binarSearchTree.remove(8)_binarSearchTree.inOrderTraverse() export default { mounted(){ // 声明根节点 var root = null; // 声明函数 function BinarSearchTree() { var Node = function (key) { this.key = key; this.left = null; this.right = null; }; // 判断创建根节点还是插入子节点 this.insert = function (key) { var newNode = new Node(key) if (root === null) { root = newNode } else { insertNode(root, newNode) } } // 判断插入左节点还是右节点 var insertNode = function (node, newNode) { if (newNode.key node.key) { // 如果查找值大于当前节点值则查找右子节点 return searchNode(node.right, key) } else { return true } } // 查找指定节点 this.search = function (key) { return searchNode(root, key) } var removeNode = function (node, key) { if (node == null) { return null } if (key < node.key) { node.left = removeNode(node.left, key) return node } else if (key > node.key) { node.right = removeNode(node.right, key) return node } else { // 需要移除的是一个叶子节点 if (node.left === null && node.right === null) { node = null return node } //需要移除的节点包含一个叶子节点 if (node.left === null) { node = node.right return node } else if (node.left === null) { node = node.left return node } //需要移除的节点包含两个子节点 var aux = findMinNode(node.right) node.key = aux.key node.right = removeNode(node.right, axu.key) return node } } var findMinNode = function (node) { if (node) { while (node && node.left !== null) { node = node.left } return node } return null } //移除节点 this.remove = function (key) { removeNode(root, key) } } var nodes = [7, 3, 6, 2, 8, 13, 5, 15]; var _binarSearchTree = new BinarSearchTree(); nodes.forEach(key => { _binarSearchTree.insert(key) }) // 打印插入完的二叉树 console.log(root) // 调用中序遍历方法 _binarSearchTree.inOrderTraverse() // 调用先序遍历方法 _binarSearchTree.preOrderTraverse() // 调用后序遍历方法 _binarSearchTree.postOrderTraverse() // 查找最小值 console.log(_binarSearchTree.min()) // 查找最大值 console.log(_binarSearchTree.max()) // 查找特定值 console.log(_binarSearchTree.search(2)); // 删除节点 _binarSearchTree.remove(8) _binarSearchTree.inOrderTraverse() } }","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"},{"name":"算法","slug":"算法","permalink":"http://lwwtotod.github.io/tags/算法/"}]},{"title":"面试题","slug":"InterView/常见面试题","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T03:35:51.327Z","comments":true,"path":"2018/01/13/InterView/常见面试题/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/InterView/常见面试题/","excerpt":"","text":"面试题HTML的 title 和 alt 有什么区别？alt 主要是无法加载显示图片时，代替文字，搜索引擎时主要是 alt，alt 只适用于图片 img。 鼠标悬浮文字上显示文字的诗 title 属性，title 适用于很多标签。 什么是 web 语义化？html5 有哪些语义化标签？语义化有什么好处？W3C 组织意识到了之前 HTML 版本的不足，推出的 HTML5 进一步推进了 Web 语义化发展，采用了诸如 footer、section 等语义化标签，弥补了采用 id=”footer”或者 class=”footer”形式的不足，以更好的推动 Web 的发展。 1234567891011&lt;nav&gt; 、 &lt;article&gt; 、&lt;sections &gt;、 &lt;aside&gt; 、 &lt;footer&gt;&lt;/footer&gt;&lt;/aside &gt;&lt;/sections&gt; &lt;/article&gt;&lt;/nav&gt; CSSdisplay: none;与 visibility: hidden;的区别？是否是继承属性：display 不是继承属性，而 visibility 是继承属性。 如何分别水平、垂直居中一个元素？ 行内水平居中 123#container &#123; text-align: center;&#125; 块状水平居中 123#center &#123; margin: 0 auto;&#125; 多个块状元素的水平居中 1234567891011#container &#123; text-align: center;&#125;#center &#123; display: inline-block;&#125;&lt;!-- flex -- &gt; #container &#123; justify-content: center; display: flex;&#125; 已知高度宽度元素的水平垂直居中 123456789101112131415161718192021222324&lt;!-- 1 -- &gt; #container &#123; position: relative;&#125;#center &#123; width: 100px; height: 100px; position: absolute; top: 50%; left: 50%; margin: -50px 0 0 -50px;&#125;&lt;!-- 2 -- &gt; #container &#123; position: relative;&#125;#center &#123; position: absolute; margin: auto; top: 0; bottom: 0; left: 0; right: 0;&#125; 未知高度和宽度元素的水平垂直居中 1234567891011121314151617181920212223242526&lt;!-- base -- &gt; #container &#123; display: table-cell; text-align: center; vertical-align: middle;&#125;#center &#123;&#125;&lt;!-- css3 -- &gt; #container &#123; position: relative;&#125;#center &#123; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);&#125;&lt;!-- flex -- &gt; #container &#123; display: flex; justify-content: center; align-items: center;&#125;#center &#123;&#125; JS如何实现一个 JS 对象的深度克隆？先来说一下什么是深度克隆：深拷贝是指源对象与拷贝对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。 举个例子，一个人名叫张三，后来用他克隆（假设法律允许）了另外一个人，叫李四，不管是张三缺胳膊少腿还是李四缺胳膊少腿都不会影响另外一个人。 在 JavaScript 中，对于 Object 和 Array 这类引用类型值，当从一个变量向另一个变量复制引用类型值时，这个值的副本其实是一个指针，两个变量指向同一个堆对象，改变其中一个变量，另一个也会受到影响。 123456789101112131415// 对象var o1 = &#123; a: 1 &#125;var o2 = o1console.log(o1 === o2) // =&gt;trueo2.a = 2console.log(o1.a) // =&gt; 2// 数组var o1 = [1, 2, 3]var o2 = o1console.log(o1 === o2) // =&gt; trueo2.push(4)console.log(o1) // =&gt; [1,2,3,4] 这种拷贝分为两种情况：拷贝引用和拷贝实例，也就是我们说的浅拷贝和深拷贝 浅拷贝（shallow copy）代码实现： 123456789101112function shallowClone(source) &#123; if (!source || typeof source !== 'object') &#123; throw new Error('error arguments') &#125; var targetObj = source.constructor === Array ? [] : &#123;&#125; for (var keys in source) &#123; if (source.hasOwnProperty(keys)) &#123; targetObj[keys] = source[keys] &#125; &#125; return targetObj&#125; 深拷贝（deep copy）深拷贝也就是拷贝出一个新的实例，新的实例和之前的实例互不影响，深拷贝的实现有几种方法，首先我们可以借助 jQuery，lodash 等第三方库完成一个深拷贝实例。在 jQuery 中可以通过添加一个参数来实现递归 extend，调用$.extend(true, {}, …)就可以实现一个深拷贝。 深拷贝（deep copy）代码实现： 12345678910111213141516171819202122232425262728293031323334353637// 递归实现一个深拷贝function deepClone(source) &#123; //判断传入的参数是否是对象 if (!source || typeof source !== 'object') &#123; throw new Error('error arguments', 'shallowClone') &#125; // 判断要深拷贝的是数组还是对象 var targetObj = source.constructor === Array ? [] : &#123;&#125; // 遍历复制对象 for (var keys in source) &#123; if (source.hasOwnProperty(keys)) &#123; // 判断如果为对象的key还是对象的话就递归调用 if (source[keys] &amp;&amp; typeof source[keys] === 'object') &#123; targetObj[keys] = source[keys].constructor === Array ? [] : &#123;&#125; targetObj[keys] = deepClone(source[keys]) &#125; else &#123; targetObj[keys] = source[keys] &#125; &#125; &#125; // 返回克隆完的对象 return targetObj&#125;// test examplevar o1 = &#123; arr: [1, 2, 3], obj: &#123; key: 'value' &#125;, func: function() &#123; return 1 &#125;&#125;var o3 = deepClone(o1)console.log(o3 === o1) // =&gt; falseconsole.log(o3.obj === o1.obj) // =&gt; falseconsole.log(o2.func === o1.func) // =&gt; true 参考详情 事件冒泡IE 与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？ 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为 事件处理机制：IE 是事件冒泡、firefox 同时支持两种事件模型，也就是：捕获型事件和冒泡型事件 ev.stopPropagation(); 注意旧 ie 的方法：ev.cancelBubble = true; 在浏览器地址栏中输入一个 URL 后回车，背后会进行哪些技术步骤？ 参考详情 编程实现获取 URL 中的参数： 指定参数名称，返回该参数的值或者空字符串; 不指定参数名称，返回全部的参数对象或者{}; 如果存在多个同名参数，则返回数组; 123456789101112131415161718192021222324252627282930313233343536373839404142434445/** * @param &#123;string&#125; Url * @param &#123;string&#125; Key * @return &#123;Object&#125; */function getUrlParam(Url, Key) &#123; var param = Url.split('#')[0].split('?')[1] if (Key) &#123; //指定参数名称 var strs = param.split('&amp;') var arrs = new Array() //如果存在多个同名参数，则返回数组 for (var i = 0, len = strs.length; i &lt; len; i++) &#123; var tmp = strs[i].split('=') if (tmp[0] == Key) &#123; arrs.push(tmp[1]) &#125; &#125; if (arrs.length == 1) &#123; //返回该参数的值或者空字符串 return arrs[0] &#125; else if (arrs.length == 0) &#123; return '' &#125; else &#123; return arrs &#125; &#125; else &#123; //不指定参数名称，返回全部的参数对象 或者 &#123;&#125; if (param == undefined || param == '') &#123; return &#123;&#125; &#125; else &#123; var strs = param.split('&amp;') var arrObj = new Object() for (var i = 0, len = strs.length; i &lt; len; i++) &#123; var tmp = strs[i].split('=') if (!(tmp[0] in arrObj)) &#123; arrObj[tmp[0]] = [] &#125; arrObj[tmp[0]].push(tmp[1]) &#125; return arrObj &#125; &#125;&#125;// testUrl//http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;test=4#hehe 输入习题以下程序输出结果是？1234567function fn(a) &#123; console.log(a) var a = 2 function a() &#123;&#125; console.log(a)&#125;fn(1) 以下程序输出结果是？123456var a = 10a.pro = 10console.log(a.pro + a)var s = 'hello's.pro = 'world'console.log(s.pro + s) 写出输出结果1234console.log(typeof null)console.log(typeof &#123;&#125;)console.log(typeof [])console.log(typeof undefined) 写出输出结果？1234567891011function printing() &#123; console.log(1) setTimeout(function() &#123; console.log(2) &#125;, 1000) setTimeout(function() &#123; console.log(3) &#125;, 0) console.log(4)&#125;printing() 如何判断一个对象是否为函数？123function isFunction(fn) &#123; return Object.prototype.toString.call(fn) === '[object Function]'&#125; 写出几种 js 跳转的常见方式？1234567891011121314151617181920212223242526272829303132&lt;!-- 第一种：直接跳转加参数 --&gt;&lt;script language=\"javascript\" type=\"text/javascript\"&gt; window.location.href=\"login.jsp?backurl=\"+window.location.href;&lt;/script&gt;&lt;!-- 直接跳转无参数： --&gt;&lt;script&gt;window.location.href='http://www.baidu.com';&lt;/script&gt;&lt;!-- 第二种：返回上一次预览界面 --&gt;&lt;script language=\"javascript\"&gt;alert(\"返回\");window.history.back(-1);&lt;/script&gt;&lt;!-- 标签嵌套： --&gt;&lt;a href=\"javascript:history.go(-1)\"&gt;返回上一步&lt;/a&gt;&lt;a href=\"&lt;%=Request.ServerVariables(\"HTTP_REFERER\")%&gt;\"&gt;返回上一步&lt;/a&gt;&lt;!-- 第三种：指定跳转页面 对框架无效。。。 --&gt;&lt;script language=\"javascript\"&gt; window.navigate(\"top.jsp\");&lt;/script&gt;&lt;!-- 第四种：指定自身跳转页面 对框架无效。。 --&gt;&lt;script language=\"JavaScript\"&gt; self.location='top.htm';&lt;/script&gt;&lt;!-- 第五种：指定自身跳转页面 对框架有效。。 --&gt;&lt;script language=\"javascript\"&gt; alert(\"非法访问！\"); top.location='xx.aspx';&lt;/script&gt;&lt;!-- 第六种：按钮式 在button按钮添加 事件跳转。 --&gt;&lt;input name=\"pclog\" type=\"button\" value=\"GO\" onClick=\"location.href='login.aspx'\"&gt;&lt;!-- 第七种：在新窗口打开： --&gt;&lt;a href=\"javascript:\" onClick=\"window.open('login.aspx','','height=500,width=611,scrollbars=yes,status=yes')\"&gt;开新窗口&lt;/a&gt; 写出客户端存储 localStorage 和 sessionStorage 的 set、get 方法，localStorage 和 sessionStorage 有何区别？ 参考详情 通过 JS 获取页面尺寸、屏幕的方法？1234567891011121314网页可见区域宽：document.body.clientWidth网页可见区域高：document.body.clientHeight网页可见区域宽：document.body.offsetWidth (包括边线的宽)网页可见区域高：document.body.offsetHeight (包括边线的宽)网页正文全文宽：document.body.scrollWidth网页正文全文高：document.body.scrollHeight网页被卷去的高：document.body.scrollTop网页被卷去的左：document.body.scrollLeft网页正文部分上：window.screenTop网页正文部分左：window.screenLeft屏幕分辨率的高：window.screen.height屏幕分辨率的宽：window.screen.width屏幕可用工作区高度：window.screen.availHeight屏幕可用工作区宽度：window.screen.availWidth 列举 JS 实现跨域的几种方式？ 参考详情 列举几种立即执行函数的实现方式。 参考详情 var numberArray = [3, 6, 2, 4, 1, 5]; 实现对该数组的倒排，输出[5, 1, 4, 2, 6, 3] 实现对该数组的的将序排列，输出[6, 5, 4, 3, 2, 1]; 编写一个方法，去掉一个数组的重复元素123456789function unique(arr) &#123; var newArr = [] for (var i = 0, item; (item = arr[i++]); ) &#123; if (newArr.indexOf(item) === -1) &#123; newArr.push(item) &#125; &#125; return newArr&#125; 写一个简单的 ajax 示例 参考详情 JavaScript 有哪些方法定义对象？ 参考详情 HTTPHTTP request 报文结构是怎样的？ 请求行: {请求方法} {资源路径} {协议版本} 请求头: 紧跟请求行的下一行，所有的请求头，除 Host 外都是可选的。 空行: 告诉服务器请求头部到此为止。 消息体: 消息的主体部分，消息体的数据格式通过 header 里面的 Content-Type 属性指定。 描述常见的 HTTP 状态码和 HTTP 方法 200 - 请求成功 301 - 资源（网页等）被永久转移到其它 URL 404 - 请求的资源（网页等）不存在 500 - 内部服务器错误 参考详情 根据 HTTP 标准，HTTP 请求可以使用多种请求方法。 HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD 方法。 HTTP1.1 新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。 序号 方法 描述 1 GET 请求指定的页面信息，并返回实体主体。 2 HEAD 类似于 get 请求，只不过返回的响应中没有具体的内容，用于获取报头 3 POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。 4 PUT 从客户端向服务器传送的数据取代指定的文档的内容。 5 DELETE 请求服务器删除指定的页面。 6 CONNECT HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。 7 OPTIONS 允许客户端查看服务器的性能。 8 TRACE 回显服务器收到的请求，主要用于测试或诊断。 参考详情 HTTP 状态码及其含义？ 参考链接 Vue请简单描述 Vue 双向绑定底层实现原理，常用到的指令及 Vue 实例的生命周期 参考详情 算法题给出两个单词 word1 和 word2，找出将 word1 转换成 word2 所使用的最少的步骤数（每个操作记为一步）。你可以对一个单词进行以下三种操作 插入一个字符; 删除一个字符; 替换一个字符; 123456789101112131415161718192021222324252627282930313233343536/** * @param &#123;string&#125; word1 * @param &#123;string&#125; word2 * @return &#123;number&#125; */var minDistance = function(word1, word2) &#123; var len1 = word1.length, len2 = word2.length, matrix = [], i, j if (len1 === 0 || len2 === 0) &#123; return Math.max(len1, len2) &#125; //initialization for (i = 0; i &lt;= len1; i++) &#123; matrix[i] = [] matrix[i][0] = i &#125; for (j = 0; j &lt;= len2; j++) &#123; matrix[0][j] = j &#125; for (i = 1; i &lt;= len1; i++) &#123; for (j = 1; j &lt;= len2; j++) &#123; if (word1.charAt(i - 1) === word2.charAt(j - 1)) &#123; matrix[i][j] = matrix[i - 1][j - 1] &#125; else &#123; matrix[i][j] = Math.min(matrix[i - 1][j], matrix[i][j - 1], matrix[i - 1][j - 1]) + 1 &#125; &#125; &#125; return matrix[len1][len2]&#125; 性能优化如何进行网站性能优化，请简述。 代码层面：避免使用 css 表达式，避免使用高级选择器，通配选择器。 缓存利用：缓存 Ajax，使用 CDN，使用外部 js 和 css 文件以便缓存，添加 Expires 头，服务端配置 Etag，减少 DNS 查找等 请求数量：合并样式和脚本，使用 css 图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载。 请求带宽：压缩文件，开启 GZIP，代码层面的优化 用 hash-table 来优化查找 少用全局变量 用 innerHTML 代替 DOM 操作，减少 DOM 操作次数，优化 javascript 性能 用 setTimeout 来避免页面失去响应 缓存 DOM 节点查找的结果 避免使用 CSS Expression 避免全局查询 避免使用 with(with 会创建自己的作用域，会增加作用域链长度) 多个变量声明合并 避免图片和 iFrame 等的空 Src。空 Src 会重新加载当前页面，影响速度和效率 尽量避免写在 HTML 标签中写 Style 属性 移动端性能优化 尽量使用 css3 动画，开启硬件加速。 适当使用 touch 事件代替 click 事件。 避免使用 css3 渐变阴影效果。 可以用 transform: translateZ(0) 来开启硬件加速。（见下面的详细解释） 不滥用 Float。Float 在渲染时计算量比较大，尽量减少使用 不滥用 Web 字体。Web 字体需要下载，解析，重绘当前页面，尽量减少使用。 合理使用 requestAnimationFrame 动画代替 setTimeout CSS 中的属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）会触发 GPU 渲染，请合理使用。过渡使用会引发手机过耗电增加 PC 端的在移动端同样适用","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"},{"name":"面试题","slug":"面试题","permalink":"http://lwwtotod.github.io/tags/面试题/"}]},{"title":"常用命令","slug":"Git/常用命令","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T03:35:58.292Z","comments":true,"path":"2018/01/13/Git/常用命令/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/Git/常用命令/","excerpt":"","text":"Git 配置用户信息与 SSH 密钥安装完 Git 第一件事要配置自己的信息12$ git config --global user.name &quot;John Doe&quot;$ git config --global user.email &quot;johndoe@example.com&quot; 连接远程仓库要配置自己的 ssh 秘钥默认情况下，用户的 SSH 私钥存储在其 ~/.ssh 目录下。 进入该目录并列出其中内容，你便可以快速确认自己是否已拥有私钥： 123456$ cd ~/.ssh$ lsauthorized_keys2 id_dsa known_hostsconfig id_dsa.pubcat id_dsa.pub 如果没有 SSH 私钥则需要创建一个私钥来放到 Github 上面使用12345678910$ ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/home/schacon/.ssh/id_rsa):Created directory &apos;/home/schacon/.ssh&apos;.Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /home/schacon/.ssh/id_rsa.Your public key has been saved in /home/schacon/.ssh/id_rsa.pub.The key fingerprint is:d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local","categories":[{"name":"git","slug":"git","permalink":"http://lwwtotod.github.io/categories/git/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"},{"name":"git","slug":"git","permalink":"http://lwwtotod.github.io/tags/git/"}]},{"title":"javascript 实现图","slug":"Nodejs/Sequelize的配置","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T03:36:39.606Z","comments":true,"path":"2018/01/13/Nodejs/Sequelize的配置/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/Nodejs/Sequelize的配置/","excerpt":"","text":"Nodejs ORM Sequelize 的基础配置ORM Object-Relational Mapping，把关系数据库的表结构映射到对象上。 使用 npm 安装 Sequelize 与 mysql mysql 是驱动我们不使用但是 Sequelize 会使用","categories":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://lwwtotod.github.io/categories/Nodejs/"}],"tags":[{"name":"Koa","slug":"Koa","permalink":"http://lwwtotod.github.io/tags/Koa/"},{"name":"Sequelize","slug":"Sequelize","permalink":"http://lwwtotod.github.io/tags/Sequelize/"}]},{"title":"vscode配置","slug":"Vscode/配置","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T03:37:00.457Z","comments":true,"path":"2018/01/13/Vscode/配置/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/Vscode/配置/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344&#123; \"editor.fontFamily\": \"Consolas, 'Courier New', monospace\", \"editor.tabSize\": 2, \"editor.fontSize\": 14, \"workbench.iconTheme\": \"vscode-icons\", \"workbench.colorTheme\": \"One Dark Pro\", \"window.zoomLevel\": 0, \"extensions.ignoreRecommendations\": true, \"emmet.syntaxProfiles\": &#123; \"vue-html\": \"html\", \"vue\": \"html\" &#125;, \"eslint.options\": &#123; \"plugins\": [\"html\"] &#125;, \"eslint.validate\": [ \"javascript\", \"javascriptreact\", \"html\", \"vue\", &#123; \"language\": \"html\", \"autoFix\": true &#125;, &#123; \"language\": \"vue\", \"autoFix\": true &#125; ], \"prettier.singleQuote\": true, \"prettier.semi\": false, \"prettier.eslintIntegration\": true, \"vetur.validation.template\": false, // 使用 js-beautify-html 插件格式化 html \"vetur.format.defaultFormatter.html\": \"js-beautify-html\", // 格式化插件的配置 \"vetur.format.defaultFormatterOptions\": &#123; \"js-beautify-html\": &#123; // 属性强制折行对齐 \"wrap_attributes\": \"force-aligned\" &#125; &#125;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"},{"name":"vscode","slug":"vscode","permalink":"http://lwwtotod.github.io/tags/vscode/"}]},{"title":"Axios 基础配置","slug":"Vue/Axios基础配置","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T03:37:22.027Z","comments":true,"path":"2018/01/13/Vue/Axios基础配置/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/Vue/Axios基础配置/","excerpt":"","text":"Axios 基础配置全局的 axios 默认值引入 axios 后 axios.defaults.baseURL = &apos;https://api.example.com&apos;; axios.defaults.headers.common[&apos;Authorization&apos;] = AUTH_TOKEN; axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;;自定义实例默认值// 创建实例时设置配置的默认值 var instance = axios.create({ baseURL: &apos;https://api.example.com&apos; }); // 在实例已创建后修改默认值 instance.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/json&apos; instance.defaults.headers.common[&apos;Authorization&apos;] = AUTH_TOKEN;","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://lwwtotod.github.io/tags/Vue/"},{"name":"Axios","slug":"Axios","permalink":"http://lwwtotod.github.io/tags/Axios/"}]},{"title":"hexo 2","slug":"Hexo/2","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T02:22:10.265Z","comments":true,"path":"2018/01/13/Hexo/2/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/Hexo/2/","excerpt":"","text":"","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript hexo","slug":"JavaScript-hexo","permalink":"http://lwwtotod.github.io/tags/JavaScript-hexo/"}]},{"title":"使用 mpvue 开发微信小程序","slug":"WeChat/使用mpvue开发微信小程序","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T02:23:58.074Z","comments":true,"path":"2018/01/13/WeChat/使用mpvue开发微信小程序/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/WeChat/使用mpvue开发微信小程序/","excerpt":"","text":"使用 mpvue 开发微信小程序","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"}]},{"title":"微信小程序中的 canvas","slug":"WeChat/小程序Canvas","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T02:24:02.461Z","comments":true,"path":"2018/01/13/WeChat/小程序Canvas/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/WeChat/小程序Canvas/","excerpt":"","text":"微信小程序中的 canvas","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"}]},{"title":"hexo 3","slug":"Hexo/3","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T02:22:06.366Z","comments":true,"path":"2018/01/13/Hexo/3/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/Hexo/3/","excerpt":"","text":"","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript hexo","slug":"JavaScript-hexo","permalink":"http://lwwtotod.github.io/tags/JavaScript-hexo/"}]},{"title":"javascript 实现集合","slug":"JavaScript/javascript实现集合","date":"2018-01-13T08:07:32.000Z","updated":"2019-04-16T03:35:42.259Z","comments":true,"path":"2018/01/13/JavaScript/javascript实现集合/","link":"","permalink":"http://lwwtotod.github.io/2018/01/13/JavaScript/javascript实现集合/","excerpt":"","text":"在数学中，集合是一组 不同的对象（的集）。 比如说，一个由大于或等于 0 的整数组成的自然数集合：N = {0, 1, 2, 3, 4, 5, 6, …}。集合中 的对象列表用“{}”（大括号）包围。还有一个概念叫空集。空集就是不包含任何元素的集合。比如 24 和 29 之间的素数集合。由于 24 和 29 之间没有素数（除了 1 和自身，没有其他正因数的大于 1 的自然数），这个集合就是空集。 空集用“{ }”表示。你也可以把集合想象成一个既没有重复元素，也没有顺序概念的数组。在数学中，集合也有并集、交集、差集等基本操作。 目前的 JavaScript 实现是基于 2011 年 6 月发布的 ECMAScript 5.1（现代浏览器均已支持），它包 括了我们在之前章节已经提到过的 Array 类的实现。ECMAScript 6（官方名称 ECMAScript 2015， 2015 年 6 月发布）包括了 Set 类的实现。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273function Set() &#123; var items = &#123;&#125; this.has = function(value) &#123; return items.hasOwnProperty(value) &#125; this.add = function(value) &#123; if (!this.has(value)) &#123; items[value] = value return true &#125; return false &#125; this.remove = function(value) &#123; if (this.has(value)) &#123; delete items[value] return true &#125; return false &#125; this.clear = function() &#123; items = &#123;&#125; &#125; this.size = function() &#123; return Object.keys(items).length &#125; this.values = function() &#123; return Object.keys(items) &#125; //并集 this.intersection = function(otherSet) &#123; var intersectionSet = new Set() var values = this.values() for (var i = 0; i &lt; values.length; i++) &#123; if (otherSet.has(values[i])) &#123; intersectionSet.add(values[i]) &#125; &#125; return intersectionSet &#125; //差集 this.difference = function(otherSet) &#123; var differenceSet = new Set() var values = this.values() for (var i = 0; i &lt; values.length; i++) &#123; if (!otherSet.has(values[i])) &#123; differenceSet.add(values[i]) &#125; &#125; return differenceSet &#125; //子集 this.subset = function(otherSet) &#123; if (this.size() &gt; otherSet.size()) &#123; return false &#125; else &#123; var values = this.values() for (var i = 0; i &lt; values.length; i++) &#123; if (!otherSet.has(values[i])) &#123; return false &#125; &#125; return true &#125; &#125;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"},{"name":"算法","slug":"算法","permalink":"http://lwwtotod.github.io/tags/算法/"}]},{"title":"javascript 实现队列","slug":"JavaScript/javascript实现队列","date":"2017-01-13T08:07:32.000Z","updated":"2019-04-16T03:35:39.069Z","comments":true,"path":"2017/01/13/JavaScript/javascript实现队列/","link":"","permalink":"http://lwwtotod.github.io/2017/01/13/JavaScript/javascript实现队列/","excerpt":"","text":"什么是队列队列是遵循 FIFO（First In First Out，先进先出，也称为先来先服务）原则的一组有序的项。 队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。 在计算机科学中，一个常见的例子就是打印队列。比如说我们需要打印五份文档。我们会打 开每个文档，然后点击打印按钮。每个文档都会被发送至打印队列。第一个发送到打印队列的文 档会首先被打印，以此类推，直到打印完所有文档 123456789101112131415161718192021222324252627282930313233343536373839// 创建队列类方法class Queue &#123; constructor() &#123; this.items = [] &#125; //相队列尾部添加一个元素 enqueue(element) &#123; this.items.push(element) &#125; //移除队列的一个个元素 dequeue() &#123; return this.items.shift() &#125; // 返回队列第一个元素,第一个被添加的元素 front() &#123; return this.items[0] &#125; // 查看队列是否为空 isEmpty() &#123; return this.items.length == 0 &#125; // 清除队列 clear() &#123; this.items = [] &#125; // 返回队列包含的元素个数 size() &#123; return this.items.length &#125; print() &#123; console.log(this.items.toString()) &#125;&#125;//测试用例const queue = new Queue()console.log(queue.isEmpty())queue.enqueue('John')queue.enqueue('Jack')queue.print() 优先队列队列大量应用在计算机科学以及我们的生活中，我们在之前话题中实现的默认队列也有一些 修改版本。其中一个修改版就是优先队列。元素的添加和移除是基于优先级的。一个现实的例子就是机 场登机的顺序。头等舱和商务舱乘客的优先级要高于经济舱乘客。在有些国家，老年人和孕妇（或 带小孩的妇女）登机时也享有高于其他乘客的优先级。另一个现实中的例子是医院的（急诊科）候诊室。医生会优先处理病情比较严重的患者。通 常，护士会鉴别分类，根据患者病情的严重程度放号。 实现一个优先队列，有两种选项：设置优先级，然后在正确的位置添加元素；或者用入列操 作添加元素，然后按照优先级移除它们。 1234567891011121314151617181920212223242526272829303132function PriorityQuene() &#123; var items = [] //创建一个特殊的元素.包含优先级 function QueneElement(element, priority) &#123; this.element = element this.priority = priority &#125; // 入队方法 this.enquene = function (element, priority) &#123; // 实例化元素 var quemeElement = new QueneElement(element, priority) // 如果队列是空的那么直接push if (this.isEmpty()) &#123; this.push(quemeElement) &#125; else &#123; // 否则遍历队列中的元素比较优先级 var added = false for (var i = 0; i &lt; items.length; i++) &#123; // 如果新的元素优先级比更高那么在它前面push(1代表最高优先级 if (quemeElement.priority &lt; items[i].priority) &#123; items.splice(i, 0, quemeElement) added = true break &#125; &#125; // 如果没有找到更高的优先级那么自己push到后面 if(!added)&#123; items.push(quemeElement) &#125; &#125; &#125;&#125; export default { mounted() { class Queue { constructor() { this.items = [] } enqueue(element) { this.items.push(element) } dequeue() { return this.items.shift() } front() { return this.items[0] } isEmpty() { return this.items.length == 0 } clear() { this.items = []; } size() { return this.items.length } print() { console.log(this.items.toString()) } } var queue = new Queue(); console.log(queue.isEmpty()); queue.enqueue(\"John\"); queue.enqueue(\"Jack\"); queue.print(); }, }","categories":[{"name":"前端","slug":"前端","permalink":"http://lwwtotod.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://lwwtotod.github.io/tags/JavaScript/"},{"name":"算法","slug":"算法","permalink":"http://lwwtotod.github.io/tags/算法/"}]}]}