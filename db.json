{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-indigo-card/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1555381927417},{"_id":"themes/hexo-theme-indigo-card/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/.DS_Store","hash":"df06b815f9208c20ad33a71293885857dfffafaf","modified":1563173210497},{"_id":"themes/hexo-theme-indigo-card/README.md","hash":"4bf26d9b43bf24b8e0a1a0d058437a347972f5e6","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/_config.yml","hash":"09b46ad70c5c8b98f70967f2e132faeac9c93337","modified":1573224671869},{"_id":"themes/hexo-theme-indigo-card/package.json","hash":"c795e3100ae3655bfa8b39adcca7333a7925b47f","modified":1548348052000},{"_id":"source/_posts/.DS_Store","hash":"b6e824973f13fe81d94db45b08bfc2bea0f93950","modified":1570775993337},{"_id":"source/categories/index.md","hash":"5c25564942247b69df2733205ace2236471ab9f0","modified":1555307626000},{"_id":"source/tags/index.md","hash":"41258f5d14aca48157b7dbbb123e2d3fd7725460","modified":1555307636000},{"_id":"themes/hexo-theme-indigo-card/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/languages/ja.yml","hash":"74fd480874bf5e773ba7f9d2a94697cda979091f","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/languages/nl-NL","hash":"9085c04491f93066f2369911cc2175b59ae596ad","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/.DS_Store","hash":"84f35e390633eadc3c78584a28f5f5f8ce7f43a5","modified":1563170169528},{"_id":"source/_posts/Element/组件皮肤样式篇.md","hash":"8eef7c51cdeafd44fa3d58e3399b124e67fb883f","modified":1555385772346},{"_id":"source/_posts/Hexo/2.md","hash":"f5fcb7c5859dcd9b538778e7eddfb4414aefa014","modified":1555381330265},{"_id":"source/_posts/Hexo/3.md","hash":"ec1df7f2bd79def1f9ba68e2feca6af07cea65e4","modified":1555381326366},{"_id":"source/_posts/Element/起步.md","hash":"ad28e9ea0c063ce82b2e1494d40e5ff486f9cf3c","modified":1560220342306},{"_id":"source/_posts/Hexo/1.md","hash":"4a2a7a41bb7ddc3b67eea2f9296ef5c3aa80f38b","modified":1560220038876},{"_id":"source/_posts/CSS/layout.md","hash":"847f42b80a0f3e86acb07983e61dd67a38f31405","modified":1555573574412},{"_id":"source/_posts/JavaScript/javascript实现字典散列表.md","hash":"7d2ddb0bd9e634adbae50e1a18ec16ee4882c61f","modified":1555385726469},{"_id":"source/_posts/JavaScript/javascript实现排序算法.md","hash":"92774a06f86cafab526c70dc70d037427bce5921","modified":1555385728784},{"_id":"source/_posts/JavaScript/javascript实现栈.md","hash":"a3a8786cc38bf9c2e0f10e0dad28fbe2557476d7","modified":1555385730932},{"_id":"source/_posts/JavaScript/javascript实现图.md","hash":"d24f770dd82519c4fb3bd9983fd7e600fc58c282","modified":1561426094962},{"_id":"source/_posts/JavaScript/javascript实现链表.md","hash":"85784c758427542f49eb602954f091f77cdba3a6","modified":1555385736588},{"_id":"source/_posts/JavaScript/javascript实现简单二叉查找树.md","hash":"53cec33a816c025e774bac0b98a9993a055c6803","modified":1555385734196},{"_id":"source/_posts/JavaScript/javascript实现队列.md","hash":"0e061892c46f729953f777de0a3dbfaf3b1bf579","modified":1555385739069},{"_id":"source/_posts/InterView/常见面试题.md","hash":"ffb593f0694aaa6c6b076460ef0974ebf9aacac1","modified":1555385751327},{"_id":"source/_posts/JavaScript/javascript实现集合.md","hash":"93eb98a9704e35613656ecd09fca922ae4520ca5","modified":1555385742259},{"_id":"source/_posts/JavaScript/观察者模式.md","hash":"3f0a9eaacd174744ee8666be0466bb65ce82afbf","modified":1560220540425},{"_id":"source/_posts/Nodejs/Sequelize的配置.md","hash":"2fe3750d67c55960c3ee0e00f0fe6c99894f1e84","modified":1555385799606},{"_id":"source/_posts/Vscode/配置.md","hash":"1694e7a130e11c203f856bb55241bc16b03a8c6f","modified":1555385820457},{"_id":"source/_posts/Nginx/mac下配置ngxin.md","hash":"322aeca76cc4a1c35b6a1ec24a1914fd1d6020e0","modified":1555385415524},{"_id":"source/_posts/Terminal/GIt常用命令.md","hash":"8e46b6389d8b9fa6afeaa8c5d37c724245ed49c0","modified":1571897863765},{"_id":"source/_posts/Nodejs/npm与yarn.md","hash":"bf855c9b9538b3d2f2bbec7d085184b6e2478733","modified":1555385534513},{"_id":"source/_posts/WeChat/使用mpvue开发微信小程序.md","hash":"a2b4828ac2fb067640a54cacdca9d5a045b80c69","modified":1555381438074},{"_id":"source/_posts/WeChat/小程序Canvas.md","hash":"5c207b227d787708249a010f0a297d663a3a9a1f","modified":1555381442461},{"_id":"source/_posts/Terminal/mac下修改hosts文件.md","hash":"4f659d4f10da3799049b2833aded2959ac120293","modified":1568775776195},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1548348052000},{"_id":"source/_posts/Terminal/mac下使用homebrew.md","hash":"b1997acd38ff83b86b3b76f290704fdf645586ae","modified":1570776163758},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/footer.ejs","hash":"e1a71a30a1c7a664ddf3ba3e7eb3a5b90bc4b33c","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/head.ejs","hash":"02a95a88774cc50dbcc32242b6c8ac7e9d9028bb","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1548348052000},{"_id":"source/_posts/Vue/Axios基础配置.md","hash":"1d2c07dc68db10e82672e511599a10d3ab92590a","modified":1563503241103},{"_id":"source/_posts/leetcode/LeetCode.md","hash":"2e98ae5f032c2c45a81340cc169583c49b3522f8","modified":1555486745034},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/script.ejs","hash":"7e06d1c3ecf964a0a31e811d2c4935e084c6ad5c","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1563173210495},{"_id":"themes/hexo-theme-indigo-card/source/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/img/brand.jpg","hash":"7d7f1231f4dde3db0be8d8e9eed38359dc20a7de","modified":1560149608823},{"_id":"themes/hexo-theme-indigo-card/source/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/gitalk.ejs","hash":"bcf792a5633151fd999319fd91cf477e6860ae9c","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/hyper-comments.ejs","hash":"e5a83acc7c2e385b0c9abf428e86e8fdfd3a5202","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/valine.ejs","hash":"a976ca36bd09aeb2902bf94fcc7a59975ea25148","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/comment.ejs","hash":"21530a1bc362d286d08dbce0baf37d09d7c58c92","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/copyright.ejs","hash":"5305ed30ee35cf50f87656737d0ffe85f5bfc16b","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/toc.ejs","hash":"ad287a70724eb7cd8cd2a03a45b68032ee99973d","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_plugin/valine.less","hash":"ddbb7647d83f732f9b0d5d817d40a748006949cc","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/article.less","hash":"d476cd3537bcd8a02d055cc223f5c805b8638cc2","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/gotop.less","hash":"556a87e3b87bf1b45b21d252db2732df80aafd5a","modified":1563169132607},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/variable.less","hash":"3a6cf0d6c5d9cff36a22dfc3de7f34c3480479d0","modified":1563244742292},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1548348052000},{"_id":"themes/hexo-theme-indigo-card/source/img/avatar.jpg","hash":"61604ffd79299356223cedf0801840b45a95c8cc","modified":1557217443431},{"_id":"public/content.json","hash":"b65f513b9acc48b1488aba00c4508f62ea156a3f","modified":1573224683493},{"_id":"public/atom.xml","hash":"26a0e59a21257ab2f444b37542be2aa46c7ced63","modified":1573224683500},{"_id":"public/search.json","hash":"b2f2cac8d5e4b40c3e2af2825b53fe73e9b4182c","modified":1573224684315},{"_id":"public/2019/10/11/Terminal/mac下使用homebrew/index.html","hash":"169e5a7fab4d57720ec665aa85390ffc889b2e7f","modified":1573224684497},{"_id":"public/2019/08/13/Terminal/mac下修改hosts文件/index.html","hash":"2e9134514426fde104ee3e452a48503b647e44e0","modified":1573224684497},{"_id":"public/2019/03/13/JavaScript/观察者模式/index.html","hash":"5e8eca2290b73d49fe67bfee8d31ccd089457d6b","modified":1573224684497},{"_id":"public/2018/01/13/Hexo/2/index.html","hash":"9cc42eb0fd0700fe68b44ea62dec3e0fe43d2091","modified":1573224684497},{"_id":"public/2018/01/13/Hexo/3/index.html","hash":"e0f61cd5994016e913aaa25679113199c7c63e05","modified":1573224684497},{"_id":"public/2018/01/13/Hexo/1/index.html","hash":"40f9b57a6e1b15e5392fdf2fbcc57b445c0ca604","modified":1573224684497},{"_id":"public/2018/01/13/WeChat/小程序Canvas/index.html","hash":"9d0477fff5d3fb3b314b47381f88b943aab0c58b","modified":1573224684497},{"_id":"public/2018/01/13/Element/组件皮肤样式篇/index.html","hash":"e709eb95036ebcd565f46f116b2058a895ffb2a8","modified":1573224684497},{"_id":"public/archives/2017/index.html","hash":"6a95c55c8f10064f3392aca80235b132282ec38b","modified":1573224684497},{"_id":"public/archives/2017/01/index.html","hash":"8c04d4a1afa6c7928a14b4c454f47c337ea9c931","modified":1573224684497},{"_id":"public/archives/2019/03/index.html","hash":"751e468bb5d70eca39f028d5ff08f3f292c5c4ee","modified":1573224684497},{"_id":"public/archives/2019/04/index.html","hash":"40088535018f470df79fe3ddcf5d2f92b7ce7c67","modified":1573224684498},{"_id":"public/archives/2019/08/index.html","hash":"d4909fba5af00bc735da14c2e3b9cc16d345c0c1","modified":1573224684498},{"_id":"public/archives/2019/10/index.html","hash":"ac5f7ba76d99a9ab94f060224975bce8354853b8","modified":1573224684498},{"_id":"public/categories/Nodejs/index.html","hash":"71efa0035e2b1fdffe276958b2f78268f3b34ef4","modified":1573224684498},{"_id":"public/categories/Mac/index.html","hash":"7e29258000bad1670a7ced3c0dc35e7edd6538e1","modified":1573224684498},{"_id":"public/categories/git/index.html","hash":"7adac8301360a1b26adf4b8292b9add51fd7bd57","modified":1573224684498},{"_id":"public/categories/npm/index.html","hash":"5e85e1833bcc7c845b158bbe8866d0999e8aa45a","modified":1573224684498},{"_id":"public/categories/Mac/ngxin/index.html","hash":"990863cc38d39c86abe2db3ee892543fb92fdf6c","modified":1573224684498},{"_id":"public/categories/mac/index.html","hash":"9f1a75e860b4183db20ef488f8b246b985fbf710","modified":1573224684498},{"_id":"public/categories/算法/index.html","hash":"86796e948f99dbd856d65bee0ae8a770c8159e95","modified":1573224684498},{"_id":"public/tags/ElementUI/index.html","hash":"fda5f2454d35437b71b1f008e8cd460020dcda60","modified":1573224684498},{"_id":"public/tags/JavaScript-hexo/index.html","hash":"8778f174cecce7fdc7af05e39a92861e5b8cb71d","modified":1573224684498},{"_id":"public/tags/hexo/index.html","hash":"44b0edc171c5a25be9b1cb99dbe392ae20084f60","modified":1573224684498},{"_id":"public/tags/CSS/index.html","hash":"2b98b270f8234c5027ab01ea4c5b88bb30f37341","modified":1573224684498},{"_id":"public/tags/设计模式/index.html","hash":"ee1dfdc6c650df5461806150c8c9ebbcc6cf3941","modified":1573224684498},{"_id":"public/tags/Koa/index.html","hash":"7217b606a536ef1e13edc4585b73a68636af7f9a","modified":1573224684498},{"_id":"public/tags/Sequelize/index.html","hash":"893d019dc0cb143cc276e93edfc536af4b6275ca","modified":1573224684498},{"_id":"public/tags/vscode/index.html","hash":"0f1fb0072f5a78f50c395040921557611e70caff","modified":1573224684498},{"_id":"public/tags/ngxin/index.html","hash":"34fdb1a2218fa120086190679f2dabd3675f629d","modified":1573224684498},{"_id":"public/tags/Mac/index.html","hash":"78c474b7a76877f0c24ecfe7c1e49db93f416d06","modified":1573224684498},{"_id":"public/tags/git/index.html","hash":"4de6228c90aff2fbac49f60d09d140c39a4d3b7c","modified":1573224684498},{"_id":"public/tags/npm/index.html","hash":"da88c1a13d4dfab13e17e492f34d827c780efd1a","modified":1573224684498},{"_id":"public/tags/yarn/index.html","hash":"375a20daa448d796bb9fd5d2497dc46e96406a87","modified":1573224684498},{"_id":"public/tags/mac/index.html","hash":"0f9fda673b07681cc4e4c394b9800eda09ffe1b4","modified":1573224684498},{"_id":"public/tags/hosts/index.html","hash":"0f9dd892d51a8bf048a4f9261208d27ad913e00f","modified":1573224684499},{"_id":"public/tags/Vue/index.html","hash":"94e0c917adc64888d9c0c909e9aa270a2276b050","modified":1573224684499},{"_id":"public/tags/Axios/index.html","hash":"9cf957de6acc6ea0500295485c38d141955aa759","modified":1573224684499},{"_id":"public/tags/LeetCode/index.html","hash":"323532f5cfce904d0d34bb9547fbc5963b5bbc34","modified":1573224684499},{"_id":"public/tags/面试题/index.html","hash":"00f559141394f612a9544543cc7e9318c5948a23","modified":1573224684499},{"_id":"public/categories/index.html","hash":"ea003d595d128ba5bb00df1d20d81b731bc3fa42","modified":1573224684499},{"_id":"public/tags/index.html","hash":"71b4cc4f38764d9380746fac9af3e082045982d0","modified":1573224684499},{"_id":"public/2019/04/18/CSS/layout/index.html","hash":"3306dcf1f46aec56224237f576caa1b8a330ea00","modified":1573224684499},{"_id":"public/2019/04/16/Nginx/mac下配置ngxin/index.html","hash":"06b84cb6354a2f3789ba1a079c6acea89c800e1c","modified":1573224684499},{"_id":"public/2019/03/13/leetcode/LeetCode/index.html","hash":"e54cb0a9654221cdbdb624c981c99cfcc8230636","modified":1573224684499},{"_id":"public/2019/03/13/Nodejs/npm与yarn/index.html","hash":"f6135189efc9f0751ec5872fbdfd44ca9cc153c5","modified":1573224684499},{"_id":"public/2018/01/13/JavaScript/javascript实现字典散列表/index.html","hash":"95a4709fbd3e3cfdac0c31825eea2ef106602c40","modified":1573224684499},{"_id":"public/2018/01/13/JavaScript/javascript实现排序算法/index.html","hash":"bcdeb85c52edef5c22250b1154bebb05230d6f82","modified":1573224684499},{"_id":"public/2018/01/13/JavaScript/javascript实现图/index.html","hash":"f671d1c7496eee7c6a11733582c9ada2d459aa88","modified":1573224684499},{"_id":"public/2018/01/13/JavaScript/javascript实现链表/index.html","hash":"f1b0a21b5fc5ed0330b2ae061381a2d0010d7d96","modified":1573224684499},{"_id":"public/2018/01/13/JavaScript/javascript实现简单二叉查找树/index.html","hash":"43f22501290a65a30fd1ecdc3d4cac886905788a","modified":1573224684499},{"_id":"public/2018/01/13/JavaScript/javascript实现集合/index.html","hash":"c6b7477f6fc43e1823d492178fbf073853035b80","modified":1573224684499},{"_id":"public/2018/01/13/Nodejs/Sequelize的配置/index.html","hash":"b3cd5b4ce32fafd355fb116e6176f426024aad93","modified":1573224684499},{"_id":"public/2018/01/13/Vscode/配置/index.html","hash":"310e939c06de81ee23ef2f7401c30bc637a49ba6","modified":1573224684499},{"_id":"public/2018/01/13/Terminal/GIt常用命令/index.html","hash":"c407ec1eb704587356b65ef791d3c6047f155c66","modified":1573224684499},{"_id":"public/2018/01/13/WeChat/使用mpvue开发微信小程序/index.html","hash":"b92ea66b814eae6f51b85d6464f21700e48a7dab","modified":1573224684499},{"_id":"public/2018/01/13/Element/起步/index.html","hash":"18b52e9a9e80425e8ac4c91295075d1043d9244a","modified":1573224684500},{"_id":"public/2018/01/13/Vue/Axios基础配置/index.html","hash":"57b8cc5866a3ca48f2926193e41dd6eb9c8f8bff","modified":1573224684500},{"_id":"public/2018/01/13/JavaScript/javascript实现栈/index.html","hash":"6ce8368053207c969074b42d4952b91796fda4c5","modified":1573224684500},{"_id":"public/2018/01/13/InterView/常见面试题/index.html","hash":"85d96b04bb4b6f326a0919d814290277f2aa93fc","modified":1573224684500},{"_id":"public/2017/01/13/JavaScript/javascript实现队列/index.html","hash":"a7db4fde66aff4b39b1a59dfc7c5d003f9009321","modified":1573224684500},{"_id":"public/archives/index.html","hash":"fa68f684b233b39fcfb4d054fc520a2f277cd382","modified":1573224684500},{"_id":"public/archives/page/2/index.html","hash":"c3089db80f71e6303c1ced1a855500877f413ec9","modified":1573224684500},{"_id":"public/archives/page/3/index.html","hash":"53dc56f4c881408f1f642ab5847a0b9c068fea2c","modified":1573224684500},{"_id":"public/archives/2018/index.html","hash":"6233dbfc33cd62be95594cd2f20b39644df109b6","modified":1573224684500},{"_id":"public/archives/2018/page/2/index.html","hash":"1aaf9fb1a640090bd7773c4a897d9cb4f83ef720","modified":1573224684500},{"_id":"public/archives/2018/01/index.html","hash":"ba8f0de3fb1c11f841b8bc5c1044f3cb48f88921","modified":1573224684500},{"_id":"public/archives/2018/01/page/2/index.html","hash":"23b14bd81fd04beb1643266caa611afb2fd185ed","modified":1573224684500},{"_id":"public/archives/2019/index.html","hash":"1bd0abde98bd738d0028c617183ff81ec1dfa319","modified":1573224684500},{"_id":"public/categories/前端/index.html","hash":"8e07f2124f4badd35c4d1b485c07c56758f767bb","modified":1573224684500},{"_id":"public/categories/前端/page/2/index.html","hash":"9efdd7997d708c69010de1743eec1181a6d6e575","modified":1573224684500},{"_id":"public/tags/JavaScript/index.html","hash":"3a4578d488d4b441dec7cfd582075324d251d2f1","modified":1573224684500},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"f3fad41967264de13c49b299729f5a63eccdbc5a","modified":1573224684500},{"_id":"public/tags/算法/index.html","hash":"c41a3619434a62efddde4de72ecc760365623fbd","modified":1573224684500},{"_id":"public/index.html","hash":"374dce6cd22ea40581ef8f5f65262efaf92d33b2","modified":1573224684500},{"_id":"public/page/2/index.html","hash":"19ec3f4532085754536adc12d3306ae9327c12eb","modified":1573224684500},{"_id":"public/page/3/index.html","hash":"6e0ca0b3b90f4c4a097b271ea0028e1a831fd724","modified":1573224684500},{"_id":"public/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1573224684508},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1573224684508},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1573224684508},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1573224684508},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1573224684508},{"_id":"public/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1573224684508},{"_id":"public/img/brand.jpg","hash":"7d7f1231f4dde3db0be8d8e9eed38359dc20a7de","modified":1573224684508},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1573224684508},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1573224684508},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1573224684508},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1573224684508},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1573224684508},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1573224684509},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1573224684509},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1573224684509},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1573224684509},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1573224684509},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1573224684509},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1573224684509},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1573224684509},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1573224684509},{"_id":"public/live2dw/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1573224684509},{"_id":"public/live2dw/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1573224684509},{"_id":"public/live2dw/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1573224684509},{"_id":"public/live2dw/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1573224684509},{"_id":"public/live2dw/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1573224684509},{"_id":"public/live2dw/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1573224684509},{"_id":"public/live2dw/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1573224684509},{"_id":"public/live2dw/assets/mtn/idle_00.mtn","hash":"378b4577217c604c9d28ab4edf8b707c8d8c2fbb","modified":1573224684509},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"88c2494655dbb712b842f03232b619f381753d52","modified":1573224684509},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"7f5d2cf8706007c8659938eba132a68c470a4c26","modified":1573224684509},{"_id":"public/live2dw/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1573224684509},{"_id":"public/live2dw/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1573224684510},{"_id":"public/live2dw/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1573224684510},{"_id":"public/live2dw/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1573224684510},{"_id":"public/live2dw/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1573224684510},{"_id":"public/live2dw/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1573224684510},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1573224684510},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1573224684510},{"_id":"public/live2dw/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1573224684510},{"_id":"public/live2dw/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1573224684510},{"_id":"public/live2dw/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1573224684510},{"_id":"public/live2dw/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1573224684510},{"_id":"public/live2dw/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1573224684510},{"_id":"public/live2dw/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1573224684510},{"_id":"public/live2dw/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1573224684510},{"_id":"public/live2dw/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1573224684510},{"_id":"public/live2dw/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1573224684510},{"_id":"public/live2dw/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1573224684510},{"_id":"public/live2dw/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1573224684510},{"_id":"public/live2dw/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1573224684510},{"_id":"public/live2dw/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1573224684510},{"_id":"public/live2dw/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1573224684510},{"_id":"public/live2dw/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1573224684511},{"_id":"public/live2dw/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1573224684511},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1573224684511},{"_id":"public/live2dw/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1573224684511},{"_id":"public/live2dw/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1573224684511},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1573224684541},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1573224684541},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1573224684541},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1573224684541},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1573224684541},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1573224684541},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1573224684541},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1573224684542},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1573224684542},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1573224684542},{"_id":"public/live2dw/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1573224684542},{"_id":"public/live2dw/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1573224684542},{"_id":"public/live2dw/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1573224684542},{"_id":"public/live2dw/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1573224684543},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1573224684543},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1573224684551},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1573224684552},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1573224684552},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1573224684552},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1573224684552},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1573224684552},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1573224684562},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1573224684570},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1573224684571},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1573224684571},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1573224684718},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1573224684769},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1573224684770},{"_id":"public/css/style.css","hash":"2127c73a6681e10ba8ae4a4432717703331d0ea4","modified":1573224685143},{"_id":"public/live2dw/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1573224685144},{"_id":"public/img/avatar.jpg","hash":"61604ffd79299356223cedf0801840b45a95c8cc","modified":1573224685144}],"Category":[{"name":"前端","_id":"ck2q9ctc400042e47vizjpkix"},{"name":"Nodejs","_id":"ck2q9ctcq00182e47qmko4iel"},{"name":"Mac","_id":"ck2q9ctct001h2e47jcpdlgqr"},{"name":"git","_id":"ck2q9ctcv001p2e47fen54kge"},{"name":"npm","_id":"ck2q9ctcy001x2e47ul7jjigb"},{"name":"ngxin","parent":"ck2q9ctct001h2e47jcpdlgqr","_id":"ck2q9ctd000252e47quixekju"},{"name":"mac","_id":"ck2q9ctd1002b2e47qbe9igz3"},{"name":"算法","_id":"ck2q9ctd2002h2e472ij5e1xv"}],"Data":[],"Page":[{"layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\nlayout: categories\ncomments: false\n---","date":"2019-09-16T08:50:11.149Z","updated":"2019-04-15T05:53:46.000Z","path":"categories/index.html","title":"","_id":"ck2q9ctb400002e47m6hqlbpc","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\nlayout: tags\ncomments: false\n---","date":"2019-09-16T08:50:11.148Z","updated":"2019-04-15T05:53:56.000Z","path":"tags/index.html","title":"","_id":"ck2q9ctb600012e47v4opxnew","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"组件皮肤样式篇","date":"2018-01-13T08:07:32.000Z","_content":"","source":"_posts/Element/组件皮肤样式篇.md","raw":"---\ntitle: 组件皮肤样式篇\ndate: 2018-01-13 16:07:32\ntags:\n  - JavaScript\n  - ElementUI\ncategory: 前端\n---\n","slug":"Element/组件皮肤样式篇","published":1,"updated":"2019-04-16T03:36:12.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctby00022e47hqp33oaj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hexo 2","date":"2018-01-13T08:07:32.000Z","_content":"","source":"_posts/Hexo/2.md","raw":"---\ntitle: hexo 2\ndate: 2018-01-13 16:07:32\ntags: JavaScript hexo\ncategory: 前端\n---\n","slug":"Hexo/2","published":1,"updated":"2019-04-16T02:22:10.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctc200032e47dwhfwcff","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hexo 3","date":"2018-01-13T08:07:32.000Z","_content":"","source":"_posts/Hexo/3.md","raw":"---\ntitle: hexo 3\ndate: 2018-01-13 16:07:32\ntags: JavaScript hexo\ncategory: 前端\n---\n","slug":"Hexo/3","published":1,"updated":"2019-04-16T02:22:06.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctc600062e474725abd9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hexo 1","date":"2018-01-13T08:07:32.000Z","_content":"\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"vMWvEY\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"单栏布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/vMWvEY/\">\n  单栏布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n","source":"_posts/Hexo/1.md","raw":"---\ntitle: hexo 1\ndate: 2018-01-13 16:07:32\ntags: hexo\ncategory: 前端\n---\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"vMWvEY\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"单栏布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/vMWvEY/\">\n  单栏布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n","slug":"Hexo/1","published":1,"updated":"2019-06-11T02:27:18.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctc700072e47f021nci1","content":"<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"vMWvEY\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"单栏布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/vMWvEY/\" target=\"_blank\" rel=\"noopener\">\n  单栏布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n","site":{"data":{}},"excerpt":"","more":"<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"vMWvEY\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"单栏布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/vMWvEY/\" target=\"_blank\" rel=\"noopener\">\n  单栏布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n"},{"title":"起步","date":"2018-01-13T08:07:32.000Z","_content":"\n# 起步\n\n### 本套源码为 2.5.3 版本\n\n![](https://ws1.sinaimg.cn/large/bd97bb05gy1g0bhl5xtg6j20bg0o6wfe.jpg)\n\n<tabel>\n<tbody>\n  <tr>\n    <td>build</td>\n    <td>编译相关</td>\n  </tr>\n  <tr>\n    <td>examples</td>\n    <td>示例代码</td>\n  </tr>\n  <tr>\n    <td>packages</td>\n    <td>组件</td>\n  </tr>\n  <tr>\n    <td>src</td>\n    <td>相关入口/工具函数</td>\n  </tr>\n  <tr>\n\n    <td>test/unit</td>\n    <td>测试相关</td>\n  </tr>\n  <tr>\n    <td>types</td>\n    <td>接口声明</td>\n  </tr>\n</tbody>\n</tabel>\n\n```json\n  \"scripts\": {\n    \"bootstrap\": \"安装依赖\",\n    \"build:file\": \"编译源代码入口\",\n    \"build:theme\": \"编译主题相关\",\n    \"build:utils\": \"编译语言相关\",\n    \"build:umd\": \"编译语言相关/umd版本\",\n    \"clean\": \"rimraf lib && rimraf packages/*/lib && rimraf test/**/coverage\",\n    \"deploy:build\": \"npm run build:file && cross-env NODE_ENV=production webpack --config build/webpack.demo.js && echo element.eleme.io>>examples/element-ui/CNAME\",\n    \"dev\": \"运行开发模式 8085\",\n    \"dev:play\": \"npm run build:file && cross-env NODE_ENV=development PLAY_ENV=true webpack-dev-server --config build/webpack.demo.js\",\n    \"dist\": \"打包\",\n    \"i18n\": \"i18n相关\",\n    \"lint\": \"lint相关\",\n    \"pub\": \"运行sh脚步 一次编译并部署\",\n    \"test\": \"测试\",\n    \"test:watch\": \"测试实时监测\"\n  },\n\n```\n\n查看`makefile`文件 执行`make`命令\n\n使用`yarn`或`npm`安装依赖\n\n安装完依赖之后执行`dev`命令\n\n```nodejs\nyarn bootstrap\n\nyarn dev\n```\n\n运行完 dev 命令后在`build`文件夹下`webpack.demo.js`查看端口号\n\n```js\n  devServer: {\n    host: '0.0.0.0',\n    port: 8085,\n    publicPath: '/',\n    noInfo: true\n  },\n```\n\n打开[localhost:8085](localhost:8085)预览项目\n\n","source":"_posts/Element/起步.md","raw":"---\ntitle: 起步\ndate: 2018-01-13 16:07:32\ntags:\n  - JavaScript\n  - ElementUI\ncategory: 前端\n---\n\n# 起步\n\n### 本套源码为 2.5.3 版本\n\n![](https://ws1.sinaimg.cn/large/bd97bb05gy1g0bhl5xtg6j20bg0o6wfe.jpg)\n\n<tabel>\n<tbody>\n  <tr>\n    <td>build</td>\n    <td>编译相关</td>\n  </tr>\n  <tr>\n    <td>examples</td>\n    <td>示例代码</td>\n  </tr>\n  <tr>\n    <td>packages</td>\n    <td>组件</td>\n  </tr>\n  <tr>\n    <td>src</td>\n    <td>相关入口/工具函数</td>\n  </tr>\n  <tr>\n\n    <td>test/unit</td>\n    <td>测试相关</td>\n  </tr>\n  <tr>\n    <td>types</td>\n    <td>接口声明</td>\n  </tr>\n</tbody>\n</tabel>\n\n```json\n  \"scripts\": {\n    \"bootstrap\": \"安装依赖\",\n    \"build:file\": \"编译源代码入口\",\n    \"build:theme\": \"编译主题相关\",\n    \"build:utils\": \"编译语言相关\",\n    \"build:umd\": \"编译语言相关/umd版本\",\n    \"clean\": \"rimraf lib && rimraf packages/*/lib && rimraf test/**/coverage\",\n    \"deploy:build\": \"npm run build:file && cross-env NODE_ENV=production webpack --config build/webpack.demo.js && echo element.eleme.io>>examples/element-ui/CNAME\",\n    \"dev\": \"运行开发模式 8085\",\n    \"dev:play\": \"npm run build:file && cross-env NODE_ENV=development PLAY_ENV=true webpack-dev-server --config build/webpack.demo.js\",\n    \"dist\": \"打包\",\n    \"i18n\": \"i18n相关\",\n    \"lint\": \"lint相关\",\n    \"pub\": \"运行sh脚步 一次编译并部署\",\n    \"test\": \"测试\",\n    \"test:watch\": \"测试实时监测\"\n  },\n\n```\n\n查看`makefile`文件 执行`make`命令\n\n使用`yarn`或`npm`安装依赖\n\n安装完依赖之后执行`dev`命令\n\n```nodejs\nyarn bootstrap\n\nyarn dev\n```\n\n运行完 dev 命令后在`build`文件夹下`webpack.demo.js`查看端口号\n\n```js\n  devServer: {\n    host: '0.0.0.0',\n    port: 8085,\n    publicPath: '/',\n    noInfo: true\n  },\n```\n\n打开[localhost:8085](localhost:8085)预览项目\n\n","slug":"Element/起步","published":1,"updated":"2019-06-11T02:32:22.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctc700082e47wyn32zow","content":"<h1 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h1><h3 id=\"本套源码为-2-5-3-版本\"><a href=\"#本套源码为-2-5-3-版本\" class=\"headerlink\" title=\"本套源码为 2.5.3 版本\"></a>本套源码为 2.5.3 版本</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ws1.sinaimg.cn/large/bd97bb05gy1g0bhl5xtg6j20bg0o6wfe.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n\n<tabel>\n<tbody>\n  <tr>\n    <td>build</td>\n    <td>编译相关</td>\n  </tr>\n  <tr>\n    <td>examples</td>\n    <td>示例代码</td>\n  </tr>\n  <tr>\n    <td>packages</td>\n    <td>组件</td>\n  </tr>\n  <tr>\n    <td>src</td>\n    <td>相关入口/工具函数</td>\n  </tr>\n  <tr>\n\n<pre><code>&lt;td&gt;test/unit&lt;/td&gt;\n&lt;td&gt;测试相关&lt;/td&gt;</code></pre>  </tr>\n  <tr>\n    <td>types</td>\n    <td>接口声明</td>\n  </tr>\n</tbody>\n</tabel>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"bootstrap\": \"安装依赖\",</span><br><span class=\"line\">  \"build:file\": \"编译源代码入口\",</span><br><span class=\"line\">  \"build:theme\": \"编译主题相关\",</span><br><span class=\"line\">  \"build:utils\": \"编译语言相关\",</span><br><span class=\"line\">  \"build:umd\": \"编译语言相关/umd版本\",</span><br><span class=\"line\">  \"clean\": \"rimraf lib &amp;&amp; rimraf packages/*/lib &amp;&amp; rimraf test/**/coverage\",</span><br><span class=\"line\">  \"deploy:build\": \"npm run build:file &amp;&amp; cross-env NODE_ENV=production webpack --config build/webpack.demo.js &amp;&amp; echo element.eleme.io&gt;&gt;examples/element-ui/CNAME\",</span><br><span class=\"line\">  \"dev\": \"运行开发模式 8085\",</span><br><span class=\"line\">  \"dev:play\": \"npm run build:file &amp;&amp; cross-env NODE_ENV=development PLAY_ENV=true webpack-dev-server --config build/webpack.demo.js\",</span><br><span class=\"line\">  \"dist\": \"打包\",</span><br><span class=\"line\">  \"i18n\": \"i18n相关\",</span><br><span class=\"line\">  \"lint\": \"lint相关\",</span><br><span class=\"line\">  \"pub\": \"运行sh脚步 一次编译并部署\",</span><br><span class=\"line\">  \"test\": \"测试\",</span><br><span class=\"line\">  \"test:watch\": \"测试实时监测\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>查看<code>makefile</code>文件 执行<code>make</code>命令</p>\n<p>使用<code>yarn</code>或<code>npm</code>安装依赖</p>\n<p>安装完依赖之后执行<code>dev</code>命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn bootstrap</span><br><span class=\"line\"></span><br><span class=\"line\">yarn dev</span><br></pre></td></tr></table></figure>\n\n<p>运行完 dev 命令后在<code>build</code>文件夹下<code>webpack.demo.js</code>查看端口号</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  host: <span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">  port: <span class=\"number\">8085</span>,</span><br><span class=\"line\">  publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">  noInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>打开<a href=\"localhost:8085\" target=\"_blank\" rel=\"noopener\">localhost:8085</a>预览项目</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h1><h3 id=\"本套源码为-2-5-3-版本\"><a href=\"#本套源码为-2-5-3-版本\" class=\"headerlink\" title=\"本套源码为 2.5.3 版本\"></a>本套源码为 2.5.3 版本</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ws1.sinaimg.cn/large/bd97bb05gy1g0bhl5xtg6j20bg0o6wfe.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n\n<tabel>\n<tbody>\n  <tr>\n    <td>build</td>\n    <td>编译相关</td>\n  </tr>\n  <tr>\n    <td>examples</td>\n    <td>示例代码</td>\n  </tr>\n  <tr>\n    <td>packages</td>\n    <td>组件</td>\n  </tr>\n  <tr>\n    <td>src</td>\n    <td>相关入口/工具函数</td>\n  </tr>\n  <tr>\n\n<pre><code>&lt;td&gt;test/unit&lt;/td&gt;\n&lt;td&gt;测试相关&lt;/td&gt;</code></pre>  </tr>\n  <tr>\n    <td>types</td>\n    <td>接口声明</td>\n  </tr>\n</tbody>\n</tabel>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"bootstrap\": \"安装依赖\",</span><br><span class=\"line\">  \"build:file\": \"编译源代码入口\",</span><br><span class=\"line\">  \"build:theme\": \"编译主题相关\",</span><br><span class=\"line\">  \"build:utils\": \"编译语言相关\",</span><br><span class=\"line\">  \"build:umd\": \"编译语言相关/umd版本\",</span><br><span class=\"line\">  \"clean\": \"rimraf lib &amp;&amp; rimraf packages/*/lib &amp;&amp; rimraf test/**/coverage\",</span><br><span class=\"line\">  \"deploy:build\": \"npm run build:file &amp;&amp; cross-env NODE_ENV=production webpack --config build/webpack.demo.js &amp;&amp; echo element.eleme.io&gt;&gt;examples/element-ui/CNAME\",</span><br><span class=\"line\">  \"dev\": \"运行开发模式 8085\",</span><br><span class=\"line\">  \"dev:play\": \"npm run build:file &amp;&amp; cross-env NODE_ENV=development PLAY_ENV=true webpack-dev-server --config build/webpack.demo.js\",</span><br><span class=\"line\">  \"dist\": \"打包\",</span><br><span class=\"line\">  \"i18n\": \"i18n相关\",</span><br><span class=\"line\">  \"lint\": \"lint相关\",</span><br><span class=\"line\">  \"pub\": \"运行sh脚步 一次编译并部署\",</span><br><span class=\"line\">  \"test\": \"测试\",</span><br><span class=\"line\">  \"test:watch\": \"测试实时监测\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>查看<code>makefile</code>文件 执行<code>make</code>命令</p>\n<p>使用<code>yarn</code>或<code>npm</code>安装依赖</p>\n<p>安装完依赖之后执行<code>dev</code>命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn bootstrap</span><br><span class=\"line\"></span><br><span class=\"line\">yarn dev</span><br></pre></td></tr></table></figure>\n\n<p>运行完 dev 命令后在<code>build</code>文件夹下<code>webpack.demo.js</code>查看端口号</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  host: <span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">  port: <span class=\"number\">8085</span>,</span><br><span class=\"line\">  publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">  noInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>打开<a href=\"localhost:8085\" target=\"_blank\" rel=\"noopener\">localhost:8085</a>预览项目</p>\n"},{"title":"Css布局","_content":"\n### 单栏布局\n\n#### 示例 1\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"PgRzQx\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"单栏布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/PgRzQx/\">\n  单栏布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n#### 示例 2(通栏)\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"wZmWjZ\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"单栏布局2\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/wZmWjZ/\">\n  单栏布局2</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n### 两栏布局\n\n#### 示例 1\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"pBLbPz\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"两栏布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/pBLbPz/\">\n  两栏布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n#### 示例 2\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"GLxqvB\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"两栏布局2\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/GLxqvB/\">\n  两栏布局2</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n#### 示例 3\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"NmYrwm\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"两栏布局3\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/NmYrwm/\">\n  两栏布局3</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n### 三栏布局\n\n#### 双飞翼布局\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html\" data-user=\"lwwtotod\" data-slug-hash=\"ROxGMa\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"双飞翼布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/ROxGMa/\">\n  双飞翼布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n#### 圣杯布局\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"YMaWJv\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"三栏布局2\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/YMaWJv/\">\n  三栏布局2</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n","source":"_posts/CSS/layout.md","raw":"---\ntitle: Css布局\ntags: CSS\ncategory: 前端\n---\n\n### 单栏布局\n\n#### 示例 1\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"PgRzQx\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"单栏布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/PgRzQx/\">\n  单栏布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n#### 示例 2(通栏)\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"wZmWjZ\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"单栏布局2\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/wZmWjZ/\">\n  单栏布局2</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n### 两栏布局\n\n#### 示例 1\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"pBLbPz\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"两栏布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/pBLbPz/\">\n  两栏布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n#### 示例 2\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"GLxqvB\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"两栏布局2\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/GLxqvB/\">\n  两栏布局2</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n#### 示例 3\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"NmYrwm\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"两栏布局3\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/NmYrwm/\">\n  两栏布局3</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n### 三栏布局\n\n#### 双飞翼布局\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html\" data-user=\"lwwtotod\" data-slug-hash=\"ROxGMa\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"双飞翼布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/ROxGMa/\">\n  双飞翼布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n#### 圣杯布局\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"YMaWJv\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"三栏布局2\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/YMaWJv/\">\n  三栏布局2</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n","slug":"CSS/layout","published":1,"date":"2019-04-18T07:23:47.667Z","updated":"2019-04-18T07:46:14.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctca000b2e47w8e26eq9","content":"<h3 id=\"单栏布局\"><a href=\"#单栏布局\" class=\"headerlink\" title=\"单栏布局\"></a>单栏布局</h3><h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例 1\"></a>示例 1</h4><p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"PgRzQx\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"单栏布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/PgRzQx/\" target=\"_blank\" rel=\"noopener\">\n  单栏布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h4 id=\"示例-2-通栏\"><a href=\"#示例-2-通栏\" class=\"headerlink\" title=\"示例 2(通栏)\"></a>示例 2(通栏)</h4><p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"wZmWjZ\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"单栏布局2\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/wZmWjZ/\" target=\"_blank\" rel=\"noopener\">\n  单栏布局2</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h3 id=\"两栏布局\"><a href=\"#两栏布局\" class=\"headerlink\" title=\"两栏布局\"></a>两栏布局</h3><h4 id=\"示例-1-1\"><a href=\"#示例-1-1\" class=\"headerlink\" title=\"示例 1\"></a>示例 1</h4><p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"pBLbPz\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"两栏布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/pBLbPz/\" target=\"_blank\" rel=\"noopener\">\n  两栏布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例 2\"></a>示例 2</h4><p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"GLxqvB\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"两栏布局2\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/GLxqvB/\" target=\"_blank\" rel=\"noopener\">\n  两栏布局2</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h4 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例 3\"></a>示例 3</h4><p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"NmYrwm\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"两栏布局3\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/NmYrwm/\" target=\"_blank\" rel=\"noopener\">\n  两栏布局3</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h3 id=\"三栏布局\"><a href=\"#三栏布局\" class=\"headerlink\" title=\"三栏布局\"></a>三栏布局</h3><h4 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h4><p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html\" data-user=\"lwwtotod\" data-slug-hash=\"ROxGMa\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"双飞翼布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/ROxGMa/\" target=\"_blank\" rel=\"noopener\">\n  双飞翼布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h4 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h4><p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"YMaWJv\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"三栏布局2\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/YMaWJv/\" target=\"_blank\" rel=\"noopener\">\n  三栏布局2</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"单栏布局\"><a href=\"#单栏布局\" class=\"headerlink\" title=\"单栏布局\"></a>单栏布局</h3><h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例 1\"></a>示例 1</h4><p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"PgRzQx\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"单栏布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/PgRzQx/\" target=\"_blank\" rel=\"noopener\">\n  单栏布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h4 id=\"示例-2-通栏\"><a href=\"#示例-2-通栏\" class=\"headerlink\" title=\"示例 2(通栏)\"></a>示例 2(通栏)</h4><p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"wZmWjZ\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"单栏布局2\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/wZmWjZ/\" target=\"_blank\" rel=\"noopener\">\n  单栏布局2</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h3 id=\"两栏布局\"><a href=\"#两栏布局\" class=\"headerlink\" title=\"两栏布局\"></a>两栏布局</h3><h4 id=\"示例-1-1\"><a href=\"#示例-1-1\" class=\"headerlink\" title=\"示例 1\"></a>示例 1</h4><p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"pBLbPz\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"两栏布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/pBLbPz/\" target=\"_blank\" rel=\"noopener\">\n  两栏布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例 2\"></a>示例 2</h4><p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"GLxqvB\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"两栏布局2\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/GLxqvB/\" target=\"_blank\" rel=\"noopener\">\n  两栏布局2</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h4 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例 3\"></a>示例 3</h4><p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"NmYrwm\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"两栏布局3\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/NmYrwm/\" target=\"_blank\" rel=\"noopener\">\n  两栏布局3</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h3 id=\"三栏布局\"><a href=\"#三栏布局\" class=\"headerlink\" title=\"三栏布局\"></a>三栏布局</h3><h4 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h4><p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html\" data-user=\"lwwtotod\" data-slug-hash=\"ROxGMa\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"双飞翼布局\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/ROxGMa/\" target=\"_blank\" rel=\"noopener\">\n  双飞翼布局</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h4 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h4><p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"lwwtotod\" data-slug-hash=\"YMaWJv\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"三栏布局2\">\n  <span>See the Pen <a href=\"https://codepen.io/lwwtotod/pen/YMaWJv/\" target=\"_blank\" rel=\"noopener\">\n  三栏布局2</a> by lwwtotod (<a href=\"https://codepen.io/lwwtotod\" target=\"_blank\" rel=\"noopener\">@lwwtotod</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n"},{"title":"javascript 实现栈","date":"2018-01-13T08:07:32.000Z","_content":"\n栈是一种遵从后进先出（LIFO）原则的有序集合。新添加的或待删除的元素都保存在栈的 末尾，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。\n\n在现实生活中也能发现很多栈的例子。例如，下图里的一摞书或者餐厅里堆放的盘子。\n\n我们将创建一个类来表示栈。让我们从基础开始，先声明这个类：\n\n```javascript\nfunction Stack() {\n  //各种属性和方法的声明\n  var items = []\n  //添加一个（或几个）新元素到栈顶\n  this.push = function(item) {\n    items.push(item)\n  }\n  //移除栈顶的元素，同时返回被移除的元素。\n  this.pop = function() {\n    return items.pop()\n  }\n  //返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返 回它）\n  this.peek = function() {\n    return items.length - 1\n  }\n  //如果栈里没有任何元素就返回true，否则返回false。\n  this.isEmpty = function() {\n    return items == []\n  }\n  //移除栈里的所有元素\n  this.clear = function() {\n    items = []\n  }\n  //返回栈里的元素个数。\n  this.size = function() {\n    return items.length\n  }\n  this.print = function() {\n    console.log(items.toString())\n  }\n}\n```\n\n使用刚刚声明的栈方法实现一个十进制数转二进制数的算法\n\n要把十进制转化成二进制，我们可以将该十进制数字和 2 整除（二进制是满二进一），直到结 果是 0 为止\n\n```JavaScript\nfunction divideBy2(decNumber){\n\n  var remStack = new Stack(),\n      rem,\n      binaryString ='';\n\n  while (decNumber >0 ){\n    rem = Math.floor(decNumber % 2);\n    remStack.push(rem);\n    decNumber = Math.floor(decNumber / 2)\n  }\n\n  while (!remStack.isEmpty()){\n    binaryString += remStack.pop().toString();\n  }\n\n  return binaryString\n}\n```\n\n我们很容易修改之前的算法，使之能把十进制转换成任何进制。除了让十进制数字和 2 整除 转成二进制数，还可以传入其他任意进制的基数为参数，就像下面算法这样：\n\n```JavaScript\nfunction baseConverter(decNumber,base){\n\n  var remStack = new Stack(),\n      rem,\n      baseString = '',\n      digits = '0123456789ABCDEF';\n\n  while (decNumber >0){\n    rem = Math.floor(decNumber % base);\n    remStack.push(rem);\n    decNumber = Math.floor(decNumber / base)\n  }\n\n  while (!remStack.isEmpty()){\n    baseString +=  digits[remStack.pop()];\n  }\n\n  return baseString;\n}\n```\n\n<script>\nexport default {\n  mounted () {\n    function Stack() {\n      //各种属性和方法的声明\n      var items = []\n      //添加一个（或几个）新元素到栈顶\n      this.push = function(item) {\n        items.push(item)\n      }\n      //移除栈顶的元素，同时返回被移除的元素。\n      this.pop = function() {\n        return items.pop()\n      }\n      //返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返 回它）\n      this.peek = function() {\n        return items.length - 1\n      }\n      //如果栈里没有任何元素就返回true，否则返回false。\n      this.isEmpty = function() {\n        return items == []\n      }\n      //移除栈里的所有元素\n      this.clear = function() {\n        items = []\n      }\n      //返回栈里的元素个数。\n      this.size = function() {\n        return items.length\n      }\n      this.print = function() {\n        console.log(items.toString())\n      }\n    }\n    function baseConverter(decNumber,base){\n        var remStack = new Stack(),\n            rem,\n            baseString = '',\n            digits = '0123456789ABCDEF';\n        \n        while (decNumber >0){\n          rem = Math.floor(decNumber % base);\n          remStack.push(rem);\n          decNumber = Math.floor(decNumber / base)\n        }\n\n        while (!remStack.isEmpty()){\n          baseString +=  digits[remStack.pop()]; \n        }\n        return baseString; \n    }\n    // console.log(baseConverter(1345, 2)) \n    // console.log(baseConverter(100345, 8)) \n    // console.log(baseConverter(100345, 16))\n  }\n}\n</script>\n","source":"_posts/JavaScript/javascript实现栈.md","raw":"---\ntitle: javascript 实现栈\ndate: 2018-01-13 16:07:32\ntags:\n  - JavaScript\n  - 算法\ncategory: 前端\n---\n\n栈是一种遵从后进先出（LIFO）原则的有序集合。新添加的或待删除的元素都保存在栈的 末尾，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。\n\n在现实生活中也能发现很多栈的例子。例如，下图里的一摞书或者餐厅里堆放的盘子。\n\n我们将创建一个类来表示栈。让我们从基础开始，先声明这个类：\n\n```javascript\nfunction Stack() {\n  //各种属性和方法的声明\n  var items = []\n  //添加一个（或几个）新元素到栈顶\n  this.push = function(item) {\n    items.push(item)\n  }\n  //移除栈顶的元素，同时返回被移除的元素。\n  this.pop = function() {\n    return items.pop()\n  }\n  //返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返 回它）\n  this.peek = function() {\n    return items.length - 1\n  }\n  //如果栈里没有任何元素就返回true，否则返回false。\n  this.isEmpty = function() {\n    return items == []\n  }\n  //移除栈里的所有元素\n  this.clear = function() {\n    items = []\n  }\n  //返回栈里的元素个数。\n  this.size = function() {\n    return items.length\n  }\n  this.print = function() {\n    console.log(items.toString())\n  }\n}\n```\n\n使用刚刚声明的栈方法实现一个十进制数转二进制数的算法\n\n要把十进制转化成二进制，我们可以将该十进制数字和 2 整除（二进制是满二进一），直到结 果是 0 为止\n\n```JavaScript\nfunction divideBy2(decNumber){\n\n  var remStack = new Stack(),\n      rem,\n      binaryString ='';\n\n  while (decNumber >0 ){\n    rem = Math.floor(decNumber % 2);\n    remStack.push(rem);\n    decNumber = Math.floor(decNumber / 2)\n  }\n\n  while (!remStack.isEmpty()){\n    binaryString += remStack.pop().toString();\n  }\n\n  return binaryString\n}\n```\n\n我们很容易修改之前的算法，使之能把十进制转换成任何进制。除了让十进制数字和 2 整除 转成二进制数，还可以传入其他任意进制的基数为参数，就像下面算法这样：\n\n```JavaScript\nfunction baseConverter(decNumber,base){\n\n  var remStack = new Stack(),\n      rem,\n      baseString = '',\n      digits = '0123456789ABCDEF';\n\n  while (decNumber >0){\n    rem = Math.floor(decNumber % base);\n    remStack.push(rem);\n    decNumber = Math.floor(decNumber / base)\n  }\n\n  while (!remStack.isEmpty()){\n    baseString +=  digits[remStack.pop()];\n  }\n\n  return baseString;\n}\n```\n\n<script>\nexport default {\n  mounted () {\n    function Stack() {\n      //各种属性和方法的声明\n      var items = []\n      //添加一个（或几个）新元素到栈顶\n      this.push = function(item) {\n        items.push(item)\n      }\n      //移除栈顶的元素，同时返回被移除的元素。\n      this.pop = function() {\n        return items.pop()\n      }\n      //返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返 回它）\n      this.peek = function() {\n        return items.length - 1\n      }\n      //如果栈里没有任何元素就返回true，否则返回false。\n      this.isEmpty = function() {\n        return items == []\n      }\n      //移除栈里的所有元素\n      this.clear = function() {\n        items = []\n      }\n      //返回栈里的元素个数。\n      this.size = function() {\n        return items.length\n      }\n      this.print = function() {\n        console.log(items.toString())\n      }\n    }\n    function baseConverter(decNumber,base){\n        var remStack = new Stack(),\n            rem,\n            baseString = '',\n            digits = '0123456789ABCDEF';\n        \n        while (decNumber >0){\n          rem = Math.floor(decNumber % base);\n          remStack.push(rem);\n          decNumber = Math.floor(decNumber / base)\n        }\n\n        while (!remStack.isEmpty()){\n          baseString +=  digits[remStack.pop()]; \n        }\n        return baseString; \n    }\n    // console.log(baseConverter(1345, 2)) \n    // console.log(baseConverter(100345, 8)) \n    // console.log(baseConverter(100345, 16))\n  }\n}\n</script>\n","slug":"JavaScript/javascript实现栈","published":1,"updated":"2019-04-16T03:35:30.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctcb000c2e47owrtj88t","content":"<p>栈是一种遵从后进先出（LIFO）原则的有序集合。新添加的或待删除的元素都保存在栈的 末尾，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。</p>\n<p>在现实生活中也能发现很多栈的例子。例如，下图里的一摞书或者餐厅里堆放的盘子。</p>\n<p>我们将创建一个类来表示栈。让我们从基础开始，先声明这个类：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stack</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//各种属性和方法的声明</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> items = []</span><br><span class=\"line\">  <span class=\"comment\">//添加一个（或几个）新元素到栈顶</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.push = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    items.push(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//移除栈顶的元素，同时返回被移除的元素。</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.pop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items.pop()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返 回它）</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.peek = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items.length - <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//如果栈里没有任何元素就返回true，否则返回false。</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isEmpty = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items == []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//移除栈里的所有元素</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    items = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//返回栈里的元素个数。</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.print = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(items.toString())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用刚刚声明的栈方法实现一个十进制数转二进制数的算法</p>\n<p>要把十进制转化成二进制，我们可以将该十进制数字和 2 整除（二进制是满二进一），直到结 果是 0 为止</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">divideBy2</span>(<span class=\"params\">decNumber</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> remStack = <span class=\"keyword\">new</span> Stack(),</span><br><span class=\"line\">      rem,</span><br><span class=\"line\">      binaryString =<span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (decNumber &gt;<span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">    rem = <span class=\"built_in\">Math</span>.floor(decNumber % <span class=\"number\">2</span>);</span><br><span class=\"line\">    remStack.push(rem);</span><br><span class=\"line\">    decNumber = <span class=\"built_in\">Math</span>.floor(decNumber / <span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!remStack.isEmpty())&#123;</span><br><span class=\"line\">    binaryString += remStack.pop().toString();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> binaryString</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们很容易修改之前的算法，使之能把十进制转换成任何进制。除了让十进制数字和 2 整除 转成二进制数，还可以传入其他任意进制的基数为参数，就像下面算法这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baseConverter</span>(<span class=\"params\">decNumber,base</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> remStack = <span class=\"keyword\">new</span> Stack(),</span><br><span class=\"line\">      rem,</span><br><span class=\"line\">      baseString = <span class=\"string\">''</span>,</span><br><span class=\"line\">      digits = <span class=\"string\">'0123456789ABCDEF'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (decNumber &gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    rem = <span class=\"built_in\">Math</span>.floor(decNumber % base);</span><br><span class=\"line\">    remStack.push(rem);</span><br><span class=\"line\">    decNumber = <span class=\"built_in\">Math</span>.floor(decNumber / base)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!remStack.isEmpty())&#123;</span><br><span class=\"line\">    baseString +=  digits[remStack.pop()];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> baseString;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<script>\nexport default {\n  mounted () {\n    function Stack() {\n      //各种属性和方法的声明\n      var items = []\n      //添加一个（或几个）新元素到栈顶\n      this.push = function(item) {\n        items.push(item)\n      }\n      //移除栈顶的元素，同时返回被移除的元素。\n      this.pop = function() {\n        return items.pop()\n      }\n      //返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返 回它）\n      this.peek = function() {\n        return items.length - 1\n      }\n      //如果栈里没有任何元素就返回true，否则返回false。\n      this.isEmpty = function() {\n        return items == []\n      }\n      //移除栈里的所有元素\n      this.clear = function() {\n        items = []\n      }\n      //返回栈里的元素个数。\n      this.size = function() {\n        return items.length\n      }\n      this.print = function() {\n        console.log(items.toString())\n      }\n    }\n    function baseConverter(decNumber,base){\n        var remStack = new Stack(),\n            rem,\n            baseString = '',\n            digits = '0123456789ABCDEF';\n\n        while (decNumber >0){\n          rem = Math.floor(decNumber % base);\n          remStack.push(rem);\n          decNumber = Math.floor(decNumber / base)\n        }\n\n        while (!remStack.isEmpty()){\n          baseString +=  digits[remStack.pop()]; \n        }\n        return baseString; \n    }\n    // console.log(baseConverter(1345, 2)) \n    // console.log(baseConverter(100345, 8)) \n    // console.log(baseConverter(100345, 16))\n  }\n}\n</script>\n","site":{"data":{}},"excerpt":"","more":"<p>栈是一种遵从后进先出（LIFO）原则的有序集合。新添加的或待删除的元素都保存在栈的 末尾，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。</p>\n<p>在现实生活中也能发现很多栈的例子。例如，下图里的一摞书或者餐厅里堆放的盘子。</p>\n<p>我们将创建一个类来表示栈。让我们从基础开始，先声明这个类：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stack</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//各种属性和方法的声明</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> items = []</span><br><span class=\"line\">  <span class=\"comment\">//添加一个（或几个）新元素到栈顶</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.push = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    items.push(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//移除栈顶的元素，同时返回被移除的元素。</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.pop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items.pop()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返 回它）</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.peek = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items.length - <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//如果栈里没有任何元素就返回true，否则返回false。</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isEmpty = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items == []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//移除栈里的所有元素</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    items = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//返回栈里的元素个数。</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.print = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(items.toString())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用刚刚声明的栈方法实现一个十进制数转二进制数的算法</p>\n<p>要把十进制转化成二进制，我们可以将该十进制数字和 2 整除（二进制是满二进一），直到结 果是 0 为止</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">divideBy2</span>(<span class=\"params\">decNumber</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> remStack = <span class=\"keyword\">new</span> Stack(),</span><br><span class=\"line\">      rem,</span><br><span class=\"line\">      binaryString =<span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (decNumber &gt;<span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">    rem = <span class=\"built_in\">Math</span>.floor(decNumber % <span class=\"number\">2</span>);</span><br><span class=\"line\">    remStack.push(rem);</span><br><span class=\"line\">    decNumber = <span class=\"built_in\">Math</span>.floor(decNumber / <span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!remStack.isEmpty())&#123;</span><br><span class=\"line\">    binaryString += remStack.pop().toString();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> binaryString</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们很容易修改之前的算法，使之能把十进制转换成任何进制。除了让十进制数字和 2 整除 转成二进制数，还可以传入其他任意进制的基数为参数，就像下面算法这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baseConverter</span>(<span class=\"params\">decNumber,base</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> remStack = <span class=\"keyword\">new</span> Stack(),</span><br><span class=\"line\">      rem,</span><br><span class=\"line\">      baseString = <span class=\"string\">''</span>,</span><br><span class=\"line\">      digits = <span class=\"string\">'0123456789ABCDEF'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (decNumber &gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    rem = <span class=\"built_in\">Math</span>.floor(decNumber % base);</span><br><span class=\"line\">    remStack.push(rem);</span><br><span class=\"line\">    decNumber = <span class=\"built_in\">Math</span>.floor(decNumber / base)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!remStack.isEmpty())&#123;</span><br><span class=\"line\">    baseString +=  digits[remStack.pop()];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> baseString;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<script>\nexport default {\n  mounted () {\n    function Stack() {\n      //各种属性和方法的声明\n      var items = []\n      //添加一个（或几个）新元素到栈顶\n      this.push = function(item) {\n        items.push(item)\n      }\n      //移除栈顶的元素，同时返回被移除的元素。\n      this.pop = function() {\n        return items.pop()\n      }\n      //返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返 回它）\n      this.peek = function() {\n        return items.length - 1\n      }\n      //如果栈里没有任何元素就返回true，否则返回false。\n      this.isEmpty = function() {\n        return items == []\n      }\n      //移除栈里的所有元素\n      this.clear = function() {\n        items = []\n      }\n      //返回栈里的元素个数。\n      this.size = function() {\n        return items.length\n      }\n      this.print = function() {\n        console.log(items.toString())\n      }\n    }\n    function baseConverter(decNumber,base){\n        var remStack = new Stack(),\n            rem,\n            baseString = '',\n            digits = '0123456789ABCDEF';\n\n        while (decNumber >0){\n          rem = Math.floor(decNumber % base);\n          remStack.push(rem);\n          decNumber = Math.floor(decNumber / base)\n        }\n\n        while (!remStack.isEmpty()){\n          baseString +=  digits[remStack.pop()]; \n        }\n        return baseString; \n    }\n    // console.log(baseConverter(1345, 2)) \n    // console.log(baseConverter(100345, 8)) \n    // console.log(baseConverter(100345, 16))\n  }\n}\n</script>\n"},{"title":"javascript 实现字典散列表","date":"2018-01-13T08:07:32.000Z","_content":"\n你已经知道，集合表示一组互不相同的元素（不重复的元素）。在字典中，存储的是[键，值] 对，其中键名是用来查询特定元素的。字典和集合很相似，集合以[值，值]的形式存储元素，字 典则是以[键，值]的形式来存储元素。字典也称作映射。\n\n将要实现的类就是以 ECMAScript 6 中 Map 类的实现为基础的。你会发现它和 Set 类很相似（但不同于存储[值，值]对的形式，我们将要存储的是[键，值]对）。\n\n```javascript\nfunction Dictionary() {\n  var items = {}\n\n  this.has = function(key) {\n    return key in items\n  }\n  this.set = function(key, value) {\n    items[key] = value\n  }\n  this.remove = function() {\n    if (this.has(key)) {\n      delete items[key]\n      return true\n    }\n    return false\n  }\n  this.get = function(key) {\n    return this.has(key) ? items[key] : nuderfined\n  }\n  this.values = function() {\n    var values = []\n    for (var k in items) {\n      if (this.has(k)) {\n        values.push(items[k])\n      }\n    }\n    return values\n  }\n  this.clear = function() {\n    items = {}\n  }\n  this.size = function() {\n    return Object.keys(items).length\n  }\n  this.keys = function() {\n    return Object.keys(items)\n  }\n  this.getItems = function() {\n    return items\n  }\n}\nvar dictionary = new Dictionary()\n```\n\n```javascript\n// var loseloseHashCode = function(key) {\n//   var hash = 0\n//   for (var i = 0; i < key.length; i++) {\n//     hash += key.charCodeAt(i)\n//   }\n//   return hash % 37\n// }\nvar loseloseHashCode = function(key) {\n  var hash = 5381\n  for (var i = 0; i < key.length; i++) {\n    hash = hash * 33 + key.charCodeAt(i)\n  }\n  return hash % 1013\n}\nfunction HashTable() {\n  var table = []\n  this.put = function(key, value) {\n    var position = loseloseHashCode(key)\n    console.log(position + '-' + key)\n    table[position] = value\n  }\n  this.get = function(key) {\n    return table[loseloseHashCode(key)]\n  }\n  this.remove = function(key) {\n    table[loseloseHashCode(key)] = undefined\n  }\n}\nvar hash = new HashTable()\nhash.put('Gandalf', 'gandalf@email.com')\nhash.put('John', 'johnsnow@email.com')\nhash.put('Tyrion', 'tyrion@email.com')\nconsole.log(hash.get('Gandalf'))\nconsole.log(hash.get('Loiane'))\nhash.remove('Gandalf')\nconsole.log(hash.get('Gandalf'))\n```\n","source":"_posts/JavaScript/javascript实现字典散列表.md","raw":"---\ntitle: javascript 实现字典散列表\ndate: 2018-01-13 16:07:32\ntags:\n  - JavaScript\n  - 算法\ncategory: 前端\n---\n\n你已经知道，集合表示一组互不相同的元素（不重复的元素）。在字典中，存储的是[键，值] 对，其中键名是用来查询特定元素的。字典和集合很相似，集合以[值，值]的形式存储元素，字 典则是以[键，值]的形式来存储元素。字典也称作映射。\n\n将要实现的类就是以 ECMAScript 6 中 Map 类的实现为基础的。你会发现它和 Set 类很相似（但不同于存储[值，值]对的形式，我们将要存储的是[键，值]对）。\n\n```javascript\nfunction Dictionary() {\n  var items = {}\n\n  this.has = function(key) {\n    return key in items\n  }\n  this.set = function(key, value) {\n    items[key] = value\n  }\n  this.remove = function() {\n    if (this.has(key)) {\n      delete items[key]\n      return true\n    }\n    return false\n  }\n  this.get = function(key) {\n    return this.has(key) ? items[key] : nuderfined\n  }\n  this.values = function() {\n    var values = []\n    for (var k in items) {\n      if (this.has(k)) {\n        values.push(items[k])\n      }\n    }\n    return values\n  }\n  this.clear = function() {\n    items = {}\n  }\n  this.size = function() {\n    return Object.keys(items).length\n  }\n  this.keys = function() {\n    return Object.keys(items)\n  }\n  this.getItems = function() {\n    return items\n  }\n}\nvar dictionary = new Dictionary()\n```\n\n```javascript\n// var loseloseHashCode = function(key) {\n//   var hash = 0\n//   for (var i = 0; i < key.length; i++) {\n//     hash += key.charCodeAt(i)\n//   }\n//   return hash % 37\n// }\nvar loseloseHashCode = function(key) {\n  var hash = 5381\n  for (var i = 0; i < key.length; i++) {\n    hash = hash * 33 + key.charCodeAt(i)\n  }\n  return hash % 1013\n}\nfunction HashTable() {\n  var table = []\n  this.put = function(key, value) {\n    var position = loseloseHashCode(key)\n    console.log(position + '-' + key)\n    table[position] = value\n  }\n  this.get = function(key) {\n    return table[loseloseHashCode(key)]\n  }\n  this.remove = function(key) {\n    table[loseloseHashCode(key)] = undefined\n  }\n}\nvar hash = new HashTable()\nhash.put('Gandalf', 'gandalf@email.com')\nhash.put('John', 'johnsnow@email.com')\nhash.put('Tyrion', 'tyrion@email.com')\nconsole.log(hash.get('Gandalf'))\nconsole.log(hash.get('Loiane'))\nhash.remove('Gandalf')\nconsole.log(hash.get('Gandalf'))\n```\n","slug":"JavaScript/javascript实现字典散列表","published":1,"updated":"2019-04-16T03:35:26.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctce000g2e47esg66pqd","content":"<p>你已经知道，集合表示一组互不相同的元素（不重复的元素）。在字典中，存储的是[键，值] 对，其中键名是用来查询特定元素的。字典和集合很相似，集合以[值，值]的形式存储元素，字 典则是以[键，值]的形式来存储元素。字典也称作映射。</p>\n<p>将要实现的类就是以 ECMAScript 6 中 Map 类的实现为基础的。你会发现它和 Set 类很相似（但不同于存储[值，值]对的形式，我们将要存储的是[键，值]对）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dictionary</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> items = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> items</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.set = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">    items[key] = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> items[key]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.has(key) ? items[key] : nuderfined</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.values = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> values = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> items) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(k)) &#123;</span><br><span class=\"line\">        values.push(items[k])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> values</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    items = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(items).length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.keys = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(items)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getItems = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dictionary = <span class=\"keyword\">new</span> Dictionary()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var loseloseHashCode = function(key) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   var hash = 0</span></span><br><span class=\"line\"><span class=\"comment\">//   for (var i = 0; i &lt; key.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     hash += key.charCodeAt(i)</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//   return hash % 37</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> loseloseHashCode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hash = <span class=\"number\">5381</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; key.length; i++) &#123;</span><br><span class=\"line\">    hash = hash * <span class=\"number\">33</span> + key.charCodeAt(i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> hash % <span class=\"number\">1013</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HashTable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> table = []</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.put = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> position = loseloseHashCode(key)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(position + <span class=\"string\">'-'</span> + key)</span><br><span class=\"line\">    table[position] = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> table[loseloseHashCode(key)]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    table[loseloseHashCode(key)] = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hash = <span class=\"keyword\">new</span> HashTable()</span><br><span class=\"line\">hash.put(<span class=\"string\">'Gandalf'</span>, <span class=\"string\">'gandalf@email.com'</span>)</span><br><span class=\"line\">hash.put(<span class=\"string\">'John'</span>, <span class=\"string\">'johnsnow@email.com'</span>)</span><br><span class=\"line\">hash.put(<span class=\"string\">'Tyrion'</span>, <span class=\"string\">'tyrion@email.com'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hash.get(<span class=\"string\">'Gandalf'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hash.get(<span class=\"string\">'Loiane'</span>))</span><br><span class=\"line\">hash.remove(<span class=\"string\">'Gandalf'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hash.get(<span class=\"string\">'Gandalf'</span>))</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>你已经知道，集合表示一组互不相同的元素（不重复的元素）。在字典中，存储的是[键，值] 对，其中键名是用来查询特定元素的。字典和集合很相似，集合以[值，值]的形式存储元素，字 典则是以[键，值]的形式来存储元素。字典也称作映射。</p>\n<p>将要实现的类就是以 ECMAScript 6 中 Map 类的实现为基础的。你会发现它和 Set 类很相似（但不同于存储[值，值]对的形式，我们将要存储的是[键，值]对）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dictionary</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> items = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> items</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.set = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">    items[key] = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> items[key]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.has(key) ? items[key] : nuderfined</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.values = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> values = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> items) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(k)) &#123;</span><br><span class=\"line\">        values.push(items[k])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> values</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    items = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(items).length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.keys = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(items)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getItems = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dictionary = <span class=\"keyword\">new</span> Dictionary()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var loseloseHashCode = function(key) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   var hash = 0</span></span><br><span class=\"line\"><span class=\"comment\">//   for (var i = 0; i &lt; key.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     hash += key.charCodeAt(i)</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//   return hash % 37</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> loseloseHashCode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hash = <span class=\"number\">5381</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; key.length; i++) &#123;</span><br><span class=\"line\">    hash = hash * <span class=\"number\">33</span> + key.charCodeAt(i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> hash % <span class=\"number\">1013</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HashTable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> table = []</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.put = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> position = loseloseHashCode(key)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(position + <span class=\"string\">'-'</span> + key)</span><br><span class=\"line\">    table[position] = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> table[loseloseHashCode(key)]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    table[loseloseHashCode(key)] = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hash = <span class=\"keyword\">new</span> HashTable()</span><br><span class=\"line\">hash.put(<span class=\"string\">'Gandalf'</span>, <span class=\"string\">'gandalf@email.com'</span>)</span><br><span class=\"line\">hash.put(<span class=\"string\">'John'</span>, <span class=\"string\">'johnsnow@email.com'</span>)</span><br><span class=\"line\">hash.put(<span class=\"string\">'Tyrion'</span>, <span class=\"string\">'tyrion@email.com'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hash.get(<span class=\"string\">'Gandalf'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hash.get(<span class=\"string\">'Loiane'</span>))</span><br><span class=\"line\">hash.remove(<span class=\"string\">'Gandalf'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hash.get(<span class=\"string\">'Gandalf'</span>))</span><br></pre></td></tr></table></figure>\n\n"},{"title":"JavaScript 实现排序算法","date":"2018-01-13T08:07:32.000Z","_content":"\n#### 冒泡排序\n\n冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换它们两个；\n2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；\n3. 针对所有的元素重复以上的步骤，除了最后一个；\n4. 重复步骤 1~3，直到排序完成。\n   > 冒泡排序\n\n```javascript\nvar bubbleSort = function(arr) {\n  var i, j, m, noswap\n  var len = arr.length\n  if (len <= 1) {\n    return\n  }\n  console.time('冒泡排序耗时')\n  for (i = 0; i < len; i++) {\n    noswap = true\n    for (j = 0; j < len - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        m = arr[j]\n        arr[j] = arr[j + 1]\n        arr[j + 1] = m\n        noswap = false\n      }\n    }\n    if (noswap) {\n      break\n    }\n  }\n  console.timeEnd('冒泡排序耗时')\n  return arr\n}\n\nconsole.log(bubbleSort([2, 3, 4, 5, 1, 2, 23, 4, 5, 6, 79]))\n```\n\n#### 选择排序\n\n选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。\n\n> 选择排序\n\n```javascript\nfunction selectionSort(arr) {\n  var len = arr.length\n  var minIndex, temp\n  console.time('选择排序耗时')\n  for (var i = 0; i < len - 1; i++) {\n    minIndex = i\n    for (var j = i + 1; j < len; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j\n      }\n    }\n    temp = arr[i]\n    arr[i] = arr[minIndex]\n    arr[minIndex] = temp\n  }\n  console.timeEnd('选择排序耗时')\n  return arr\n}\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\nconsole.log(selectionSort(arr)) //[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n```\n\n#### 插入排序\n\n插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 in-place 排序（即只需用到 O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。\n\n1. 从第一个元素开始，该元素可以认为已经被排序；\n2. 取出下一个元素，在已经排序的元素序列中从后向前扫描；\n3. 如果该元素（已排序）大于新元素，将该元素移到下一位置；\n4. 重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；\n5. 将新元素插入到该位置后；\n6. 重复步骤 2~5。\n\n> 插入排序\n\n```javascript\nfunction insertionSort(arr) {\n  var len = arr.length\n  console.time('插入排序耗时')\n  for (var i = 1; i < len; i++) {\n    var key = arr[i]\n    var j = i - 1\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j]\n      j--\n    }\n    arr[j + 1] = key\n  }\n  console.timeEnd('插入排序耗时')\n  return arr\n}\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\nconsole.log(insertionSort(arr))\n```\n\n#### 快速排序\n\n排序算法（Sorting algorithm）是计算机科学最古老、最基本的课题之一。要想成为合格的程序员，就必须理解和掌握各种排序算法。\n\n目前，最常见的排序算法大概有七八种，其中\"快速排序\"（Quicksort）使用得最广泛，速度也较快。它是图灵奖得主 C. A. R. Hoare（1934--）于 1960 时提出来的。\n\n1. 在数据集之中，选择一个元素作为\"基准\"（pivot）。\n2. 所有小于\"基准\"的元素，都移到\"基准\"的左边；所有大于\"基准\"的元素，都移到\"基准\"的右边。\n3. 对\"基准\"左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。\n\n> 快速排序\n\n```javascript\nvar quickSort = function(arr) {\n  if (arr.length <= 1) {\n    return arr\n  }\n  var pivotIndex = Math.floor(arr.length / 2)\n  var pivot = arr.splice(pivotIndex, 1)[0]\n  var left = []\n  var right = []\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] < pivot) {\n      left.push(arr[i])\n    } else {\n      right.push(arr[i])\n    }\n  }\n  return quickSort(left).concat([pivot], quickSort(right))\n}\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\nconsole.log(quickSort(arr))\n```\n\n<script>\nexport default {\n  method:{\n\n  },\n  mounted () {\n    console.log(`运行:`)\n    console.log(`var quickSort = function (arr) {\n      if (arr.length <= 1) {\n        return arr\n      }\n      var pivotIndex = Math.floor(arr.length / 2)\n      var pivot = arr.splice(pivotIndex, 1)[0]\n      var left = []\n      var right = []\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n          left.push(arr[i])\n        } else {\n          right.push(arr[i])\n        }\n      }\n      return quickSort(left).concat([pivot], quickSort(right))\n    }\n    var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\n    console.log(quickSort(arr))\n    `)\n    var quickSort = function (arr) {\n      if (arr.length <= 1) {\n        return arr\n      }\n      var pivotIndex = Math.floor(arr.length / 2)\n      var pivot = arr.splice(pivotIndex, 1)[0]\n      var left = []\n      var right = []\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n          left.push(arr[i])\n        } else {\n          right.push(arr[i])\n        }\n      }\n      return quickSort(left).concat([pivot], quickSort(right))\n    }\n    var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\n\n    console.log(`输出:`)\n    console.log(quickSort(arr))\n  }\n}\n</script>\n","source":"_posts/JavaScript/javascript实现排序算法.md","raw":"---\ntitle: JavaScript 实现排序算法\ndate: 2018-01-13 16:07:32\ntags:\n  - JavaScript\n  - 算法\ncategory: 前端\n---\n\n#### 冒泡排序\n\n冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换它们两个；\n2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；\n3. 针对所有的元素重复以上的步骤，除了最后一个；\n4. 重复步骤 1~3，直到排序完成。\n   > 冒泡排序\n\n```javascript\nvar bubbleSort = function(arr) {\n  var i, j, m, noswap\n  var len = arr.length\n  if (len <= 1) {\n    return\n  }\n  console.time('冒泡排序耗时')\n  for (i = 0; i < len; i++) {\n    noswap = true\n    for (j = 0; j < len - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        m = arr[j]\n        arr[j] = arr[j + 1]\n        arr[j + 1] = m\n        noswap = false\n      }\n    }\n    if (noswap) {\n      break\n    }\n  }\n  console.timeEnd('冒泡排序耗时')\n  return arr\n}\n\nconsole.log(bubbleSort([2, 3, 4, 5, 1, 2, 23, 4, 5, 6, 79]))\n```\n\n#### 选择排序\n\n选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。\n\n> 选择排序\n\n```javascript\nfunction selectionSort(arr) {\n  var len = arr.length\n  var minIndex, temp\n  console.time('选择排序耗时')\n  for (var i = 0; i < len - 1; i++) {\n    minIndex = i\n    for (var j = i + 1; j < len; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j\n      }\n    }\n    temp = arr[i]\n    arr[i] = arr[minIndex]\n    arr[minIndex] = temp\n  }\n  console.timeEnd('选择排序耗时')\n  return arr\n}\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\nconsole.log(selectionSort(arr)) //[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n```\n\n#### 插入排序\n\n插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 in-place 排序（即只需用到 O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。\n\n1. 从第一个元素开始，该元素可以认为已经被排序；\n2. 取出下一个元素，在已经排序的元素序列中从后向前扫描；\n3. 如果该元素（已排序）大于新元素，将该元素移到下一位置；\n4. 重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；\n5. 将新元素插入到该位置后；\n6. 重复步骤 2~5。\n\n> 插入排序\n\n```javascript\nfunction insertionSort(arr) {\n  var len = arr.length\n  console.time('插入排序耗时')\n  for (var i = 1; i < len; i++) {\n    var key = arr[i]\n    var j = i - 1\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j]\n      j--\n    }\n    arr[j + 1] = key\n  }\n  console.timeEnd('插入排序耗时')\n  return arr\n}\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\nconsole.log(insertionSort(arr))\n```\n\n#### 快速排序\n\n排序算法（Sorting algorithm）是计算机科学最古老、最基本的课题之一。要想成为合格的程序员，就必须理解和掌握各种排序算法。\n\n目前，最常见的排序算法大概有七八种，其中\"快速排序\"（Quicksort）使用得最广泛，速度也较快。它是图灵奖得主 C. A. R. Hoare（1934--）于 1960 时提出来的。\n\n1. 在数据集之中，选择一个元素作为\"基准\"（pivot）。\n2. 所有小于\"基准\"的元素，都移到\"基准\"的左边；所有大于\"基准\"的元素，都移到\"基准\"的右边。\n3. 对\"基准\"左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。\n\n> 快速排序\n\n```javascript\nvar quickSort = function(arr) {\n  if (arr.length <= 1) {\n    return arr\n  }\n  var pivotIndex = Math.floor(arr.length / 2)\n  var pivot = arr.splice(pivotIndex, 1)[0]\n  var left = []\n  var right = []\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] < pivot) {\n      left.push(arr[i])\n    } else {\n      right.push(arr[i])\n    }\n  }\n  return quickSort(left).concat([pivot], quickSort(right))\n}\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\nconsole.log(quickSort(arr))\n```\n\n<script>\nexport default {\n  method:{\n\n  },\n  mounted () {\n    console.log(`运行:`)\n    console.log(`var quickSort = function (arr) {\n      if (arr.length <= 1) {\n        return arr\n      }\n      var pivotIndex = Math.floor(arr.length / 2)\n      var pivot = arr.splice(pivotIndex, 1)[0]\n      var left = []\n      var right = []\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n          left.push(arr[i])\n        } else {\n          right.push(arr[i])\n        }\n      }\n      return quickSort(left).concat([pivot], quickSort(right))\n    }\n    var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\n    console.log(quickSort(arr))\n    `)\n    var quickSort = function (arr) {\n      if (arr.length <= 1) {\n        return arr\n      }\n      var pivotIndex = Math.floor(arr.length / 2)\n      var pivot = arr.splice(pivotIndex, 1)[0]\n      var left = []\n      var right = []\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n          left.push(arr[i])\n        } else {\n          right.push(arr[i])\n        }\n      }\n      return quickSort(left).concat([pivot], quickSort(right))\n    }\n    var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\n\n    console.log(`输出:`)\n    console.log(quickSort(arr))\n  }\n}\n</script>\n","slug":"JavaScript/javascript实现排序算法","published":1,"updated":"2019-04-16T03:35:28.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctcg000j2e47jz2uccz4","content":"<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个；</li>\n<li>重复步骤 1~3，直到排序完成。<blockquote>\n<p>冒泡排序</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bubbleSort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i, j, m, noswap</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.length</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.time(<span class=\"string\">'冒泡排序耗时'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    noswap = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; len - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        m = arr[j]</span><br><span class=\"line\">        arr[j] = arr[j + <span class=\"number\">1</span>]</span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = m</span><br><span class=\"line\">        noswap = <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (noswap) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'冒泡排序耗时'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bubbleSort([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">79</span>]))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h4><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>\n<blockquote>\n<p>选择排序</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.length</span><br><span class=\"line\">  <span class=\"keyword\">var</span> minIndex, temp</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.time(<span class=\"string\">'选择排序耗时'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    minIndex = i</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class=\"line\">        minIndex = j</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp = arr[i]</span><br><span class=\"line\">    arr[i] = arr[minIndex]</span><br><span class=\"line\">    arr[minIndex] = temp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'选择排序耗时'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(selectionSort(arr)) <span class=\"comment\">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h4><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 in-place 排序（即只需用到 O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>\n<ol>\n<li>从第一个元素开始，该元素可以认为已经被排序；</li>\n<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>\n<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>\n<li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；</li>\n<li>将新元素插入到该位置后；</li>\n<li>重复步骤 2~5。</li>\n</ol>\n<blockquote>\n<p>插入排序</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.length</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.time(<span class=\"string\">'插入排序耗时'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = arr[i]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j = i - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class=\"line\">      arr[j + <span class=\"number\">1</span>] = arr[j]</span><br><span class=\"line\">      j--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[j + <span class=\"number\">1</span>] = key</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'插入排序耗时'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(insertionSort(arr))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><p>排序算法（Sorting algorithm）是计算机科学最古老、最基本的课题之一。要想成为合格的程序员，就必须理解和掌握各种排序算法。</p>\n<p>目前，最常见的排序算法大概有七八种，其中”快速排序”（Quicksort）使用得最广泛，速度也较快。它是图灵奖得主 C. A. R. Hoare（1934–）于 1960 时提出来的。</p>\n<ol>\n<li>在数据集之中，选择一个元素作为”基准”（pivot）。</li>\n<li>所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。</li>\n<li>对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</li>\n</ol>\n<blockquote>\n<p>快速排序</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> quickSort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pivotIndex = <span class=\"built_in\">Math</span>.floor(arr.length / <span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pivot = arr.splice(pivotIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">var</span> left = []</span><br><span class=\"line\">  <span class=\"keyword\">var</span> right = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class=\"line\">      left.push(arr[i])</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      right.push(arr[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quickSort(left).concat([pivot], quickSort(right))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(quickSort(arr))</span><br></pre></td></tr></table></figure>\n\n<script>\nexport default {\n  method:{\n\n  },\n  mounted () {\n    console.log(`运行:`)\n    console.log(`var quickSort = function (arr) {\n      if (arr.length <= 1) {\n        return arr\n      }\n      var pivotIndex = Math.floor(arr.length / 2)\n      var pivot = arr.splice(pivotIndex, 1)[0]\n      var left = []\n      var right = []\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n          left.push(arr[i])\n        } else {\n          right.push(arr[i])\n        }\n      }\n      return quickSort(left).concat([pivot], quickSort(right))\n    }\n    var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\n    console.log(quickSort(arr))\n    `)\n    var quickSort = function (arr) {\n      if (arr.length <= 1) {\n        return arr\n      }\n      var pivotIndex = Math.floor(arr.length / 2)\n      var pivot = arr.splice(pivotIndex, 1)[0]\n      var left = []\n      var right = []\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n          left.push(arr[i])\n        } else {\n          right.push(arr[i])\n        }\n      }\n      return quickSort(left).concat([pivot], quickSort(right))\n    }\n    var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\n\n    console.log(`输出:`)\n    console.log(quickSort(arr))\n  }\n}\n</script>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个；</li>\n<li>重复步骤 1~3，直到排序完成。<blockquote>\n<p>冒泡排序</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bubbleSort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i, j, m, noswap</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.length</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.time(<span class=\"string\">'冒泡排序耗时'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    noswap = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; len - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        m = arr[j]</span><br><span class=\"line\">        arr[j] = arr[j + <span class=\"number\">1</span>]</span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = m</span><br><span class=\"line\">        noswap = <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (noswap) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'冒泡排序耗时'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bubbleSort([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">79</span>]))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h4><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>\n<blockquote>\n<p>选择排序</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.length</span><br><span class=\"line\">  <span class=\"keyword\">var</span> minIndex, temp</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.time(<span class=\"string\">'选择排序耗时'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    minIndex = i</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class=\"line\">        minIndex = j</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp = arr[i]</span><br><span class=\"line\">    arr[i] = arr[minIndex]</span><br><span class=\"line\">    arr[minIndex] = temp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'选择排序耗时'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(selectionSort(arr)) <span class=\"comment\">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h4><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 in-place 排序（即只需用到 O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>\n<ol>\n<li>从第一个元素开始，该元素可以认为已经被排序；</li>\n<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>\n<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>\n<li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；</li>\n<li>将新元素插入到该位置后；</li>\n<li>重复步骤 2~5。</li>\n</ol>\n<blockquote>\n<p>插入排序</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.length</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.time(<span class=\"string\">'插入排序耗时'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = arr[i]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j = i - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class=\"line\">      arr[j + <span class=\"number\">1</span>] = arr[j]</span><br><span class=\"line\">      j--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[j + <span class=\"number\">1</span>] = key</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'插入排序耗时'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(insertionSort(arr))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><p>排序算法（Sorting algorithm）是计算机科学最古老、最基本的课题之一。要想成为合格的程序员，就必须理解和掌握各种排序算法。</p>\n<p>目前，最常见的排序算法大概有七八种，其中”快速排序”（Quicksort）使用得最广泛，速度也较快。它是图灵奖得主 C. A. R. Hoare（1934–）于 1960 时提出来的。</p>\n<ol>\n<li>在数据集之中，选择一个元素作为”基准”（pivot）。</li>\n<li>所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。</li>\n<li>对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</li>\n</ol>\n<blockquote>\n<p>快速排序</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> quickSort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pivotIndex = <span class=\"built_in\">Math</span>.floor(arr.length / <span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pivot = arr.splice(pivotIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">var</span> left = []</span><br><span class=\"line\">  <span class=\"keyword\">var</span> right = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class=\"line\">      left.push(arr[i])</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      right.push(arr[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quickSort(left).concat([pivot], quickSort(right))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(quickSort(arr))</span><br></pre></td></tr></table></figure>\n\n<script>\nexport default {\n  method:{\n\n  },\n  mounted () {\n    console.log(`运行:`)\n    console.log(`var quickSort = function (arr) {\n      if (arr.length <= 1) {\n        return arr\n      }\n      var pivotIndex = Math.floor(arr.length / 2)\n      var pivot = arr.splice(pivotIndex, 1)[0]\n      var left = []\n      var right = []\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n          left.push(arr[i])\n        } else {\n          right.push(arr[i])\n        }\n      }\n      return quickSort(left).concat([pivot], quickSort(right))\n    }\n    var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\n    console.log(quickSort(arr))\n    `)\n    var quickSort = function (arr) {\n      if (arr.length <= 1) {\n        return arr\n      }\n      var pivotIndex = Math.floor(arr.length / 2)\n      var pivot = arr.splice(pivotIndex, 1)[0]\n      var left = []\n      var right = []\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n          left.push(arr[i])\n        } else {\n          right.push(arr[i])\n        }\n      }\n      return quickSort(left).concat([pivot], quickSort(right))\n    }\n    var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\n\n    console.log(`输出:`)\n    console.log(quickSort(arr))\n  }\n}\n</script>\n"},{"title":"javascript 实现图","date":"2018-01-13T08:07:32.000Z","_content":"\n由一条边连接在一起的顶点称为相邻顶点。比如，A 和 B 是相邻的，A 和 D 是相邻的，A 和 C 是相邻的，A 和 E 不是相邻的。\n一个顶点的度是其相邻顶点的数量。比如，A 和其他三个顶点相连接，因此，A 的度为 3；E 和其他两个顶点相连，因此，E 的度为 2。 路径是顶点 v1, v2,…,vk 的一个连续序列，其中 vi 和 vi+1 是相邻的。以上一示意图中的图为例， 其中包含路径 A B E I 和 A C D G。\n简单路径要求不包含重复的顶点。举个例子，A D G 是一条简单路径。除去最后一个顶点（因 为它和第一个顶点是同一个顶点），环也是一个简单路径，比如 A D C A（最后一个顶点重新回到 A）。\n\n### 有向图\n\n如果图中不存在环，则称该图是无环的。如果图中每两个顶点间都存在路径，则该图是连通的。\n\n![图](http://or2vgb0pq.bkt.clouddn.com//18-10-29/45067468.jpg)\n\n图还可以是未加权的（目前为止我们看到的图都是未加权的）或是加权的。如下图所示，加 权图的边被赋予了权值：\n\n![加权图](http://or2vgb0pq.bkt.clouddn.com/18-10-29/23327009.jpg)\n\n我们可以使用图来解决计算机科学世界中的很多问题，比如搜索图中的一个特定顶点或搜索 一条特定边，寻找图中的一条路径（从一个顶点到另一个顶点），寻找两个顶点之间的最短路径， 以及环检测。\n\n### 邻接矩阵\n\n图最常见的实现是邻接矩阵。每个节点都和一个整数相关联，该整数将作为数组的索引。我 们用一个二维数组来表示顶点之间的连接。如果索引为 i 的节点和索引为 j 的节点相邻，则 array[i][j] === 1，否则 array[i][j] === 0，如下图所示\n![邻接矩阵](http://or2vgb0pq.bkt.clouddn.com//18-10-29/71130959.jpg)\n\n### 邻接表\n\n我们也可以使用一种叫作邻接表的动态数据结构来表示图。邻接表由图中每个顶点的相邻顶 点列表所组成。存在好几种方式来表示这种数据结构。我们可以用列表（数组）、链表，甚至是 散列表或是字典来表示相邻顶点列表。下面的示意图展示了邻接表数据结构\n![邻接表](http://or2vgb0pq.bkt.clouddn.com//18-10-29/43873809.jpg)\n\n### 关联矩阵\n\n我们还可以用关联矩阵来表示图。在关联矩阵中，矩阵的行表示顶点，列表示边。如下图所 示，我们使用二维数组来表示两者之间的连通性，如果顶点 v 是边 e 的入射点，则 array[v][e] === 1； 否则，array[v][e] === 0\n\n![关联矩阵](http://or2vgb0pq.bkt.clouddn.com//18-10-29/9738760.jpg)\n\n```JavaScript\n\n//需要用到的队列类\nclass Queue {\n  constructor() {\n    this.items = []\n  }\n  //相队列尾部添加一个元素\n  enqueue(element) {\n    this.items.push(element)\n  }\n  //移除队列的一个个元素\n  dequeue() {\n    return this.items.shift()\n  }\n  // 返回队列第一个元素,第一个被添加的元素\n  front() {\n    return this.items[0]\n  }\n  // 查看队列是否为空\n  isEmpty() {\n    return this.items.length == 0\n  }\n  // 清除队列\n  clear() {\n    this.items = []\n  }\n  // 返回队列包含的元素个数\n  size() {\n    return this.items.length\n  }\n  print() {\n    console.log(this.items.toString())\n  }\n}\n//需要用到字典类型\nfunction Dictionary() {\n  var items = {}\n\n  this.has = function(key) {\n    return key in items\n  }\n  this.set = function(key, value) {\n    items[key] = value\n  }\n  this.remove = function() {\n    if (this.has(key)) {\n      delete items[key]\n      return true\n    }\n    return false\n  }\n  this.get = function(key) {\n    return this.has(key) ? items[key] : nuderfined\n  }\n  this.values = function() {\n    var values = []\n    for (var k in items) {\n      if (this.has(k)) {\n        values.push(items[k])\n      }\n    }\n    return values\n  }\n  this.clear = function() {\n    items = {}\n  }\n  this.size = function() {\n    return Object.keys(items).length\n  }\n  this.keys = function() {\n    return Object.keys(items)\n  }\n  this.getItems = function() {\n    return items\n  }\n}\n\nfunction Graph() {\n  //用一个数组存储顶点的名字\n  var vertices = []\n  //用一个字典存储邻接表\n  var adjList = new Dictionary()\n  //这个方法接受顶点v作为参数\n  this.addVertex = function(v) {\n    //将顶点加到顶点列表中\n    vertices.push(v)\n    // 在邻接表中设置v为键对于值为一个空数组\n    adjList.set(v, [])\n  }\n  //这个方法接受两个顶点作为参数\n  this.addEdge = function(v, w) {\n    // 通过将w加入到v的邻接表中，我们添加了一条自顶 点v到顶点w的边\n    adjList.get(v).push(w)\n    // 无向图我们需要添加一条自w向v的边\n    adjList.get(w).push(v)\n  }\n  //实现一下Graph类的toString方法，以便于在控制台输出图\n  this.toString = function() {\n    var s = ''\n    for (var i = 0; i < vertices.length; i++) {\n      s += vertices[i] + ' -> '\n      var neighbors = adjList.get(vertices[i])\n      for (var j = 0; j < neighbors.length; j++) {\n        s += neighbors[j] + ' '\n      }\n      s += '\\n'\n    }\n    return s\n  }\n  var initializeColor = function() {\n    var color = []\n    for (var i = 0; i < vertices.length; i++) {\n      color[vertices[i]] = 'white' //1\n    }\n    return color\n  }\n  // 广度优先搜索\n  this.bfs = function(v, callback) {\n    var color = initializeColor() //2\n    var queue = new Queue() //3\n    queue.enqueue(v) //4\n\n    while (!queue.isEmpty()) {\n      //5\n      var u = queue.dequeue() //6\n      var neighbors = adjList.get(u) //7\n      color[u] = 'grey' //8\n      for (var i = 0; i < neighbors.length; i++) {\n        //9\n        var w = neighbors[i] //10\n        if (color[w] === 'white') {\n          //11\n          color[w] = 'grey' //12\n          queue.enqueue(w) //13\n        }\n      }\n      color[u] = 'black' //14\n      if (callback) {\n        //15\n        callback(u)\n      }\n    }\n  }\n}\n\n}\n// 测试这段代码：\nvar graph = new Graph()\nvar myVertices = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\nfor (var i = 0; i < myVertices.length; i++) {\n  graph.addVertex(myVertices[i])\n}\ngraph.addEdge('A', 'B')\ngraph.addEdge('A', 'C')\ngraph.addEdge('A', 'D')\ngraph.addEdge('C', 'D')\ngraph.addEdge('C', 'G')\ngraph.addEdge('D', 'G')\ngraph.addEdge('D', 'H')\ngraph.addEdge('B', 'E')\ngraph.addEdge('B', 'F')\ngraph.addEdge('E', 'I')\nconsole.log(graph.toString())\nfunction printNode(value) {\n  console.log('Visited vertex: ' + value)\n}\n//广度优先搜索\ngraph.bfs(myVertices[0], printNode)\n// 输出结果为:\n\n/**\n  A -> B C D\n  B -> A E F\n  C -> A D G\n  D -> A C G H\n  E -> B I\n  F -> B\n  G -> C D\n  H -> D\n  I -> E\n\n  Visited vertex: A\n  Visited vertex: B\n  Visited vertex: C\n  Visited vertex: D\n  Visited vertex: E\n  Visited vertex: F\n  Visited vertex: G\n  Visited vertex: H\n  Visited vertex: I\n*/\n```\n\n<disqus/>\n","source":"_posts/JavaScript/javascript实现图.md","raw":"---\ntitle: javascript 实现图\ndate: 2018-01-13 16:07:32\ntags:\n  - JavaScript\n  - 算法\ncategory: 前端\n---\n\n由一条边连接在一起的顶点称为相邻顶点。比如，A 和 B 是相邻的，A 和 D 是相邻的，A 和 C 是相邻的，A 和 E 不是相邻的。\n一个顶点的度是其相邻顶点的数量。比如，A 和其他三个顶点相连接，因此，A 的度为 3；E 和其他两个顶点相连，因此，E 的度为 2。 路径是顶点 v1, v2,…,vk 的一个连续序列，其中 vi 和 vi+1 是相邻的。以上一示意图中的图为例， 其中包含路径 A B E I 和 A C D G。\n简单路径要求不包含重复的顶点。举个例子，A D G 是一条简单路径。除去最后一个顶点（因 为它和第一个顶点是同一个顶点），环也是一个简单路径，比如 A D C A（最后一个顶点重新回到 A）。\n\n### 有向图\n\n如果图中不存在环，则称该图是无环的。如果图中每两个顶点间都存在路径，则该图是连通的。\n\n![图](http://or2vgb0pq.bkt.clouddn.com//18-10-29/45067468.jpg)\n\n图还可以是未加权的（目前为止我们看到的图都是未加权的）或是加权的。如下图所示，加 权图的边被赋予了权值：\n\n![加权图](http://or2vgb0pq.bkt.clouddn.com/18-10-29/23327009.jpg)\n\n我们可以使用图来解决计算机科学世界中的很多问题，比如搜索图中的一个特定顶点或搜索 一条特定边，寻找图中的一条路径（从一个顶点到另一个顶点），寻找两个顶点之间的最短路径， 以及环检测。\n\n### 邻接矩阵\n\n图最常见的实现是邻接矩阵。每个节点都和一个整数相关联，该整数将作为数组的索引。我 们用一个二维数组来表示顶点之间的连接。如果索引为 i 的节点和索引为 j 的节点相邻，则 array[i][j] === 1，否则 array[i][j] === 0，如下图所示\n![邻接矩阵](http://or2vgb0pq.bkt.clouddn.com//18-10-29/71130959.jpg)\n\n### 邻接表\n\n我们也可以使用一种叫作邻接表的动态数据结构来表示图。邻接表由图中每个顶点的相邻顶 点列表所组成。存在好几种方式来表示这种数据结构。我们可以用列表（数组）、链表，甚至是 散列表或是字典来表示相邻顶点列表。下面的示意图展示了邻接表数据结构\n![邻接表](http://or2vgb0pq.bkt.clouddn.com//18-10-29/43873809.jpg)\n\n### 关联矩阵\n\n我们还可以用关联矩阵来表示图。在关联矩阵中，矩阵的行表示顶点，列表示边。如下图所 示，我们使用二维数组来表示两者之间的连通性，如果顶点 v 是边 e 的入射点，则 array[v][e] === 1； 否则，array[v][e] === 0\n\n![关联矩阵](http://or2vgb0pq.bkt.clouddn.com//18-10-29/9738760.jpg)\n\n```JavaScript\n\n//需要用到的队列类\nclass Queue {\n  constructor() {\n    this.items = []\n  }\n  //相队列尾部添加一个元素\n  enqueue(element) {\n    this.items.push(element)\n  }\n  //移除队列的一个个元素\n  dequeue() {\n    return this.items.shift()\n  }\n  // 返回队列第一个元素,第一个被添加的元素\n  front() {\n    return this.items[0]\n  }\n  // 查看队列是否为空\n  isEmpty() {\n    return this.items.length == 0\n  }\n  // 清除队列\n  clear() {\n    this.items = []\n  }\n  // 返回队列包含的元素个数\n  size() {\n    return this.items.length\n  }\n  print() {\n    console.log(this.items.toString())\n  }\n}\n//需要用到字典类型\nfunction Dictionary() {\n  var items = {}\n\n  this.has = function(key) {\n    return key in items\n  }\n  this.set = function(key, value) {\n    items[key] = value\n  }\n  this.remove = function() {\n    if (this.has(key)) {\n      delete items[key]\n      return true\n    }\n    return false\n  }\n  this.get = function(key) {\n    return this.has(key) ? items[key] : nuderfined\n  }\n  this.values = function() {\n    var values = []\n    for (var k in items) {\n      if (this.has(k)) {\n        values.push(items[k])\n      }\n    }\n    return values\n  }\n  this.clear = function() {\n    items = {}\n  }\n  this.size = function() {\n    return Object.keys(items).length\n  }\n  this.keys = function() {\n    return Object.keys(items)\n  }\n  this.getItems = function() {\n    return items\n  }\n}\n\nfunction Graph() {\n  //用一个数组存储顶点的名字\n  var vertices = []\n  //用一个字典存储邻接表\n  var adjList = new Dictionary()\n  //这个方法接受顶点v作为参数\n  this.addVertex = function(v) {\n    //将顶点加到顶点列表中\n    vertices.push(v)\n    // 在邻接表中设置v为键对于值为一个空数组\n    adjList.set(v, [])\n  }\n  //这个方法接受两个顶点作为参数\n  this.addEdge = function(v, w) {\n    // 通过将w加入到v的邻接表中，我们添加了一条自顶 点v到顶点w的边\n    adjList.get(v).push(w)\n    // 无向图我们需要添加一条自w向v的边\n    adjList.get(w).push(v)\n  }\n  //实现一下Graph类的toString方法，以便于在控制台输出图\n  this.toString = function() {\n    var s = ''\n    for (var i = 0; i < vertices.length; i++) {\n      s += vertices[i] + ' -> '\n      var neighbors = adjList.get(vertices[i])\n      for (var j = 0; j < neighbors.length; j++) {\n        s += neighbors[j] + ' '\n      }\n      s += '\\n'\n    }\n    return s\n  }\n  var initializeColor = function() {\n    var color = []\n    for (var i = 0; i < vertices.length; i++) {\n      color[vertices[i]] = 'white' //1\n    }\n    return color\n  }\n  // 广度优先搜索\n  this.bfs = function(v, callback) {\n    var color = initializeColor() //2\n    var queue = new Queue() //3\n    queue.enqueue(v) //4\n\n    while (!queue.isEmpty()) {\n      //5\n      var u = queue.dequeue() //6\n      var neighbors = adjList.get(u) //7\n      color[u] = 'grey' //8\n      for (var i = 0; i < neighbors.length; i++) {\n        //9\n        var w = neighbors[i] //10\n        if (color[w] === 'white') {\n          //11\n          color[w] = 'grey' //12\n          queue.enqueue(w) //13\n        }\n      }\n      color[u] = 'black' //14\n      if (callback) {\n        //15\n        callback(u)\n      }\n    }\n  }\n}\n\n}\n// 测试这段代码：\nvar graph = new Graph()\nvar myVertices = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\nfor (var i = 0; i < myVertices.length; i++) {\n  graph.addVertex(myVertices[i])\n}\ngraph.addEdge('A', 'B')\ngraph.addEdge('A', 'C')\ngraph.addEdge('A', 'D')\ngraph.addEdge('C', 'D')\ngraph.addEdge('C', 'G')\ngraph.addEdge('D', 'G')\ngraph.addEdge('D', 'H')\ngraph.addEdge('B', 'E')\ngraph.addEdge('B', 'F')\ngraph.addEdge('E', 'I')\nconsole.log(graph.toString())\nfunction printNode(value) {\n  console.log('Visited vertex: ' + value)\n}\n//广度优先搜索\ngraph.bfs(myVertices[0], printNode)\n// 输出结果为:\n\n/**\n  A -> B C D\n  B -> A E F\n  C -> A D G\n  D -> A C G H\n  E -> B I\n  F -> B\n  G -> C D\n  H -> D\n  I -> E\n\n  Visited vertex: A\n  Visited vertex: B\n  Visited vertex: C\n  Visited vertex: D\n  Visited vertex: E\n  Visited vertex: F\n  Visited vertex: G\n  Visited vertex: H\n  Visited vertex: I\n*/\n```\n\n<disqus/>\n","slug":"JavaScript/javascript实现图","published":1,"updated":"2019-06-25T01:28:14.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctci000n2e47lehnibpw","content":"<p>由一条边连接在一起的顶点称为相邻顶点。比如，A 和 B 是相邻的，A 和 D 是相邻的，A 和 C 是相邻的，A 和 E 不是相邻的。<br>一个顶点的度是其相邻顶点的数量。比如，A 和其他三个顶点相连接，因此，A 的度为 3；E 和其他两个顶点相连，因此，E 的度为 2。 路径是顶点 v1, v2,…,vk 的一个连续序列，其中 vi 和 vi+1 是相邻的。以上一示意图中的图为例， 其中包含路径 A B E I 和 A C D G。<br>简单路径要求不包含重复的顶点。举个例子，A D G 是一条简单路径。除去最后一个顶点（因 为它和第一个顶点是同一个顶点），环也是一个简单路径，比如 A D C A（最后一个顶点重新回到 A）。</p>\n<h3 id=\"有向图\"><a href=\"#有向图\" class=\"headerlink\" title=\"有向图\"></a>有向图</h3><p>如果图中不存在环，则称该图是无环的。如果图中每两个顶点间都存在路径，则该图是连通的。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://or2vgb0pq.bkt.clouddn.com//18-10-29/45067468.jpg\" alt=\"图\" title>\n                </div>\n                <div class=\"image-caption\">图</div>\n            </figure>\n\n<p>图还可以是未加权的（目前为止我们看到的图都是未加权的）或是加权的。如下图所示，加 权图的边被赋予了权值：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://or2vgb0pq.bkt.clouddn.com/18-10-29/23327009.jpg\" alt=\"加权图\" title>\n                </div>\n                <div class=\"image-caption\">加权图</div>\n            </figure>\n\n<p>我们可以使用图来解决计算机科学世界中的很多问题，比如搜索图中的一个特定顶点或搜索 一条特定边，寻找图中的一条路径（从一个顶点到另一个顶点），寻找两个顶点之间的最短路径， 以及环检测。</p>\n<h3 id=\"邻接矩阵\"><a href=\"#邻接矩阵\" class=\"headerlink\" title=\"邻接矩阵\"></a>邻接矩阵</h3><p>图最常见的实现是邻接矩阵。每个节点都和一个整数相关联，该整数将作为数组的索引。我 们用一个二维数组来表示顶点之间的连接。如果索引为 i 的节点和索引为 j 的节点相邻，则 array[i][j] === 1，否则 array[i][j] === 0，如下图所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://or2vgb0pq.bkt.clouddn.com//18-10-29/71130959.jpg\" alt=\"邻接矩阵\" title>\n                </div>\n                <div class=\"image-caption\">邻接矩阵</div>\n            </figure>\n\n<h3 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h3><p>我们也可以使用一种叫作邻接表的动态数据结构来表示图。邻接表由图中每个顶点的相邻顶 点列表所组成。存在好几种方式来表示这种数据结构。我们可以用列表（数组）、链表，甚至是 散列表或是字典来表示相邻顶点列表。下面的示意图展示了邻接表数据结构</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://or2vgb0pq.bkt.clouddn.com//18-10-29/43873809.jpg\" alt=\"邻接表\" title>\n                </div>\n                <div class=\"image-caption\">邻接表</div>\n            </figure>\n\n<h3 id=\"关联矩阵\"><a href=\"#关联矩阵\" class=\"headerlink\" title=\"关联矩阵\"></a>关联矩阵</h3><p>我们还可以用关联矩阵来表示图。在关联矩阵中，矩阵的行表示顶点，列表示边。如下图所 示，我们使用二维数组来表示两者之间的连通性，如果顶点 v 是边 e 的入射点，则 array[v][e] === 1； 否则，array[v][e] === 0</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://or2vgb0pq.bkt.clouddn.com//18-10-29/9738760.jpg\" alt=\"关联矩阵\" title>\n                </div>\n                <div class=\"image-caption\">关联矩阵</div>\n            </figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//需要用到的队列类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.items = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//相队列尾部添加一个元素</span></span><br><span class=\"line\">  enqueue(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.items.push(element)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//移除队列的一个个元素</span></span><br><span class=\"line\">  dequeue() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.shift()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回队列第一个元素,第一个被添加的元素</span></span><br><span class=\"line\">  front() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 查看队列是否为空</span></span><br><span class=\"line\">  isEmpty() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.length == <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 清除队列</span></span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.items = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回队列包含的元素个数</span></span><br><span class=\"line\">  size() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  print() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.items.toString())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//需要用到字典类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dictionary</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> items = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> items</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.set = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">    items[key] = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> items[key]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.has(key) ? items[key] : nuderfined</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.values = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> values = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> items) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(k)) &#123;</span><br><span class=\"line\">        values.push(items[k])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> values</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    items = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(items).length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.keys = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(items)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getItems = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Graph</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//用一个数组存储顶点的名字</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> vertices = []</span><br><span class=\"line\">  <span class=\"comment\">//用一个字典存储邻接表</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> adjList = <span class=\"keyword\">new</span> Dictionary()</span><br><span class=\"line\">  <span class=\"comment\">//这个方法接受顶点v作为参数</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.addVertex = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//将顶点加到顶点列表中</span></span><br><span class=\"line\">    vertices.push(v)</span><br><span class=\"line\">    <span class=\"comment\">// 在邻接表中设置v为键对于值为一个空数组</span></span><br><span class=\"line\">    adjList.set(v, [])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//这个方法接受两个顶点作为参数</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.addEdge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v, w</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过将w加入到v的邻接表中，我们添加了一条自顶 点v到顶点w的边</span></span><br><span class=\"line\">    adjList.get(v).push(w)</span><br><span class=\"line\">    <span class=\"comment\">// 无向图我们需要添加一条自w向v的边</span></span><br><span class=\"line\">    adjList.get(w).push(v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//实现一下Graph类的toString方法，以便于在控制台输出图</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; vertices.length; i++) &#123;</span><br><span class=\"line\">      s += vertices[i] + <span class=\"string\">' -&gt; '</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> neighbors = adjList.get(vertices[i])</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; neighbors.length; j++) &#123;</span><br><span class=\"line\">        s += neighbors[j] + <span class=\"string\">' '</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      s += <span class=\"string\">'\\n'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> initializeColor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> color = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; vertices.length; i++) &#123;</span><br><span class=\"line\">      color[vertices[i]] = <span class=\"string\">'white'</span> <span class=\"comment\">//1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> color</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 广度优先搜索</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.bfs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> color = initializeColor() <span class=\"comment\">//2</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> queue = <span class=\"keyword\">new</span> Queue() <span class=\"comment\">//3</span></span><br><span class=\"line\">    queue.enqueue(v) <span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//5</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> u = queue.dequeue() <span class=\"comment\">//6</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> neighbors = adjList.get(u) <span class=\"comment\">//7</span></span><br><span class=\"line\">      color[u] = <span class=\"string\">'grey'</span> <span class=\"comment\">//8</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; neighbors.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//9</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> w = neighbors[i] <span class=\"comment\">//10</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (color[w] === <span class=\"string\">'white'</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//11</span></span><br><span class=\"line\">          color[w] = <span class=\"string\">'grey'</span> <span class=\"comment\">//12</span></span><br><span class=\"line\">          queue.enqueue(w) <span class=\"comment\">//13</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      color[u] = <span class=\"string\">'black'</span> <span class=\"comment\">//14</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//15</span></span><br><span class=\"line\">        callback(u)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 测试这段代码：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> graph = <span class=\"keyword\">new</span> Graph()</span><br><span class=\"line\"><span class=\"keyword\">var</span> myVertices = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'G'</span>, <span class=\"string\">'H'</span>, <span class=\"string\">'I'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; myVertices.length; i++) &#123;</span><br><span class=\"line\">  graph.addVertex(myVertices[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'A'</span>, <span class=\"string\">'C'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'A'</span>, <span class=\"string\">'D'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'C'</span>, <span class=\"string\">'G'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'D'</span>, <span class=\"string\">'G'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'D'</span>, <span class=\"string\">'H'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'B'</span>, <span class=\"string\">'E'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'B'</span>, <span class=\"string\">'F'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'E'</span>, <span class=\"string\">'I'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(graph.toString())</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printNode</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Visited vertex: '</span> + value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//广度优先搜索</span></span><br><span class=\"line\">graph.bfs(myVertices[<span class=\"number\">0</span>], printNode)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果为:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  A -&gt; B C D</span></span><br><span class=\"line\"><span class=\"comment\">  B -&gt; A E F</span></span><br><span class=\"line\"><span class=\"comment\">  C -&gt; A D G</span></span><br><span class=\"line\"><span class=\"comment\">  D -&gt; A C G H</span></span><br><span class=\"line\"><span class=\"comment\">  E -&gt; B I</span></span><br><span class=\"line\"><span class=\"comment\">  F -&gt; B</span></span><br><span class=\"line\"><span class=\"comment\">  G -&gt; C D</span></span><br><span class=\"line\"><span class=\"comment\">  H -&gt; D</span></span><br><span class=\"line\"><span class=\"comment\">  I -&gt; E</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: A</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: B</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: C</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: D</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: E</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: F</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: G</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: H</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: I</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<disqus>\n</disqus>","site":{"data":{}},"excerpt":"","more":"<p>由一条边连接在一起的顶点称为相邻顶点。比如，A 和 B 是相邻的，A 和 D 是相邻的，A 和 C 是相邻的，A 和 E 不是相邻的。<br>一个顶点的度是其相邻顶点的数量。比如，A 和其他三个顶点相连接，因此，A 的度为 3；E 和其他两个顶点相连，因此，E 的度为 2。 路径是顶点 v1, v2,…,vk 的一个连续序列，其中 vi 和 vi+1 是相邻的。以上一示意图中的图为例， 其中包含路径 A B E I 和 A C D G。<br>简单路径要求不包含重复的顶点。举个例子，A D G 是一条简单路径。除去最后一个顶点（因 为它和第一个顶点是同一个顶点），环也是一个简单路径，比如 A D C A（最后一个顶点重新回到 A）。</p>\n<h3 id=\"有向图\"><a href=\"#有向图\" class=\"headerlink\" title=\"有向图\"></a>有向图</h3><p>如果图中不存在环，则称该图是无环的。如果图中每两个顶点间都存在路径，则该图是连通的。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://or2vgb0pq.bkt.clouddn.com//18-10-29/45067468.jpg\" alt=\"图\" title>\n                </div>\n                <div class=\"image-caption\">图</div>\n            </figure>\n\n<p>图还可以是未加权的（目前为止我们看到的图都是未加权的）或是加权的。如下图所示，加 权图的边被赋予了权值：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://or2vgb0pq.bkt.clouddn.com/18-10-29/23327009.jpg\" alt=\"加权图\" title>\n                </div>\n                <div class=\"image-caption\">加权图</div>\n            </figure>\n\n<p>我们可以使用图来解决计算机科学世界中的很多问题，比如搜索图中的一个特定顶点或搜索 一条特定边，寻找图中的一条路径（从一个顶点到另一个顶点），寻找两个顶点之间的最短路径， 以及环检测。</p>\n<h3 id=\"邻接矩阵\"><a href=\"#邻接矩阵\" class=\"headerlink\" title=\"邻接矩阵\"></a>邻接矩阵</h3><p>图最常见的实现是邻接矩阵。每个节点都和一个整数相关联，该整数将作为数组的索引。我 们用一个二维数组来表示顶点之间的连接。如果索引为 i 的节点和索引为 j 的节点相邻，则 array[i][j] === 1，否则 array[i][j] === 0，如下图所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://or2vgb0pq.bkt.clouddn.com//18-10-29/71130959.jpg\" alt=\"邻接矩阵\" title>\n                </div>\n                <div class=\"image-caption\">邻接矩阵</div>\n            </figure>\n\n<h3 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h3><p>我们也可以使用一种叫作邻接表的动态数据结构来表示图。邻接表由图中每个顶点的相邻顶 点列表所组成。存在好几种方式来表示这种数据结构。我们可以用列表（数组）、链表，甚至是 散列表或是字典来表示相邻顶点列表。下面的示意图展示了邻接表数据结构</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://or2vgb0pq.bkt.clouddn.com//18-10-29/43873809.jpg\" alt=\"邻接表\" title>\n                </div>\n                <div class=\"image-caption\">邻接表</div>\n            </figure>\n\n<h3 id=\"关联矩阵\"><a href=\"#关联矩阵\" class=\"headerlink\" title=\"关联矩阵\"></a>关联矩阵</h3><p>我们还可以用关联矩阵来表示图。在关联矩阵中，矩阵的行表示顶点，列表示边。如下图所 示，我们使用二维数组来表示两者之间的连通性，如果顶点 v 是边 e 的入射点，则 array[v][e] === 1； 否则，array[v][e] === 0</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://or2vgb0pq.bkt.clouddn.com//18-10-29/9738760.jpg\" alt=\"关联矩阵\" title>\n                </div>\n                <div class=\"image-caption\">关联矩阵</div>\n            </figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//需要用到的队列类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.items = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//相队列尾部添加一个元素</span></span><br><span class=\"line\">  enqueue(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.items.push(element)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//移除队列的一个个元素</span></span><br><span class=\"line\">  dequeue() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.shift()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回队列第一个元素,第一个被添加的元素</span></span><br><span class=\"line\">  front() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 查看队列是否为空</span></span><br><span class=\"line\">  isEmpty() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.length == <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 清除队列</span></span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.items = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回队列包含的元素个数</span></span><br><span class=\"line\">  size() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  print() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.items.toString())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//需要用到字典类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dictionary</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> items = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> items</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.set = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">    items[key] = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> items[key]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.has(key) ? items[key] : nuderfined</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.values = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> values = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> items) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(k)) &#123;</span><br><span class=\"line\">        values.push(items[k])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> values</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    items = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(items).length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.keys = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(items)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getItems = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Graph</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//用一个数组存储顶点的名字</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> vertices = []</span><br><span class=\"line\">  <span class=\"comment\">//用一个字典存储邻接表</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> adjList = <span class=\"keyword\">new</span> Dictionary()</span><br><span class=\"line\">  <span class=\"comment\">//这个方法接受顶点v作为参数</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.addVertex = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//将顶点加到顶点列表中</span></span><br><span class=\"line\">    vertices.push(v)</span><br><span class=\"line\">    <span class=\"comment\">// 在邻接表中设置v为键对于值为一个空数组</span></span><br><span class=\"line\">    adjList.set(v, [])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//这个方法接受两个顶点作为参数</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.addEdge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v, w</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过将w加入到v的邻接表中，我们添加了一条自顶 点v到顶点w的边</span></span><br><span class=\"line\">    adjList.get(v).push(w)</span><br><span class=\"line\">    <span class=\"comment\">// 无向图我们需要添加一条自w向v的边</span></span><br><span class=\"line\">    adjList.get(w).push(v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//实现一下Graph类的toString方法，以便于在控制台输出图</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; vertices.length; i++) &#123;</span><br><span class=\"line\">      s += vertices[i] + <span class=\"string\">' -&gt; '</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> neighbors = adjList.get(vertices[i])</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; neighbors.length; j++) &#123;</span><br><span class=\"line\">        s += neighbors[j] + <span class=\"string\">' '</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      s += <span class=\"string\">'\\n'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> initializeColor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> color = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; vertices.length; i++) &#123;</span><br><span class=\"line\">      color[vertices[i]] = <span class=\"string\">'white'</span> <span class=\"comment\">//1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> color</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 广度优先搜索</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.bfs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> color = initializeColor() <span class=\"comment\">//2</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> queue = <span class=\"keyword\">new</span> Queue() <span class=\"comment\">//3</span></span><br><span class=\"line\">    queue.enqueue(v) <span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//5</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> u = queue.dequeue() <span class=\"comment\">//6</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> neighbors = adjList.get(u) <span class=\"comment\">//7</span></span><br><span class=\"line\">      color[u] = <span class=\"string\">'grey'</span> <span class=\"comment\">//8</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; neighbors.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//9</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> w = neighbors[i] <span class=\"comment\">//10</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (color[w] === <span class=\"string\">'white'</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//11</span></span><br><span class=\"line\">          color[w] = <span class=\"string\">'grey'</span> <span class=\"comment\">//12</span></span><br><span class=\"line\">          queue.enqueue(w) <span class=\"comment\">//13</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      color[u] = <span class=\"string\">'black'</span> <span class=\"comment\">//14</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//15</span></span><br><span class=\"line\">        callback(u)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 测试这段代码：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> graph = <span class=\"keyword\">new</span> Graph()</span><br><span class=\"line\"><span class=\"keyword\">var</span> myVertices = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'G'</span>, <span class=\"string\">'H'</span>, <span class=\"string\">'I'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; myVertices.length; i++) &#123;</span><br><span class=\"line\">  graph.addVertex(myVertices[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'A'</span>, <span class=\"string\">'C'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'A'</span>, <span class=\"string\">'D'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'C'</span>, <span class=\"string\">'G'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'D'</span>, <span class=\"string\">'G'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'D'</span>, <span class=\"string\">'H'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'B'</span>, <span class=\"string\">'E'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'B'</span>, <span class=\"string\">'F'</span>)</span><br><span class=\"line\">graph.addEdge(<span class=\"string\">'E'</span>, <span class=\"string\">'I'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(graph.toString())</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printNode</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Visited vertex: '</span> + value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//广度优先搜索</span></span><br><span class=\"line\">graph.bfs(myVertices[<span class=\"number\">0</span>], printNode)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果为:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  A -&gt; B C D</span></span><br><span class=\"line\"><span class=\"comment\">  B -&gt; A E F</span></span><br><span class=\"line\"><span class=\"comment\">  C -&gt; A D G</span></span><br><span class=\"line\"><span class=\"comment\">  D -&gt; A C G H</span></span><br><span class=\"line\"><span class=\"comment\">  E -&gt; B I</span></span><br><span class=\"line\"><span class=\"comment\">  F -&gt; B</span></span><br><span class=\"line\"><span class=\"comment\">  G -&gt; C D</span></span><br><span class=\"line\"><span class=\"comment\">  H -&gt; D</span></span><br><span class=\"line\"><span class=\"comment\">  I -&gt; E</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: A</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: B</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: C</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: D</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: E</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: F</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: G</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: H</span></span><br><span class=\"line\"><span class=\"comment\">  Visited vertex: I</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<disqus>\n</disqus>"},{"title":"javascript 实现链表","date":"2018-01-13T08:07:32.000Z","_content":"\n链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个 元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针或链接）组成。\n\n相对于传统的数组，链表的一个好处在于，添加或移除元素的时候不需要移动其他元素。然 而，链表需要使用指针，因此实现链表时需要额外注意。数组的另一个细节是可以直接访问任何 位置的任何元素，而要想访问链表中间的一个元素，需要从起点（表头）开始迭代列表直到找到 所需的元素。\n现实中也有一些链表的例子。第一个例子就是康加舞队。每个人是一个元素，手就是链向下 一个人的指针。可以向队列中增加人——只需要找到想加入的点，断开连接，插入一个人，再重 新连接起来。\n\n另一个例子是寻宝游戏。你有一条线索，这条线索是指向寻找下一条线索的地点的指针。你顺着这条链接去下一个地点，得到另一条指向再下一处的线索。得到列表中间的线索的唯一办法， 就是从起点（第一条线索）顺着列表寻找。\n还有一个可能是用来说明链表的最流行的例子，那就是火车。一列火车是由一系列车厢（也 称车皮）组成的。每节车厢或车皮都相互连接。你很容易分离一节车皮，改变它的位置，添加或 移除它。\n\n### 创建一个链表\n\n```JavaScript\nfunction LinkedList() {\n  // 一个辅助类,表示一个节点,包含一个指针,指向下一个节点\n  var Node = function(element) {\n    this.element = element\n    this.next = null\n  }\n  // 表示列表项的长度\n  var length = 0\n  // 第一个节点的引用\n  var head = null\n  // 向链表尾部添加一个新的项\n  this.append = function(element) {\n    // 创建一个节点\n    var node = new Node(element),\n      current //用于暂存当前项\n    //如果是空链表 那么 直接让head成为一个节点head.next自动变成null\n    if (head === null) {\n      //列表中第一个节点\n      head = node\n    } else {\n      // 当前的head不为null,说明当前的head有next属性\n      current = head\n      // 循环链表找到最后一项\n      while (current.next) {\n        current = current.next\n      }\n      // 当curent.next等于空时说明已经到了最后一项\n      // 然后把node赋值给最后一项即可\n      current.next = node\n    }\n    // 更新长度\n    length++\n  }\n  // 向链表的特定位置插入一个新的项\n  this.insert = function(position, element) {\n    //检查越界值\n    if (position >= 0 && position <= length) {\n      var node = new Node(element),\n        current = head,\n        previous,\n        index = 0\n      //在第一个位置添加\n      //current是对链表中第一个元素的引用\n      if (position === 0) {\n        // 现在head和node.next都指向了current\n        node.next = current\n        // 把head的引用改为node\n        head = node\n      } else {\n        // 当跳出循环时，current变量将是对想要插入新元素的位置之后一个 元素的引用，\n        // 而previous将是对想要插入新元素的位置之前一个元素的引用。\n        while (index++ < position) {\n          previous = current\n          current = current.next\n        }\n        // 因此，首先需要把新项（node）和当前项链接起来，然后需要改变previous和current之间的链接。\n        // 我们还需要让previous.next 指向node。\n        node.next = current\n        previous.next = node\n      }\n      //更新长度\n      length++\n\n      return true\n    } else {\n      return false\n    }\n  }\n  // 从链表中移除一项\n  this.remove = function(element) {}\n  // 从链表中的特定位置移除一项\n  this.removeAt = function(position) {\n    //检查越界值\n    if (position > -1 && positon < length) {\n      var current = head, //暂存当前项\n        previous, //暂存之前项\n        index = 0 //索引\n      // 如果移除第一项,直接让head置空即可\n      if (position === 0) {\n        head = current.next\n      } else {\n        // 迭代链表\n        while (index++ < position) {\n          // 用previous(上一个)暂存current(当前项),当前项指向下一项\n          previous = current\n          current = current.next\n        }\n        //将previous(上一个))与current(当前的)的下一项连接起来;跳过current,从而移除它\n        previous.next = current.next\n      }\n      // 更新长度\n      length--\n      return current.element\n    } else {\n      return null\n    }\n    // current变量是对要移除元素的引用。previous变量是对要移除元素的前一个元素的引用。\n    // 那么要移除current元素，需要做的就是将previous.next与current.next链接起来。\n    // 因此， 我们的逻辑对这两种情况都管用。\n  }\n  // 返回元素在链表中的索引\n  this.indexOf = function(element) {\n    var current = head,\n      index = -1\n    while (current) {\n      if (element === current.element) {\n        return index\n      }\n      index++\n      current = current.next\n    }\n    return -1\n  }\n  // 返回链表是否为空\n  this.isEmpty = function() {\n    return length === 0\n  }\n  // 返回链表中的元素个数\n  this.size = function() {\n    return length\n  }\n  // 输出值\n  this.toString = function() {\n    var current = head,\n      string = ''\n    while (current) {\n      string = current.element\n      current = current.next\n    }\n    return string\n  }\n  this.getHead = function() {\n    return head\n  }\n  this.print = function() {}\n}\n```\n\n# 双向链表\n\n```JavaScript\n\nfunction DoublyLinkedList() {\n  var Node = function(element) {\n    this.element = element\n    this.next = null\n    this.prev = null\n  }\n\n  var length = 0\n  var head = null\n  var tail = null\n\n  this.insert = function(position, element) {\n    if (position >= 0 && position <= length) {\n      var node = new Node(element),\n        current = head,\n        previous,\n        index = 0\n\n      if (position === 0) {\n        if (!head) {\n          //1\n          head = node\n          tail = node\n        } else {\n          node.next = current\n          current.prev = node //2\n          head = node\n        }\n      } else if (position === length) {\n        current = tail //3\n        current.next = node\n        node.prev = current\n        tail = node\n      } else {\n        while (index++ < position) { //4\n          previous = current\n          current = current.next\n        }\n        node.next = current //5\n        previous.next = node\n\n        current.prev = node\n        node.prev = previous\n      }\n      length++\n      return true\n    } else {\n      return false\n    }\n  }\n}\n```\n","source":"_posts/JavaScript/javascript实现链表.md","raw":"---\ntitle: javascript 实现链表\ndate: 2018-01-13 16:07:32\ntags:\n  - JavaScript\n  - 算法\ncategory: 前端\n---\n\n链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个 元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针或链接）组成。\n\n相对于传统的数组，链表的一个好处在于，添加或移除元素的时候不需要移动其他元素。然 而，链表需要使用指针，因此实现链表时需要额外注意。数组的另一个细节是可以直接访问任何 位置的任何元素，而要想访问链表中间的一个元素，需要从起点（表头）开始迭代列表直到找到 所需的元素。\n现实中也有一些链表的例子。第一个例子就是康加舞队。每个人是一个元素，手就是链向下 一个人的指针。可以向队列中增加人——只需要找到想加入的点，断开连接，插入一个人，再重 新连接起来。\n\n另一个例子是寻宝游戏。你有一条线索，这条线索是指向寻找下一条线索的地点的指针。你顺着这条链接去下一个地点，得到另一条指向再下一处的线索。得到列表中间的线索的唯一办法， 就是从起点（第一条线索）顺着列表寻找。\n还有一个可能是用来说明链表的最流行的例子，那就是火车。一列火车是由一系列车厢（也 称车皮）组成的。每节车厢或车皮都相互连接。你很容易分离一节车皮，改变它的位置，添加或 移除它。\n\n### 创建一个链表\n\n```JavaScript\nfunction LinkedList() {\n  // 一个辅助类,表示一个节点,包含一个指针,指向下一个节点\n  var Node = function(element) {\n    this.element = element\n    this.next = null\n  }\n  // 表示列表项的长度\n  var length = 0\n  // 第一个节点的引用\n  var head = null\n  // 向链表尾部添加一个新的项\n  this.append = function(element) {\n    // 创建一个节点\n    var node = new Node(element),\n      current //用于暂存当前项\n    //如果是空链表 那么 直接让head成为一个节点head.next自动变成null\n    if (head === null) {\n      //列表中第一个节点\n      head = node\n    } else {\n      // 当前的head不为null,说明当前的head有next属性\n      current = head\n      // 循环链表找到最后一项\n      while (current.next) {\n        current = current.next\n      }\n      // 当curent.next等于空时说明已经到了最后一项\n      // 然后把node赋值给最后一项即可\n      current.next = node\n    }\n    // 更新长度\n    length++\n  }\n  // 向链表的特定位置插入一个新的项\n  this.insert = function(position, element) {\n    //检查越界值\n    if (position >= 0 && position <= length) {\n      var node = new Node(element),\n        current = head,\n        previous,\n        index = 0\n      //在第一个位置添加\n      //current是对链表中第一个元素的引用\n      if (position === 0) {\n        // 现在head和node.next都指向了current\n        node.next = current\n        // 把head的引用改为node\n        head = node\n      } else {\n        // 当跳出循环时，current变量将是对想要插入新元素的位置之后一个 元素的引用，\n        // 而previous将是对想要插入新元素的位置之前一个元素的引用。\n        while (index++ < position) {\n          previous = current\n          current = current.next\n        }\n        // 因此，首先需要把新项（node）和当前项链接起来，然后需要改变previous和current之间的链接。\n        // 我们还需要让previous.next 指向node。\n        node.next = current\n        previous.next = node\n      }\n      //更新长度\n      length++\n\n      return true\n    } else {\n      return false\n    }\n  }\n  // 从链表中移除一项\n  this.remove = function(element) {}\n  // 从链表中的特定位置移除一项\n  this.removeAt = function(position) {\n    //检查越界值\n    if (position > -1 && positon < length) {\n      var current = head, //暂存当前项\n        previous, //暂存之前项\n        index = 0 //索引\n      // 如果移除第一项,直接让head置空即可\n      if (position === 0) {\n        head = current.next\n      } else {\n        // 迭代链表\n        while (index++ < position) {\n          // 用previous(上一个)暂存current(当前项),当前项指向下一项\n          previous = current\n          current = current.next\n        }\n        //将previous(上一个))与current(当前的)的下一项连接起来;跳过current,从而移除它\n        previous.next = current.next\n      }\n      // 更新长度\n      length--\n      return current.element\n    } else {\n      return null\n    }\n    // current变量是对要移除元素的引用。previous变量是对要移除元素的前一个元素的引用。\n    // 那么要移除current元素，需要做的就是将previous.next与current.next链接起来。\n    // 因此， 我们的逻辑对这两种情况都管用。\n  }\n  // 返回元素在链表中的索引\n  this.indexOf = function(element) {\n    var current = head,\n      index = -1\n    while (current) {\n      if (element === current.element) {\n        return index\n      }\n      index++\n      current = current.next\n    }\n    return -1\n  }\n  // 返回链表是否为空\n  this.isEmpty = function() {\n    return length === 0\n  }\n  // 返回链表中的元素个数\n  this.size = function() {\n    return length\n  }\n  // 输出值\n  this.toString = function() {\n    var current = head,\n      string = ''\n    while (current) {\n      string = current.element\n      current = current.next\n    }\n    return string\n  }\n  this.getHead = function() {\n    return head\n  }\n  this.print = function() {}\n}\n```\n\n# 双向链表\n\n```JavaScript\n\nfunction DoublyLinkedList() {\n  var Node = function(element) {\n    this.element = element\n    this.next = null\n    this.prev = null\n  }\n\n  var length = 0\n  var head = null\n  var tail = null\n\n  this.insert = function(position, element) {\n    if (position >= 0 && position <= length) {\n      var node = new Node(element),\n        current = head,\n        previous,\n        index = 0\n\n      if (position === 0) {\n        if (!head) {\n          //1\n          head = node\n          tail = node\n        } else {\n          node.next = current\n          current.prev = node //2\n          head = node\n        }\n      } else if (position === length) {\n        current = tail //3\n        current.next = node\n        node.prev = current\n        tail = node\n      } else {\n        while (index++ < position) { //4\n          previous = current\n          current = current.next\n        }\n        node.next = current //5\n        previous.next = node\n\n        current.prev = node\n        node.prev = previous\n      }\n      length++\n      return true\n    } else {\n      return false\n    }\n  }\n}\n```\n","slug":"JavaScript/javascript实现链表","published":1,"updated":"2019-04-16T03:35:36.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctcj000q2e47v26ubo29","content":"<p>链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个 元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针或链接）组成。</p>\n<p>相对于传统的数组，链表的一个好处在于，添加或移除元素的时候不需要移动其他元素。然 而，链表需要使用指针，因此实现链表时需要额外注意。数组的另一个细节是可以直接访问任何 位置的任何元素，而要想访问链表中间的一个元素，需要从起点（表头）开始迭代列表直到找到 所需的元素。<br>现实中也有一些链表的例子。第一个例子就是康加舞队。每个人是一个元素，手就是链向下 一个人的指针。可以向队列中增加人——只需要找到想加入的点，断开连接，插入一个人，再重 新连接起来。</p>\n<p>另一个例子是寻宝游戏。你有一条线索，这条线索是指向寻找下一条线索的地点的指针。你顺着这条链接去下一个地点，得到另一条指向再下一处的线索。得到列表中间的线索的唯一办法， 就是从起点（第一条线索）顺着列表寻找。<br>还有一个可能是用来说明链表的最流行的例子，那就是火车。一列火车是由一系列车厢（也 称车皮）组成的。每节车厢或车皮都相互连接。你很容易分离一节车皮，改变它的位置，添加或 移除它。</p>\n<h3 id=\"创建一个链表\"><a href=\"#创建一个链表\" class=\"headerlink\" title=\"创建一个链表\"></a>创建一个链表</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LinkedList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 一个辅助类,表示一个节点,包含一个指针,指向下一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Node = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.element = element</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 表示列表项的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> length = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"comment\">// 第一个节点的引用</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> head = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"comment\">// 向链表尾部添加一个新的项</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.append = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = <span class=\"keyword\">new</span> Node(element),</span><br><span class=\"line\">      current <span class=\"comment\">//用于暂存当前项</span></span><br><span class=\"line\">    <span class=\"comment\">//如果是空链表 那么 直接让head成为一个节点head.next自动变成null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//列表中第一个节点</span></span><br><span class=\"line\">      head = node</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当前的head不为null,说明当前的head有next属性</span></span><br><span class=\"line\">      current = head</span><br><span class=\"line\">      <span class=\"comment\">// 循环链表找到最后一项</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (current.next) &#123;</span><br><span class=\"line\">        current = current.next</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 当curent.next等于空时说明已经到了最后一项</span></span><br><span class=\"line\">      <span class=\"comment\">// 然后把node赋值给最后一项即可</span></span><br><span class=\"line\">      current.next = node</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 更新长度</span></span><br><span class=\"line\">    length++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 向链表的特定位置插入一个新的项</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">position, element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//检查越界值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &gt;= <span class=\"number\">0</span> &amp;&amp; position &lt;= length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> node = <span class=\"keyword\">new</span> Node(element),</span><br><span class=\"line\">        current = head,</span><br><span class=\"line\">        previous,</span><br><span class=\"line\">        index = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"comment\">//在第一个位置添加</span></span><br><span class=\"line\">      <span class=\"comment\">//current是对链表中第一个元素的引用</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (position === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 现在head和node.next都指向了current</span></span><br><span class=\"line\">        node.next = current</span><br><span class=\"line\">        <span class=\"comment\">// 把head的引用改为node</span></span><br><span class=\"line\">        head = node</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当跳出循环时，current变量将是对想要插入新元素的位置之后一个 元素的引用，</span></span><br><span class=\"line\">        <span class=\"comment\">// 而previous将是对想要插入新元素的位置之前一个元素的引用。</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index++ <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">position</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">          previous = current</span></span><br><span class=\"line\"><span class=\"xml\">          current = current.next</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        // 因此，首先需要把新项（node）和当前项链接起来，然后需要改变previous和current之间的链接。</span></span><br><span class=\"line\"><span class=\"xml\">        // 我们还需要让previous.next 指向node。</span></span><br><span class=\"line\"><span class=\"xml\">        node.next = current</span></span><br><span class=\"line\"><span class=\"xml\">        previous.next = node</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"xml\">      //更新长度</span></span><br><span class=\"line\"><span class=\"xml\">      length++</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">      return true</span></span><br><span class=\"line\"><span class=\"xml\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      return false</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  // 从链表中移除一项</span></span><br><span class=\"line\"><span class=\"xml\">  this.remove = function(element) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">  // 从链表中的特定位置移除一项</span></span><br><span class=\"line\"><span class=\"xml\">  this.removeAt = function(position) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    //检查越界值</span></span><br><span class=\"line\"><span class=\"xml\">    if (position &gt; -1 &amp;&amp; positon <span class=\"tag\">&lt; <span class=\"attr\">length</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">      var current = head, //暂存当前项</span></span><br><span class=\"line\"><span class=\"xml\">        previous, //暂存之前项</span></span><br><span class=\"line\"><span class=\"xml\">        index = 0 //索引</span></span><br><span class=\"line\"><span class=\"xml\">      // 如果移除第一项,直接让head置空即可</span></span><br><span class=\"line\"><span class=\"xml\">      if (position === 0) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        head = current.next</span></span><br><span class=\"line\"><span class=\"xml\">      &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        // 迭代链表</span></span><br><span class=\"line\"><span class=\"xml\">        while (index++ <span class=\"tag\">&lt; <span class=\"attr\">position</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">          // 用previous(上一个)暂存current(当前项),当前项指向下一项</span></span><br><span class=\"line\"><span class=\"xml\">          previous = current</span></span><br><span class=\"line\"><span class=\"xml\">          current = current.next</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        //将previous(上一个))与current(当前的)的下一项连接起来;跳过current,从而移除它</span></span><br><span class=\"line\"><span class=\"xml\">        previous.next = current.next</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"xml\">      // 更新长度</span></span><br><span class=\"line\"><span class=\"xml\">      length--</span></span><br><span class=\"line\"><span class=\"xml\">      return current.element</span></span><br><span class=\"line\"><span class=\"xml\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      return null</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    // current变量是对要移除元素的引用。previous变量是对要移除元素的前一个元素的引用。</span></span><br><span class=\"line\"><span class=\"xml\">    // 那么要移除current元素，需要做的就是将previous.next与current.next链接起来。</span></span><br><span class=\"line\"><span class=\"xml\">    // 因此， 我们的逻辑对这两种情况都管用。</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  // 返回元素在链表中的索引</span></span><br><span class=\"line\"><span class=\"xml\">  this.indexOf = function(element) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    var current = head,</span></span><br><span class=\"line\"><span class=\"xml\">      index = -1</span></span><br><span class=\"line\"><span class=\"xml\">    while (current) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      if (element === current.element) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        return index</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"xml\">      index++</span></span><br><span class=\"line\"><span class=\"xml\">      current = current.next</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    return -1</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  // 返回链表是否为空</span></span><br><span class=\"line\"><span class=\"xml\">  this.isEmpty = function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return length === 0</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  // 返回链表中的元素个数</span></span><br><span class=\"line\"><span class=\"xml\">  this.size = function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return length</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  // 输出值</span></span><br><span class=\"line\"><span class=\"xml\">  this.toString = function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    var current = head,</span></span><br><span class=\"line\"><span class=\"xml\">      string = ''</span></span><br><span class=\"line\"><span class=\"xml\">    while (current) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      string = current.element</span></span><br><span class=\"line\"><span class=\"xml\">      current = current.next</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    return string</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  this.getHead = function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return head</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  this.print = function() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DoublyLinkedList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Node = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.element = element</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.prev = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> length = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> head = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> tail = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">position, element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &gt;= <span class=\"number\">0</span> &amp;&amp; position &lt;= length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> node = <span class=\"keyword\">new</span> Node(element),</span><br><span class=\"line\">        current = head,</span><br><span class=\"line\">        previous,</span><br><span class=\"line\">        index = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (position === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//1</span></span><br><span class=\"line\">          head = node</span><br><span class=\"line\">          tail = node</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          node.next = current</span><br><span class=\"line\">          current.prev = node <span class=\"comment\">//2</span></span><br><span class=\"line\">          head = node</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position === length) &#123;</span><br><span class=\"line\">        current = tail <span class=\"comment\">//3</span></span><br><span class=\"line\">        current.next = node</span><br><span class=\"line\">        node.prev = current</span><br><span class=\"line\">        tail = node</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index++ <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">position</span>) &#123; //<span class=\"attr\">4</span></span></span></span><br><span class=\"line\"><span class=\"xml\">          previous = current</span></span><br><span class=\"line\"><span class=\"xml\">          current = current.next</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        node.next = current //5</span></span><br><span class=\"line\"><span class=\"xml\">        previous.next = node</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        current.prev = node</span></span><br><span class=\"line\"><span class=\"xml\">        node.prev = previous</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"xml\">      length++</span></span><br><span class=\"line\"><span class=\"xml\">      return true</span></span><br><span class=\"line\"><span class=\"xml\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      return false</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个 元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针或链接）组成。</p>\n<p>相对于传统的数组，链表的一个好处在于，添加或移除元素的时候不需要移动其他元素。然 而，链表需要使用指针，因此实现链表时需要额外注意。数组的另一个细节是可以直接访问任何 位置的任何元素，而要想访问链表中间的一个元素，需要从起点（表头）开始迭代列表直到找到 所需的元素。<br>现实中也有一些链表的例子。第一个例子就是康加舞队。每个人是一个元素，手就是链向下 一个人的指针。可以向队列中增加人——只需要找到想加入的点，断开连接，插入一个人，再重 新连接起来。</p>\n<p>另一个例子是寻宝游戏。你有一条线索，这条线索是指向寻找下一条线索的地点的指针。你顺着这条链接去下一个地点，得到另一条指向再下一处的线索。得到列表中间的线索的唯一办法， 就是从起点（第一条线索）顺着列表寻找。<br>还有一个可能是用来说明链表的最流行的例子，那就是火车。一列火车是由一系列车厢（也 称车皮）组成的。每节车厢或车皮都相互连接。你很容易分离一节车皮，改变它的位置，添加或 移除它。</p>\n<h3 id=\"创建一个链表\"><a href=\"#创建一个链表\" class=\"headerlink\" title=\"创建一个链表\"></a>创建一个链表</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LinkedList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 一个辅助类,表示一个节点,包含一个指针,指向下一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Node = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.element = element</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 表示列表项的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> length = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"comment\">// 第一个节点的引用</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> head = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"comment\">// 向链表尾部添加一个新的项</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.append = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = <span class=\"keyword\">new</span> Node(element),</span><br><span class=\"line\">      current <span class=\"comment\">//用于暂存当前项</span></span><br><span class=\"line\">    <span class=\"comment\">//如果是空链表 那么 直接让head成为一个节点head.next自动变成null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//列表中第一个节点</span></span><br><span class=\"line\">      head = node</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当前的head不为null,说明当前的head有next属性</span></span><br><span class=\"line\">      current = head</span><br><span class=\"line\">      <span class=\"comment\">// 循环链表找到最后一项</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (current.next) &#123;</span><br><span class=\"line\">        current = current.next</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 当curent.next等于空时说明已经到了最后一项</span></span><br><span class=\"line\">      <span class=\"comment\">// 然后把node赋值给最后一项即可</span></span><br><span class=\"line\">      current.next = node</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 更新长度</span></span><br><span class=\"line\">    length++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 向链表的特定位置插入一个新的项</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">position, element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//检查越界值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &gt;= <span class=\"number\">0</span> &amp;&amp; position &lt;= length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> node = <span class=\"keyword\">new</span> Node(element),</span><br><span class=\"line\">        current = head,</span><br><span class=\"line\">        previous,</span><br><span class=\"line\">        index = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"comment\">//在第一个位置添加</span></span><br><span class=\"line\">      <span class=\"comment\">//current是对链表中第一个元素的引用</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (position === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 现在head和node.next都指向了current</span></span><br><span class=\"line\">        node.next = current</span><br><span class=\"line\">        <span class=\"comment\">// 把head的引用改为node</span></span><br><span class=\"line\">        head = node</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当跳出循环时，current变量将是对想要插入新元素的位置之后一个 元素的引用，</span></span><br><span class=\"line\">        <span class=\"comment\">// 而previous将是对想要插入新元素的位置之前一个元素的引用。</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index++ <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">position</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">          previous = current</span></span><br><span class=\"line\"><span class=\"xml\">          current = current.next</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        // 因此，首先需要把新项（node）和当前项链接起来，然后需要改变previous和current之间的链接。</span></span><br><span class=\"line\"><span class=\"xml\">        // 我们还需要让previous.next 指向node。</span></span><br><span class=\"line\"><span class=\"xml\">        node.next = current</span></span><br><span class=\"line\"><span class=\"xml\">        previous.next = node</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"xml\">      //更新长度</span></span><br><span class=\"line\"><span class=\"xml\">      length++</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">      return true</span></span><br><span class=\"line\"><span class=\"xml\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      return false</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  // 从链表中移除一项</span></span><br><span class=\"line\"><span class=\"xml\">  this.remove = function(element) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">  // 从链表中的特定位置移除一项</span></span><br><span class=\"line\"><span class=\"xml\">  this.removeAt = function(position) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    //检查越界值</span></span><br><span class=\"line\"><span class=\"xml\">    if (position &gt; -1 &amp;&amp; positon <span class=\"tag\">&lt; <span class=\"attr\">length</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">      var current = head, //暂存当前项</span></span><br><span class=\"line\"><span class=\"xml\">        previous, //暂存之前项</span></span><br><span class=\"line\"><span class=\"xml\">        index = 0 //索引</span></span><br><span class=\"line\"><span class=\"xml\">      // 如果移除第一项,直接让head置空即可</span></span><br><span class=\"line\"><span class=\"xml\">      if (position === 0) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        head = current.next</span></span><br><span class=\"line\"><span class=\"xml\">      &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        // 迭代链表</span></span><br><span class=\"line\"><span class=\"xml\">        while (index++ <span class=\"tag\">&lt; <span class=\"attr\">position</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">          // 用previous(上一个)暂存current(当前项),当前项指向下一项</span></span><br><span class=\"line\"><span class=\"xml\">          previous = current</span></span><br><span class=\"line\"><span class=\"xml\">          current = current.next</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        //将previous(上一个))与current(当前的)的下一项连接起来;跳过current,从而移除它</span></span><br><span class=\"line\"><span class=\"xml\">        previous.next = current.next</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"xml\">      // 更新长度</span></span><br><span class=\"line\"><span class=\"xml\">      length--</span></span><br><span class=\"line\"><span class=\"xml\">      return current.element</span></span><br><span class=\"line\"><span class=\"xml\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      return null</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    // current变量是对要移除元素的引用。previous变量是对要移除元素的前一个元素的引用。</span></span><br><span class=\"line\"><span class=\"xml\">    // 那么要移除current元素，需要做的就是将previous.next与current.next链接起来。</span></span><br><span class=\"line\"><span class=\"xml\">    // 因此， 我们的逻辑对这两种情况都管用。</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  // 返回元素在链表中的索引</span></span><br><span class=\"line\"><span class=\"xml\">  this.indexOf = function(element) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    var current = head,</span></span><br><span class=\"line\"><span class=\"xml\">      index = -1</span></span><br><span class=\"line\"><span class=\"xml\">    while (current) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      if (element === current.element) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        return index</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"xml\">      index++</span></span><br><span class=\"line\"><span class=\"xml\">      current = current.next</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    return -1</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  // 返回链表是否为空</span></span><br><span class=\"line\"><span class=\"xml\">  this.isEmpty = function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return length === 0</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  // 返回链表中的元素个数</span></span><br><span class=\"line\"><span class=\"xml\">  this.size = function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return length</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  // 输出值</span></span><br><span class=\"line\"><span class=\"xml\">  this.toString = function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    var current = head,</span></span><br><span class=\"line\"><span class=\"xml\">      string = ''</span></span><br><span class=\"line\"><span class=\"xml\">    while (current) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      string = current.element</span></span><br><span class=\"line\"><span class=\"xml\">      current = current.next</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    return string</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  this.getHead = function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return head</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  this.print = function() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DoublyLinkedList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Node = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.element = element</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.prev = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> length = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> head = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> tail = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">position, element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &gt;= <span class=\"number\">0</span> &amp;&amp; position &lt;= length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> node = <span class=\"keyword\">new</span> Node(element),</span><br><span class=\"line\">        current = head,</span><br><span class=\"line\">        previous,</span><br><span class=\"line\">        index = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (position === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//1</span></span><br><span class=\"line\">          head = node</span><br><span class=\"line\">          tail = node</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          node.next = current</span><br><span class=\"line\">          current.prev = node <span class=\"comment\">//2</span></span><br><span class=\"line\">          head = node</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position === length) &#123;</span><br><span class=\"line\">        current = tail <span class=\"comment\">//3</span></span><br><span class=\"line\">        current.next = node</span><br><span class=\"line\">        node.prev = current</span><br><span class=\"line\">        tail = node</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index++ <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">position</span>) &#123; //<span class=\"attr\">4</span></span></span></span><br><span class=\"line\"><span class=\"xml\">          previous = current</span></span><br><span class=\"line\"><span class=\"xml\">          current = current.next</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        node.next = current //5</span></span><br><span class=\"line\"><span class=\"xml\">        previous.next = node</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        current.prev = node</span></span><br><span class=\"line\"><span class=\"xml\">        node.prev = previous</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"xml\">      length++</span></span><br><span class=\"line\"><span class=\"xml\">      return true</span></span><br><span class=\"line\"><span class=\"xml\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      return false</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"javascript 实现队列","date":"2017-01-13T08:07:32.000Z","_content":"\n#### 什么是队列\n\n队列是遵循 FIFO（First In First Out，先进先出，也称为先来先服务）原则的一组有序的项。 队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。\n\n在计算机科学中，一个常见的例子就是打印队列。比如说我们需要打印五份文档。我们会打 开每个文档，然后点击打印按钮。每个文档都会被发送至打印队列。第一个发送到打印队列的文 档会首先被打印，以此类推，直到打印完所有文档\n\n```javascript\n// 创建队列类方法\nclass Queue {\n  constructor() {\n    this.items = []\n  }\n  //相队列尾部添加一个元素\n  enqueue(element) {\n    this.items.push(element)\n  }\n  //移除队列的一个个元素\n  dequeue() {\n    return this.items.shift()\n  }\n  // 返回队列第一个元素,第一个被添加的元素\n  front() {\n    return this.items[0]\n  }\n  // 查看队列是否为空\n  isEmpty() {\n    return this.items.length == 0\n  }\n  // 清除队列\n  clear() {\n    this.items = []\n  }\n  // 返回队列包含的元素个数\n  size() {\n    return this.items.length\n  }\n  print() {\n    console.log(this.items.toString())\n  }\n}\n//测试用例\nconst queue = new Queue()\nconsole.log(queue.isEmpty())\nqueue.enqueue('John')\nqueue.enqueue('Jack')\nqueue.print()\n```\n\n#### 优先队列\n\n队列大量应用在计算机科学以及我们的生活中，我们在之前话题中实现的默认队列也有一些 修改版本。\n其中一个修改版就是优先队列。元素的添加和移除是基于优先级的。一个现实的例子就是机 场登机的顺序。头等舱和商务舱乘客的优先级要高于经济舱乘客。在有些国家，老年人和孕妇（或 带小孩的妇女）登机时也享有高于其他乘客的优先级。\n另一个现实中的例子是医院的（急诊科）候诊室。医生会优先处理病情比较严重的患者。通 常，护士会鉴别分类，根据患者病情的严重程度放号。\n\n实现一个优先队列，有两种选项：设置优先级，然后在正确的位置添加元素；或者用入列操 作添加元素，然后按照优先级移除它们。\n\n```JavaScript\n    function PriorityQuene() {\n      var items = []\n      //创建一个特殊的元素.包含优先级\n      function QueneElement(element, priority) {\n        this.element = element\n        this.priority = priority\n      }\n      // 入队方法\n      this.enquene = function (element, priority) {\n        // 实例化元素\n        var quemeElement = new QueneElement(element, priority)\n        // 如果队列是空的那么直接push\n        if (this.isEmpty()) {\n          this.push(quemeElement)\n        } else {\n          // 否则遍历队列中的元素比较优先级\n          var added = false\n          for (var i = 0; i < items.length; i++) {\n            // 如果新的元素优先级比更高那么在它前面push(1代表最高优先级\n            if (quemeElement.priority < items[i].priority) {\n              items.splice(i, 0, quemeElement)\n              added = true\n              break\n            }\n          }\n          // 如果没有找到更高的优先级那么自己push到后面\n          if(!added){\n            items.push(quemeElement)\n          }\n        }\n      }\n    }\n\n```\n\n<script>\nexport default {\n  mounted() {\n    class Queue {\n      constructor() {\n        this.items = []\n      }\n      enqueue(element) {\n        this.items.push(element)\n      }\n      dequeue() {\n        return this.items.shift()\n      }\n      front() {\n        return this.items[0]\n      }\n      isEmpty() {\n        return this.items.length == 0\n      }\n      clear() {\n        this.items = [];\n      }\n      size() {\n        return this.items.length\n      }\n      print() {\n        console.log(this.items.toString())\n      }\n    }\n\n    var queue = new Queue(); \n    console.log(queue.isEmpty()); \n    queue.enqueue(\"John\"); \n    queue.enqueue(\"Jack\"); \n    queue.print();\n  },\n}\n</script>\n","source":"_posts/JavaScript/javascript实现队列.md","raw":"---\ntitle: javascript 实现队列\ndate: 2017-01-13 16:07:32\ntags:\n  - JavaScript\n  - 算法\ncategory: 前端\n---\n\n#### 什么是队列\n\n队列是遵循 FIFO（First In First Out，先进先出，也称为先来先服务）原则的一组有序的项。 队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。\n\n在计算机科学中，一个常见的例子就是打印队列。比如说我们需要打印五份文档。我们会打 开每个文档，然后点击打印按钮。每个文档都会被发送至打印队列。第一个发送到打印队列的文 档会首先被打印，以此类推，直到打印完所有文档\n\n```javascript\n// 创建队列类方法\nclass Queue {\n  constructor() {\n    this.items = []\n  }\n  //相队列尾部添加一个元素\n  enqueue(element) {\n    this.items.push(element)\n  }\n  //移除队列的一个个元素\n  dequeue() {\n    return this.items.shift()\n  }\n  // 返回队列第一个元素,第一个被添加的元素\n  front() {\n    return this.items[0]\n  }\n  // 查看队列是否为空\n  isEmpty() {\n    return this.items.length == 0\n  }\n  // 清除队列\n  clear() {\n    this.items = []\n  }\n  // 返回队列包含的元素个数\n  size() {\n    return this.items.length\n  }\n  print() {\n    console.log(this.items.toString())\n  }\n}\n//测试用例\nconst queue = new Queue()\nconsole.log(queue.isEmpty())\nqueue.enqueue('John')\nqueue.enqueue('Jack')\nqueue.print()\n```\n\n#### 优先队列\n\n队列大量应用在计算机科学以及我们的生活中，我们在之前话题中实现的默认队列也有一些 修改版本。\n其中一个修改版就是优先队列。元素的添加和移除是基于优先级的。一个现实的例子就是机 场登机的顺序。头等舱和商务舱乘客的优先级要高于经济舱乘客。在有些国家，老年人和孕妇（或 带小孩的妇女）登机时也享有高于其他乘客的优先级。\n另一个现实中的例子是医院的（急诊科）候诊室。医生会优先处理病情比较严重的患者。通 常，护士会鉴别分类，根据患者病情的严重程度放号。\n\n实现一个优先队列，有两种选项：设置优先级，然后在正确的位置添加元素；或者用入列操 作添加元素，然后按照优先级移除它们。\n\n```JavaScript\n    function PriorityQuene() {\n      var items = []\n      //创建一个特殊的元素.包含优先级\n      function QueneElement(element, priority) {\n        this.element = element\n        this.priority = priority\n      }\n      // 入队方法\n      this.enquene = function (element, priority) {\n        // 实例化元素\n        var quemeElement = new QueneElement(element, priority)\n        // 如果队列是空的那么直接push\n        if (this.isEmpty()) {\n          this.push(quemeElement)\n        } else {\n          // 否则遍历队列中的元素比较优先级\n          var added = false\n          for (var i = 0; i < items.length; i++) {\n            // 如果新的元素优先级比更高那么在它前面push(1代表最高优先级\n            if (quemeElement.priority < items[i].priority) {\n              items.splice(i, 0, quemeElement)\n              added = true\n              break\n            }\n          }\n          // 如果没有找到更高的优先级那么自己push到后面\n          if(!added){\n            items.push(quemeElement)\n          }\n        }\n      }\n    }\n\n```\n\n<script>\nexport default {\n  mounted() {\n    class Queue {\n      constructor() {\n        this.items = []\n      }\n      enqueue(element) {\n        this.items.push(element)\n      }\n      dequeue() {\n        return this.items.shift()\n      }\n      front() {\n        return this.items[0]\n      }\n      isEmpty() {\n        return this.items.length == 0\n      }\n      clear() {\n        this.items = [];\n      }\n      size() {\n        return this.items.length\n      }\n      print() {\n        console.log(this.items.toString())\n      }\n    }\n\n    var queue = new Queue(); \n    console.log(queue.isEmpty()); \n    queue.enqueue(\"John\"); \n    queue.enqueue(\"Jack\"); \n    queue.print();\n  },\n}\n</script>\n","slug":"JavaScript/javascript实现队列","published":1,"updated":"2019-04-16T03:35:39.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctck000t2e472915bgw2","content":"<h4 id=\"什么是队列\"><a href=\"#什么是队列\" class=\"headerlink\" title=\"什么是队列\"></a>什么是队列</h4><p>队列是遵循 FIFO（First In First Out，先进先出，也称为先来先服务）原则的一组有序的项。 队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。</p>\n<p>在计算机科学中，一个常见的例子就是打印队列。比如说我们需要打印五份文档。我们会打 开每个文档，然后点击打印按钮。每个文档都会被发送至打印队列。第一个发送到打印队列的文 档会首先被打印，以此类推，直到打印完所有文档</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建队列类方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.items = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//相队列尾部添加一个元素</span></span><br><span class=\"line\">  enqueue(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.items.push(element)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//移除队列的一个个元素</span></span><br><span class=\"line\">  dequeue() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.shift()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回队列第一个元素,第一个被添加的元素</span></span><br><span class=\"line\">  front() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 查看队列是否为空</span></span><br><span class=\"line\">  isEmpty() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.length == <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 清除队列</span></span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.items = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回队列包含的元素个数</span></span><br><span class=\"line\">  size() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  print() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.items.toString())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试用例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> queue = <span class=\"keyword\">new</span> Queue()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(queue.isEmpty())</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">'John'</span>)</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">'Jack'</span>)</span><br><span class=\"line\">queue.print()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h4><p>队列大量应用在计算机科学以及我们的生活中，我们在之前话题中实现的默认队列也有一些 修改版本。<br>其中一个修改版就是优先队列。元素的添加和移除是基于优先级的。一个现实的例子就是机 场登机的顺序。头等舱和商务舱乘客的优先级要高于经济舱乘客。在有些国家，老年人和孕妇（或 带小孩的妇女）登机时也享有高于其他乘客的优先级。<br>另一个现实中的例子是医院的（急诊科）候诊室。医生会优先处理病情比较严重的患者。通 常，护士会鉴别分类，根据患者病情的严重程度放号。</p>\n<p>实现一个优先队列，有两种选项：设置优先级，然后在正确的位置添加元素；或者用入列操 作添加元素，然后按照优先级移除它们。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PriorityQuene</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> items = []</span><br><span class=\"line\">  <span class=\"comment\">//创建一个特殊的元素.包含优先级</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QueneElement</span>(<span class=\"params\">element, priority</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.element = element</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.priority = priority</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 入队方法</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.enquene = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, priority</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化元素</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> quemeElement = <span class=\"keyword\">new</span> QueneElement(element, priority)</span><br><span class=\"line\">    <span class=\"comment\">// 如果队列是空的那么直接push</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.push(quemeElement)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 否则遍历队列中的元素比较优先级</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> added = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果新的元素优先级比更高那么在它前面push(1代表最高优先级</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (quemeElement.priority &lt; items[i].priority) &#123;</span><br><span class=\"line\">          items.splice(i, <span class=\"number\">0</span>, quemeElement)</span><br><span class=\"line\">          added = <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果没有找到更高的优先级那么自己push到后面</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!added)&#123;</span><br><span class=\"line\">        items.push(quemeElement)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<script>\nexport default {\n  mounted() {\n    class Queue {\n      constructor() {\n        this.items = []\n      }\n      enqueue(element) {\n        this.items.push(element)\n      }\n      dequeue() {\n        return this.items.shift()\n      }\n      front() {\n        return this.items[0]\n      }\n      isEmpty() {\n        return this.items.length == 0\n      }\n      clear() {\n        this.items = [];\n      }\n      size() {\n        return this.items.length\n      }\n      print() {\n        console.log(this.items.toString())\n      }\n    }\n\n    var queue = new Queue(); \n    console.log(queue.isEmpty()); \n    queue.enqueue(\"John\"); \n    queue.enqueue(\"Jack\"); \n    queue.print();\n  },\n}\n</script>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是队列\"><a href=\"#什么是队列\" class=\"headerlink\" title=\"什么是队列\"></a>什么是队列</h4><p>队列是遵循 FIFO（First In First Out，先进先出，也称为先来先服务）原则的一组有序的项。 队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。</p>\n<p>在计算机科学中，一个常见的例子就是打印队列。比如说我们需要打印五份文档。我们会打 开每个文档，然后点击打印按钮。每个文档都会被发送至打印队列。第一个发送到打印队列的文 档会首先被打印，以此类推，直到打印完所有文档</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建队列类方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.items = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//相队列尾部添加一个元素</span></span><br><span class=\"line\">  enqueue(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.items.push(element)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//移除队列的一个个元素</span></span><br><span class=\"line\">  dequeue() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.shift()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回队列第一个元素,第一个被添加的元素</span></span><br><span class=\"line\">  front() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 查看队列是否为空</span></span><br><span class=\"line\">  isEmpty() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.length == <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 清除队列</span></span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.items = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回队列包含的元素个数</span></span><br><span class=\"line\">  size() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  print() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.items.toString())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试用例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> queue = <span class=\"keyword\">new</span> Queue()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(queue.isEmpty())</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">'John'</span>)</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">'Jack'</span>)</span><br><span class=\"line\">queue.print()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h4><p>队列大量应用在计算机科学以及我们的生活中，我们在之前话题中实现的默认队列也有一些 修改版本。<br>其中一个修改版就是优先队列。元素的添加和移除是基于优先级的。一个现实的例子就是机 场登机的顺序。头等舱和商务舱乘客的优先级要高于经济舱乘客。在有些国家，老年人和孕妇（或 带小孩的妇女）登机时也享有高于其他乘客的优先级。<br>另一个现实中的例子是医院的（急诊科）候诊室。医生会优先处理病情比较严重的患者。通 常，护士会鉴别分类，根据患者病情的严重程度放号。</p>\n<p>实现一个优先队列，有两种选项：设置优先级，然后在正确的位置添加元素；或者用入列操 作添加元素，然后按照优先级移除它们。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PriorityQuene</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> items = []</span><br><span class=\"line\">  <span class=\"comment\">//创建一个特殊的元素.包含优先级</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QueneElement</span>(<span class=\"params\">element, priority</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.element = element</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.priority = priority</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 入队方法</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.enquene = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, priority</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化元素</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> quemeElement = <span class=\"keyword\">new</span> QueneElement(element, priority)</span><br><span class=\"line\">    <span class=\"comment\">// 如果队列是空的那么直接push</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.push(quemeElement)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 否则遍历队列中的元素比较优先级</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> added = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果新的元素优先级比更高那么在它前面push(1代表最高优先级</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (quemeElement.priority &lt; items[i].priority) &#123;</span><br><span class=\"line\">          items.splice(i, <span class=\"number\">0</span>, quemeElement)</span><br><span class=\"line\">          added = <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果没有找到更高的优先级那么自己push到后面</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!added)&#123;</span><br><span class=\"line\">        items.push(quemeElement)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<script>\nexport default {\n  mounted() {\n    class Queue {\n      constructor() {\n        this.items = []\n      }\n      enqueue(element) {\n        this.items.push(element)\n      }\n      dequeue() {\n        return this.items.shift()\n      }\n      front() {\n        return this.items[0]\n      }\n      isEmpty() {\n        return this.items.length == 0\n      }\n      clear() {\n        this.items = [];\n      }\n      size() {\n        return this.items.length\n      }\n      print() {\n        console.log(this.items.toString())\n      }\n    }\n\n    var queue = new Queue(); \n    console.log(queue.isEmpty()); \n    queue.enqueue(\"John\"); \n    queue.enqueue(\"Jack\"); \n    queue.print();\n  },\n}\n</script>\n"},{"title":"javascript 实现集合","date":"2018-01-13T08:07:32.000Z","_content":"\n在数学中，集合是一组 不同的对象（的集）。 比如说，一个由大于或等于 0 的整数组成的自然数集合：N = {0, 1, 2, 3, 4, 5, 6, …}。集合中 的对象列表用“{}”（大括号）包围。\n还有一个概念叫空集。空集就是不包含任何元素的集合。比如 24 和 29 之间的素数集合。由于 24 和 29 之间没有素数（除了 1 和自身，没有其他正因数的大于 1 的自然数），这个集合就是空集。 空集用“{ }”表示。\n你也可以把集合想象成一个既没有重复元素，也没有顺序概念的数组。\n在数学中，集合也有并集、交集、差集等基本操作。\n\n- 目前的 JavaScript 实现是基于 2011 年 6 月发布的 ECMAScript 5.1（现代浏览器均已支持），它包 括了我们在之前章节已经提到过的 Array 类的实现。ECMAScript 6（官方名称 ECMAScript 2015， 2015 年 6 月发布）包括了 Set 类的实现。\n\n```javascript\nfunction Set() {\n  var items = {}\n\n  this.has = function(value) {\n    return items.hasOwnProperty(value)\n  }\n\n  this.add = function(value) {\n    if (!this.has(value)) {\n      items[value] = value\n      return true\n    }\n    return false\n  }\n  this.remove = function(value) {\n    if (this.has(value)) {\n      delete items[value]\n      return true\n    }\n    return false\n  }\n\n  this.clear = function() {\n    items = {}\n  }\n  this.size = function() {\n    return Object.keys(items).length\n  }\n  this.values = function() {\n    return Object.keys(items)\n  }\n\n  //并集\n  this.intersection = function(otherSet) {\n    var intersectionSet = new Set()\n    var values = this.values()\n\n    for (var i = 0; i < values.length; i++) {\n      if (otherSet.has(values[i])) {\n        intersectionSet.add(values[i])\n      }\n    }\n    return intersectionSet\n  }\n  //差集\n  this.difference = function(otherSet) {\n    var differenceSet = new Set()\n\n    var values = this.values()\n\n    for (var i = 0; i < values.length; i++) {\n      if (!otherSet.has(values[i])) {\n        differenceSet.add(values[i])\n      }\n    }\n\n    return differenceSet\n  }\n  //子集\n  this.subset = function(otherSet) {\n    if (this.size() > otherSet.size()) {\n      return false\n    } else {\n      var values = this.values()\n      for (var i = 0; i < values.length; i++) {\n        if (!otherSet.has(values[i])) {\n          return false\n        }\n      }\n      return true\n    }\n  }\n}\n```\n","source":"_posts/JavaScript/javascript实现集合.md","raw":"---\ntitle: javascript 实现集合\ndate: 2018-01-13 16:07:32\ntags:\n  - JavaScript\n  - 算法\ncategory: 前端\n---\n\n在数学中，集合是一组 不同的对象（的集）。 比如说，一个由大于或等于 0 的整数组成的自然数集合：N = {0, 1, 2, 3, 4, 5, 6, …}。集合中 的对象列表用“{}”（大括号）包围。\n还有一个概念叫空集。空集就是不包含任何元素的集合。比如 24 和 29 之间的素数集合。由于 24 和 29 之间没有素数（除了 1 和自身，没有其他正因数的大于 1 的自然数），这个集合就是空集。 空集用“{ }”表示。\n你也可以把集合想象成一个既没有重复元素，也没有顺序概念的数组。\n在数学中，集合也有并集、交集、差集等基本操作。\n\n- 目前的 JavaScript 实现是基于 2011 年 6 月发布的 ECMAScript 5.1（现代浏览器均已支持），它包 括了我们在之前章节已经提到过的 Array 类的实现。ECMAScript 6（官方名称 ECMAScript 2015， 2015 年 6 月发布）包括了 Set 类的实现。\n\n```javascript\nfunction Set() {\n  var items = {}\n\n  this.has = function(value) {\n    return items.hasOwnProperty(value)\n  }\n\n  this.add = function(value) {\n    if (!this.has(value)) {\n      items[value] = value\n      return true\n    }\n    return false\n  }\n  this.remove = function(value) {\n    if (this.has(value)) {\n      delete items[value]\n      return true\n    }\n    return false\n  }\n\n  this.clear = function() {\n    items = {}\n  }\n  this.size = function() {\n    return Object.keys(items).length\n  }\n  this.values = function() {\n    return Object.keys(items)\n  }\n\n  //并集\n  this.intersection = function(otherSet) {\n    var intersectionSet = new Set()\n    var values = this.values()\n\n    for (var i = 0; i < values.length; i++) {\n      if (otherSet.has(values[i])) {\n        intersectionSet.add(values[i])\n      }\n    }\n    return intersectionSet\n  }\n  //差集\n  this.difference = function(otherSet) {\n    var differenceSet = new Set()\n\n    var values = this.values()\n\n    for (var i = 0; i < values.length; i++) {\n      if (!otherSet.has(values[i])) {\n        differenceSet.add(values[i])\n      }\n    }\n\n    return differenceSet\n  }\n  //子集\n  this.subset = function(otherSet) {\n    if (this.size() > otherSet.size()) {\n      return false\n    } else {\n      var values = this.values()\n      for (var i = 0; i < values.length; i++) {\n        if (!otherSet.has(values[i])) {\n          return false\n        }\n      }\n      return true\n    }\n  }\n}\n```\n","slug":"JavaScript/javascript实现集合","published":1,"updated":"2019-04-16T03:35:42.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctcl000w2e471zo13uwf","content":"<p>在数学中，集合是一组 不同的对象（的集）。 比如说，一个由大于或等于 0 的整数组成的自然数集合：N = {0, 1, 2, 3, 4, 5, 6, …}。集合中 的对象列表用“{}”（大括号）包围。<br>还有一个概念叫空集。空集就是不包含任何元素的集合。比如 24 和 29 之间的素数集合。由于 24 和 29 之间没有素数（除了 1 和自身，没有其他正因数的大于 1 的自然数），这个集合就是空集。 空集用“{ }”表示。<br>你也可以把集合想象成一个既没有重复元素，也没有顺序概念的数组。<br>在数学中，集合也有并集、交集、差集等基本操作。</p>\n<ul>\n<li>目前的 JavaScript 实现是基于 2011 年 6 月发布的 ECMAScript 5.1（现代浏览器均已支持），它包 括了我们在之前章节已经提到过的 Array 类的实现。ECMAScript 6（官方名称 ECMAScript 2015， 2015 年 6 月发布）包括了 Set 类的实现。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> items = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items.hasOwnProperty(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.has(value)) &#123;</span><br><span class=\"line\">      items[value] = value</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> items[value]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    items = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(items).length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.values = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(items)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//并集</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">otherSet</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> intersectionSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> values = <span class=\"keyword\">this</span>.values()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; values.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (otherSet.has(values[i])) &#123;</span><br><span class=\"line\">        intersectionSet.add(values[i])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> intersectionSet</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//差集</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.difference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">otherSet</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> differenceSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> values = <span class=\"keyword\">this</span>.values()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; values.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!otherSet.has(values[i])) &#123;</span><br><span class=\"line\">        differenceSet.add(values[i])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> differenceSet</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//子集</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subset = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">otherSet</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.size() &gt; otherSet.size()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> values = <span class=\"keyword\">this</span>.values()</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; values.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!otherSet.has(values[i])) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>在数学中，集合是一组 不同的对象（的集）。 比如说，一个由大于或等于 0 的整数组成的自然数集合：N = {0, 1, 2, 3, 4, 5, 6, …}。集合中 的对象列表用“{}”（大括号）包围。<br>还有一个概念叫空集。空集就是不包含任何元素的集合。比如 24 和 29 之间的素数集合。由于 24 和 29 之间没有素数（除了 1 和自身，没有其他正因数的大于 1 的自然数），这个集合就是空集。 空集用“{ }”表示。<br>你也可以把集合想象成一个既没有重复元素，也没有顺序概念的数组。<br>在数学中，集合也有并集、交集、差集等基本操作。</p>\n<ul>\n<li>目前的 JavaScript 实现是基于 2011 年 6 月发布的 ECMAScript 5.1（现代浏览器均已支持），它包 括了我们在之前章节已经提到过的 Array 类的实现。ECMAScript 6（官方名称 ECMAScript 2015， 2015 年 6 月发布）包括了 Set 类的实现。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> items = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items.hasOwnProperty(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.has(value)) &#123;</span><br><span class=\"line\">      items[value] = value</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> items[value]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    items = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(items).length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.values = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(items)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//并集</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">otherSet</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> intersectionSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> values = <span class=\"keyword\">this</span>.values()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; values.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (otherSet.has(values[i])) &#123;</span><br><span class=\"line\">        intersectionSet.add(values[i])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> intersectionSet</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//差集</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.difference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">otherSet</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> differenceSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> values = <span class=\"keyword\">this</span>.values()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; values.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!otherSet.has(values[i])) &#123;</span><br><span class=\"line\">        differenceSet.add(values[i])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> differenceSet</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//子集</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subset = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">otherSet</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.size() &gt; otherSet.size()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> values = <span class=\"keyword\">this</span>.values()</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; values.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!otherSet.has(values[i])) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"观察者模式","date":"2019-03-13T08:07:32.000Z","_content":"\n","source":"_posts/JavaScript/观察者模式.md","raw":"---\ntitle: 观察者模式\ndate: 2019-03-13 16:07:32\ntags:\n  - 设计模式\ncategory: 前端\n\n---\n\n","slug":"JavaScript/观察者模式","published":1,"updated":"2019-06-11T02:35:40.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctcm000z2e47efhvhq07","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"javascript 实现图","date":"2018-01-13T08:07:32.000Z","_content":"\n# Nodejs ORM Sequelize 的基础配置\n\nORM\n\n> Object-Relational Mapping，把关系数据库的表结构映射到对象上。\n\n使用 npm 安装 Sequelize 与 mysql\n\nmysql 是驱动我们不使用但是 Sequelize 会使用\n","source":"_posts/Nodejs/Sequelize的配置.md","raw":"---\ntitle: javascript 实现图\ndate: 2018-01-13 16:07:32\ntags:\n  - Koa\n  - Sequelize\ncategory: Nodejs\n---\n\n# Nodejs ORM Sequelize 的基础配置\n\nORM\n\n> Object-Relational Mapping，把关系数据库的表结构映射到对象上。\n\n使用 npm 安装 Sequelize 与 mysql\n\nmysql 是驱动我们不使用但是 Sequelize 会使用\n","slug":"Nodejs/Sequelize的配置","published":1,"updated":"2019-04-16T03:36:39.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctco00122e47o37fzwut","content":"<h1 id=\"Nodejs-ORM-Sequelize-的基础配置\"><a href=\"#Nodejs-ORM-Sequelize-的基础配置\" class=\"headerlink\" title=\"Nodejs ORM Sequelize 的基础配置\"></a>Nodejs ORM Sequelize 的基础配置</h1><p>ORM</p>\n<blockquote>\n<p>Object-Relational Mapping，把关系数据库的表结构映射到对象上。</p>\n</blockquote>\n<p>使用 npm 安装 Sequelize 与 mysql</p>\n<p>mysql 是驱动我们不使用但是 Sequelize 会使用</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Nodejs-ORM-Sequelize-的基础配置\"><a href=\"#Nodejs-ORM-Sequelize-的基础配置\" class=\"headerlink\" title=\"Nodejs ORM Sequelize 的基础配置\"></a>Nodejs ORM Sequelize 的基础配置</h1><p>ORM</p>\n<blockquote>\n<p>Object-Relational Mapping，把关系数据库的表结构映射到对象上。</p>\n</blockquote>\n<p>使用 npm 安装 Sequelize 与 mysql</p>\n<p>mysql 是驱动我们不使用但是 Sequelize 会使用</p>\n"},{"title":"vscode配置","date":"2018-01-13T08:07:32.000Z","_content":"\n```json\n{\n  \"editor.fontFamily\": \"Consolas, 'Courier New', monospace\",\n  \"editor.tabSize\": 2,\n  \"editor.fontSize\": 14,\n  \"workbench.iconTheme\": \"vscode-icons\",\n  \"workbench.colorTheme\": \"One Dark Pro\",\n  \"window.zoomLevel\": 0,\n  \"extensions.ignoreRecommendations\": true,\n  \"emmet.syntaxProfiles\": {\n    \"vue-html\": \"html\",\n    \"vue\": \"html\"\n  },\n\n  \"eslint.options\": {\n    \"plugins\": [\"html\"]\n  },\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    \"html\",\n    \"vue\",\n    {\n      \"language\": \"html\",\n      \"autoFix\": true\n    },\n    {\n      \"language\": \"vue\",\n      \"autoFix\": true\n    }\n  ],\n  \"prettier.singleQuote\": true,\n  \"prettier.semi\": false,\n  \"prettier.eslintIntegration\": true,\n  \"vetur.validation.template\": false,\n  // 使用 js-beautify-html 插件格式化 html\n  \"vetur.format.defaultFormatter.html\": \"js-beautify-html\",\n  // 格式化插件的配置\n  \"vetur.format.defaultFormatterOptions\": {\n    \"js-beautify-html\": {\n      // 属性强制折行对齐\n      \"wrap_attributes\": \"force-aligned\"\n    }\n  }\n}\n```\n","source":"_posts/Vscode/配置.md","raw":"---\ntitle: vscode配置\ndate: 2018-01-13 16:07:32\ntags:\n  - JavaScript\n  - vscode\ncategory: 前端\n---\n\n```json\n{\n  \"editor.fontFamily\": \"Consolas, 'Courier New', monospace\",\n  \"editor.tabSize\": 2,\n  \"editor.fontSize\": 14,\n  \"workbench.iconTheme\": \"vscode-icons\",\n  \"workbench.colorTheme\": \"One Dark Pro\",\n  \"window.zoomLevel\": 0,\n  \"extensions.ignoreRecommendations\": true,\n  \"emmet.syntaxProfiles\": {\n    \"vue-html\": \"html\",\n    \"vue\": \"html\"\n  },\n\n  \"eslint.options\": {\n    \"plugins\": [\"html\"]\n  },\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    \"html\",\n    \"vue\",\n    {\n      \"language\": \"html\",\n      \"autoFix\": true\n    },\n    {\n      \"language\": \"vue\",\n      \"autoFix\": true\n    }\n  ],\n  \"prettier.singleQuote\": true,\n  \"prettier.semi\": false,\n  \"prettier.eslintIntegration\": true,\n  \"vetur.validation.template\": false,\n  // 使用 js-beautify-html 插件格式化 html\n  \"vetur.format.defaultFormatter.html\": \"js-beautify-html\",\n  // 格式化插件的配置\n  \"vetur.format.defaultFormatterOptions\": {\n    \"js-beautify-html\": {\n      // 属性强制折行对齐\n      \"wrap_attributes\": \"force-aligned\"\n    }\n  }\n}\n```\n","slug":"Vscode/配置","published":1,"updated":"2019-04-16T03:37:00.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctcp00152e47tvkzq4pv","content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"editor.fontFamily\"</span>: <span class=\"string\">\"Consolas, 'Courier New', monospace\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"editor.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"editor.fontSize\"</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"workbench.iconTheme\"</span>: <span class=\"string\">\"vscode-icons\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"workbench.colorTheme\"</span>: <span class=\"string\">\"One Dark Pro\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"window.zoomLevel\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"extensions.ignoreRecommendations\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"emmet.syntaxProfiles\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"vue-html\"</span>: <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue\"</span>: <span class=\"string\">\"html\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"html\"</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"prettier.singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"prettier.semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"prettier.eslintIntegration\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.validation.template\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  // 使用 js-beautify-html 插件格式化 html</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.html\": \"js-beautify-html\",</span><br><span class=\"line\">  // 格式化插件的配置</span><br><span class=\"line\">  \"vetur.format.defaultFormatterOptions\": &#123;</span><br><span class=\"line\">    \"js-beautify-html\": &#123;</span><br><span class=\"line\">      // 属性强制折行对齐</span><br><span class=\"line\">      \"wrap_attributes\": \"force-aligned\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"editor.fontFamily\"</span>: <span class=\"string\">\"Consolas, 'Courier New', monospace\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"editor.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"editor.fontSize\"</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"workbench.iconTheme\"</span>: <span class=\"string\">\"vscode-icons\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"workbench.colorTheme\"</span>: <span class=\"string\">\"One Dark Pro\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"window.zoomLevel\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"extensions.ignoreRecommendations\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"emmet.syntaxProfiles\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"vue-html\"</span>: <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue\"</span>: <span class=\"string\">\"html\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"html\"</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"prettier.singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"prettier.semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"prettier.eslintIntegration\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.validation.template\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  // 使用 js-beautify-html 插件格式化 html</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.html\": \"js-beautify-html\",</span><br><span class=\"line\">  // 格式化插件的配置</span><br><span class=\"line\">  \"vetur.format.defaultFormatterOptions\": &#123;</span><br><span class=\"line\">    \"js-beautify-html\": &#123;</span><br><span class=\"line\">      // 属性强制折行对齐</span><br><span class=\"line\">      \"wrap_attributes\": \"force-aligned\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Mac下配置ngxin","_content":"\n# Mac 系统如何使用 Nginx\n\n1. 使用 brew 安装\n\n```shell\n<!-- 更新brew-->\nbrew update\n\n<!-- 查看安装信息-->\nbrew -v\n\n<!-- 查看是否安装了nginx-->\nbrew info nginx\n\n```\n\n2. 安装 nginx\n\n```\nbrew install nginx\n```\n\n3. 启动 nginx\n\n```\n<!--启动nginx-->\nnginx\n<!--重启nginx-->\nnginx -s reload\n<!--停止nginx-->\nnginx -s stop\n\n```\n","source":"_posts/Nginx/mac下配置ngxin.md","raw":"---\ntitle: Mac下配置ngxin\ntags:\n  - ngxin\n  - Mac\ncategory:\n  - Mac\n  - ngxin\n---\n\n# Mac 系统如何使用 Nginx\n\n1. 使用 brew 安装\n\n```shell\n<!-- 更新brew-->\nbrew update\n\n<!-- 查看安装信息-->\nbrew -v\n\n<!-- 查看是否安装了nginx-->\nbrew info nginx\n\n```\n\n2. 安装 nginx\n\n```\nbrew install nginx\n```\n\n3. 启动 nginx\n\n```\n<!--启动nginx-->\nnginx\n<!--重启nginx-->\nnginx -s reload\n<!--停止nginx-->\nnginx -s stop\n\n```\n","slug":"Nginx/mac下配置ngxin","published":1,"date":"2019-04-16T03:21:37.982Z","updated":"2019-04-16T03:30:15.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctcq00192e474fcc78q6","content":"<h1 id=\"Mac-系统如何使用-Nginx\"><a href=\"#Mac-系统如何使用-Nginx\" class=\"headerlink\" title=\"Mac 系统如何使用 Nginx\"></a>Mac 系统如何使用 Nginx</h1><ol>\n<li>使用 brew 安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 更新brew--&gt;</span><br><span class=\"line\">brew update</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 查看安装信息--&gt;</span><br><span class=\"line\">brew -v</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 查看是否安装了nginx--&gt;</span><br><span class=\"line\">brew info nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装 nginx</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动 nginx</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--启动nginx--&gt;</span><br><span class=\"line\">nginx</span><br><span class=\"line\">&lt;!--重启nginx--&gt;</span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\">&lt;!--停止nginx--&gt;</span><br><span class=\"line\">nginx -s stop</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mac-系统如何使用-Nginx\"><a href=\"#Mac-系统如何使用-Nginx\" class=\"headerlink\" title=\"Mac 系统如何使用 Nginx\"></a>Mac 系统如何使用 Nginx</h1><ol>\n<li>使用 brew 安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 更新brew--&gt;</span><br><span class=\"line\">brew update</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 查看安装信息--&gt;</span><br><span class=\"line\">brew -v</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 查看是否安装了nginx--&gt;</span><br><span class=\"line\">brew info nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装 nginx</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动 nginx</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--启动nginx--&gt;</span><br><span class=\"line\">nginx</span><br><span class=\"line\">&lt;!--重启nginx--&gt;</span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\">&lt;!--停止nginx--&gt;</span><br><span class=\"line\">nginx -s stop</span><br></pre></td></tr></table></figure>\n\n"},{"title":"git常用命令","date":"2018-01-13T08:07:32.000Z","_content":"\n# Git 配置用户信息与 SSH 密钥\n\n### 安装完 Git 第一件事要配置自己的信息\n\n查看\n```git\n    $ git config user.name \n    $ git config user.email\n```\n设置\n```git\n    $ git config --global user.name \"John Doe\"\n    $ git config --global user.email \"johndoe@example.com\"\n```\n\n### 连接远程仓库要配置自己的 ssh 秘钥\n\n默认情况下，用户的 SSH 私钥存储在其 ~/.ssh 目录下。 进入该目录并列出其中内容，你便可以快速确认自己是否已拥有私钥：\n\n```git\n    $ cd ~/.ssh\n    $ ls\n    authorized_keys2  id_dsa       known_hosts\n    config            id_dsa.pub\n\n    cat id_dsa.pub\n```\n\n### 如果没有 SSH 私钥则需要创建一个私钥来放到 Github 上面使用\n\n```git\n    $ ssh-keygen\n    Generating public/private rsa key pair.\n    Enter file in which to save the key (/home/schacon/.ssh/id_rsa):\n    Created directory '/home/schacon/.ssh'.\n    Enter passphrase (empty for no passphrase):\n    Enter same passphrase again:\n    Your identification has been saved in /home/schacon/.ssh/id_rsa.\n    Your public key has been saved in /home/schacon/.ssh/id_rsa.pub.\n    The key fingerprint is:\n    d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local\n```\n### 查看全局安装过的包\n```\nnpm list -g --depth 0\n```","source":"_posts/Terminal/GIt常用命令.md","raw":"---\ntitle: git常用命令\ndate: 2018-01-13 16:07:32\ntags:\n  - JavaScript\n  - git\ncategory: git\n---\n\n# Git 配置用户信息与 SSH 密钥\n\n### 安装完 Git 第一件事要配置自己的信息\n\n查看\n```git\n    $ git config user.name \n    $ git config user.email\n```\n设置\n```git\n    $ git config --global user.name \"John Doe\"\n    $ git config --global user.email \"johndoe@example.com\"\n```\n\n### 连接远程仓库要配置自己的 ssh 秘钥\n\n默认情况下，用户的 SSH 私钥存储在其 ~/.ssh 目录下。 进入该目录并列出其中内容，你便可以快速确认自己是否已拥有私钥：\n\n```git\n    $ cd ~/.ssh\n    $ ls\n    authorized_keys2  id_dsa       known_hosts\n    config            id_dsa.pub\n\n    cat id_dsa.pub\n```\n\n### 如果没有 SSH 私钥则需要创建一个私钥来放到 Github 上面使用\n\n```git\n    $ ssh-keygen\n    Generating public/private rsa key pair.\n    Enter file in which to save the key (/home/schacon/.ssh/id_rsa):\n    Created directory '/home/schacon/.ssh'.\n    Enter passphrase (empty for no passphrase):\n    Enter same passphrase again:\n    Your identification has been saved in /home/schacon/.ssh/id_rsa.\n    Your public key has been saved in /home/schacon/.ssh/id_rsa.pub.\n    The key fingerprint is:\n    d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local\n```\n### 查看全局安装过的包\n```\nnpm list -g --depth 0\n```","slug":"Terminal/GIt常用命令","published":1,"updated":"2019-10-24T06:17:43.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctcr001c2e478lgyt1w2","content":"<h1 id=\"Git-配置用户信息与-SSH-密钥\"><a href=\"#Git-配置用户信息与-SSH-密钥\" class=\"headerlink\" title=\"Git 配置用户信息与 SSH 密钥\"></a>Git 配置用户信息与 SSH 密钥</h1><h3 id=\"安装完-Git-第一件事要配置自己的信息\"><a href=\"#安装完-Git-第一件事要配置自己的信息\" class=\"headerlink\" title=\"安装完 Git 第一件事要配置自己的信息\"></a>安装完 Git 第一件事要配置自己的信息</h3><p>查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config user.name </span><br><span class=\"line\">$ git config user.email</span><br></pre></td></tr></table></figure>\n\n<p>设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;John Doe&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;johndoe@example.com&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"连接远程仓库要配置自己的-ssh-秘钥\"><a href=\"#连接远程仓库要配置自己的-ssh-秘钥\" class=\"headerlink\" title=\"连接远程仓库要配置自己的 ssh 秘钥\"></a>连接远程仓库要配置自己的 ssh 秘钥</h3><p>默认情况下，用户的 SSH 私钥存储在其 ~/.ssh 目录下。 进入该目录并列出其中内容，你便可以快速确认自己是否已拥有私钥：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~/.ssh</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">authorized_keys2  id_dsa       known_hosts</span><br><span class=\"line\">config            id_dsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">cat id_dsa.pub</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如果没有-SSH-私钥则需要创建一个私钥来放到-Github-上面使用\"><a href=\"#如果没有-SSH-私钥则需要创建一个私钥来放到-Github-上面使用\" class=\"headerlink\" title=\"如果没有 SSH 私钥则需要创建一个私钥来放到 Github 上面使用\"></a>如果没有 SSH 私钥则需要创建一个私钥来放到 Github 上面使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen</span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/home/schacon/.ssh/id_rsa):</span><br><span class=\"line\">Created directory &apos;/home/schacon/.ssh&apos;.</span><br><span class=\"line\">Enter passphrase (empty for no passphrase):</span><br><span class=\"line\">Enter same passphrase again:</span><br><span class=\"line\">Your identification has been saved in /home/schacon/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved in /home/schacon/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看全局安装过的包\"><a href=\"#查看全局安装过的包\" class=\"headerlink\" title=\"查看全局安装过的包\"></a>查看全局安装过的包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm list -g --depth 0</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Git-配置用户信息与-SSH-密钥\"><a href=\"#Git-配置用户信息与-SSH-密钥\" class=\"headerlink\" title=\"Git 配置用户信息与 SSH 密钥\"></a>Git 配置用户信息与 SSH 密钥</h1><h3 id=\"安装完-Git-第一件事要配置自己的信息\"><a href=\"#安装完-Git-第一件事要配置自己的信息\" class=\"headerlink\" title=\"安装完 Git 第一件事要配置自己的信息\"></a>安装完 Git 第一件事要配置自己的信息</h3><p>查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config user.name </span><br><span class=\"line\">$ git config user.email</span><br></pre></td></tr></table></figure>\n\n<p>设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;John Doe&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;johndoe@example.com&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"连接远程仓库要配置自己的-ssh-秘钥\"><a href=\"#连接远程仓库要配置自己的-ssh-秘钥\" class=\"headerlink\" title=\"连接远程仓库要配置自己的 ssh 秘钥\"></a>连接远程仓库要配置自己的 ssh 秘钥</h3><p>默认情况下，用户的 SSH 私钥存储在其 ~/.ssh 目录下。 进入该目录并列出其中内容，你便可以快速确认自己是否已拥有私钥：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~/.ssh</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">authorized_keys2  id_dsa       known_hosts</span><br><span class=\"line\">config            id_dsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">cat id_dsa.pub</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如果没有-SSH-私钥则需要创建一个私钥来放到-Github-上面使用\"><a href=\"#如果没有-SSH-私钥则需要创建一个私钥来放到-Github-上面使用\" class=\"headerlink\" title=\"如果没有 SSH 私钥则需要创建一个私钥来放到 Github 上面使用\"></a>如果没有 SSH 私钥则需要创建一个私钥来放到 Github 上面使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen</span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/home/schacon/.ssh/id_rsa):</span><br><span class=\"line\">Created directory &apos;/home/schacon/.ssh&apos;.</span><br><span class=\"line\">Enter passphrase (empty for no passphrase):</span><br><span class=\"line\">Enter same passphrase again:</span><br><span class=\"line\">Your identification has been saved in /home/schacon/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved in /home/schacon/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看全局安装过的包\"><a href=\"#查看全局安装过的包\" class=\"headerlink\" title=\"查看全局安装过的包\"></a>查看全局安装过的包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm list -g --depth 0</span><br></pre></td></tr></table></figure>"},{"title":"npm 与 yarn 管理工具","_content":"\n# npm 与 yarn 管理工具\n\n全局安装 nrm 与 yrm\n\n    npm install nrm -g\n    &&\n    npm install yrm -g\n\n查看源\n\n    nrm ls\n    &&\n    yrm ls\n\n使用淘宝源\n\n    nrm use cnpm\n    &&\n    yrm ue cnpm\n","source":"_posts/Nodejs/npm与yarn.md","raw":"---\ntitle: npm 与 yarn 管理工具\ntags:\n  - npm\n  - yarn\ncategory:\n  - npm\n---\n\n# npm 与 yarn 管理工具\n\n全局安装 nrm 与 yrm\n\n    npm install nrm -g\n    &&\n    npm install yrm -g\n\n查看源\n\n    nrm ls\n    &&\n    yrm ls\n\n使用淘宝源\n\n    nrm use cnpm\n    &&\n    yrm ue cnpm\n","slug":"Nodejs/npm与yarn","published":1,"date":"2019-03-13T02:02:44.000Z","updated":"2019-04-16T03:32:14.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctcs001g2e47s43db4ho","content":"<h1 id=\"npm-与-yarn-管理工具\"><a href=\"#npm-与-yarn-管理工具\" class=\"headerlink\" title=\"npm 与 yarn 管理工具\"></a>npm 与 yarn 管理工具</h1><p>全局安装 nrm 与 yrm</p>\n<pre><code>npm install nrm -g\n&amp;&amp;\nnpm install yrm -g</code></pre><p>查看源</p>\n<pre><code>nrm ls\n&amp;&amp;\nyrm ls</code></pre><p>使用淘宝源</p>\n<pre><code>nrm use cnpm\n&amp;&amp;\nyrm ue cnpm</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"npm-与-yarn-管理工具\"><a href=\"#npm-与-yarn-管理工具\" class=\"headerlink\" title=\"npm 与 yarn 管理工具\"></a>npm 与 yarn 管理工具</h1><p>全局安装 nrm 与 yrm</p>\n<pre><code>npm install nrm -g\n&amp;&amp;\nnpm install yrm -g</code></pre><p>查看源</p>\n<pre><code>nrm ls\n&amp;&amp;\nyrm ls</code></pre><p>使用淘宝源</p>\n<pre><code>nrm use cnpm\n&amp;&amp;\nyrm ue cnpm</code></pre>"},{"title":"微信小程序中的 canvas","date":"2018-01-13T08:07:32.000Z","_content":"\n# 微信小程序中的 canvas\n","source":"_posts/WeChat/小程序Canvas.md","raw":"---\ntitle: 微信小程序中的 canvas\ndate: 2018-01-13 16:07:32\ntags: JavaScript\ncategory: 前端\n---\n\n# 微信小程序中的 canvas\n","slug":"WeChat/小程序Canvas","published":1,"updated":"2019-04-16T02:24:02.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctct001j2e4776zddnsz","content":"<h1 id=\"微信小程序中的-canvas\"><a href=\"#微信小程序中的-canvas\" class=\"headerlink\" title=\"微信小程序中的 canvas\"></a>微信小程序中的 canvas</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"微信小程序中的-canvas\"><a href=\"#微信小程序中的-canvas\" class=\"headerlink\" title=\"微信小程序中的 canvas\"></a>微信小程序中的 canvas</h1>"},{"title":"使用 mpvue 开发微信小程序","date":"2018-01-13T08:07:32.000Z","_content":"\n# 使用 mpvue 开发微信小程序\n","source":"_posts/WeChat/使用mpvue开发微信小程序.md","raw":"---\ntitle: 使用 mpvue 开发微信小程序\ndate: 2018-01-13 16:07:32\ntags: JavaScript\ncategory: 前端\n---\n\n# 使用 mpvue 开发微信小程序\n","slug":"WeChat/使用mpvue开发微信小程序","published":1,"updated":"2019-04-16T02:23:58.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctcu001m2e47ansn82gk","content":"<h1 id=\"使用-mpvue-开发微信小程序\"><a href=\"#使用-mpvue-开发微信小程序\" class=\"headerlink\" title=\"使用 mpvue 开发微信小程序\"></a>使用 mpvue 开发微信小程序</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用-mpvue-开发微信小程序\"><a href=\"#使用-mpvue-开发微信小程序\" class=\"headerlink\" title=\"使用 mpvue 开发微信小程序\"></a>使用 mpvue 开发微信小程序</h1>"},{"title":"mac下修改hosts文件","date":"2019-08-13T08:07:32.000Z","_content":"\n```vim\nsudo vim /private/etc/hosts\n```\n\n","source":"_posts/Terminal/mac下修改hosts文件.md","raw":"---\ntitle: mac下修改hosts文件\ndate: 2019-08-13 16:07:32\ntags:\n  - mac\n  - hosts\ncategory: mac\n---\n\n```vim\nsudo vim /private/etc/hosts\n```\n\n","slug":"Terminal/mac下修改hosts文件","published":1,"updated":"2019-09-18T03:02:56.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctcv001q2e47d65h1983","content":"<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"keyword\">vim</span> /private/etc/hosts</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"keyword\">vim</span> /private/etc/hosts</span><br></pre></td></tr></table></figure>\n\n"},{"_content":"查看用brew安装的文件\n\n`brew list `\n\n`brew list `软件名 可以查看路径\n\n使用`vscode` 在`terminal`打开文件 `code ./`\n\n需要在`vscode`中安装`code`命令","source":"_posts/Terminal/mac下使用homebrew.md","raw":"查看用brew安装的文件\n\n`brew list `\n\n`brew list `软件名 可以查看路径\n\n使用`vscode` 在`terminal`打开文件 `code ./`\n\n需要在`vscode`中安装`code`命令","slug":"Terminal/mac下使用homebrew","published":1,"date":"2019-10-11T06:40:02.518Z","updated":"2019-10-11T06:42:43.758Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctcx001u2e47m1h72xhg","content":"<p>查看用brew安装的文件</p>\n<p><code>brew list</code></p>\n<p><code>brew list</code>软件名 可以查看路径</p>\n<p>使用<code>vscode</code> 在<code>terminal</code>打开文件 <code>code ./</code></p>\n<p>需要在<code>vscode</code>中安装<code>code</code>命令</p>\n","site":{"data":{}},"excerpt":"","more":"<p>查看用brew安装的文件</p>\n<p><code>brew list</code></p>\n<p><code>brew list</code>软件名 可以查看路径</p>\n<p>使用<code>vscode</code> 在<code>terminal</code>打开文件 <code>code ./</code></p>\n<p>需要在<code>vscode</code>中安装<code>code</code>命令</p>\n"},{"title":"Axios 基础配置","date":"2018-01-13T08:07:32.000Z","_content":"\n# Axios 基础配置\n\n### 全局的 axios 默认值\n\n引入 axios 后\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### 自定义实例默认值\n\n```js\n// 创建实例时设置配置的默认值\nvar instance = axios.create({\nbaseURL: 'https://api.example.com'\n});\n\n// 在实例已创建后修改默认值\ninstance.defaults.headers.post['Content-Type'] = 'application/json'\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n","source":"_posts/Vue/Axios基础配置.md","raw":"---\ntitle: Axios 基础配置\ndate: 2018-01-13 16:07:32\ntags:\n  - Vue\n  - Axios\ncategory: 前端\n---\n\n# Axios 基础配置\n\n### 全局的 axios 默认值\n\n引入 axios 后\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### 自定义实例默认值\n\n```js\n// 创建实例时设置配置的默认值\nvar instance = axios.create({\nbaseURL: 'https://api.example.com'\n});\n\n// 在实例已创建后修改默认值\ninstance.defaults.headers.post['Content-Type'] = 'application/json'\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n","slug":"Vue/Axios基础配置","published":1,"updated":"2019-07-19T02:27:21.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctcy001y2e47eolb6pgm","content":"<h1 id=\"Axios-基础配置\"><a href=\"#Axios-基础配置\" class=\"headerlink\" title=\"Axios 基础配置\"></a>Axios 基础配置</h1><h3 id=\"全局的-axios-默认值\"><a href=\"#全局的-axios-默认值\" class=\"headerlink\" title=\"全局的 axios 默认值\"></a>全局的 axios 默认值</h3><p>引入 axios 后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.defaults.baseURL = <span class=\"string\">'https://api.example.com'</span>;</span><br><span class=\"line\">axios.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义实例默认值\"><a href=\"#自定义实例默认值\" class=\"headerlink\" title=\"自定义实例默认值\"></a>自定义实例默认值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建实例时设置配置的默认值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create(&#123;</span><br><span class=\"line\">baseURL: <span class=\"string\">'https://api.example.com'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在实例已创建后修改默认值</span></span><br><span class=\"line\">instance.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/json'</span></span><br><span class=\"line\">instance.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = AUTH_TOKEN;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Axios-基础配置\"><a href=\"#Axios-基础配置\" class=\"headerlink\" title=\"Axios 基础配置\"></a>Axios 基础配置</h1><h3 id=\"全局的-axios-默认值\"><a href=\"#全局的-axios-默认值\" class=\"headerlink\" title=\"全局的 axios 默认值\"></a>全局的 axios 默认值</h3><p>引入 axios 后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.defaults.baseURL = <span class=\"string\">'https://api.example.com'</span>;</span><br><span class=\"line\">axios.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义实例默认值\"><a href=\"#自定义实例默认值\" class=\"headerlink\" title=\"自定义实例默认值\"></a>自定义实例默认值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建实例时设置配置的默认值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create(&#123;</span><br><span class=\"line\">baseURL: <span class=\"string\">'https://api.example.com'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在实例已创建后修改默认值</span></span><br><span class=\"line\">instance.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/json'</span></span><br><span class=\"line\">instance.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = AUTH_TOKEN;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"leetcode初级算法","date":"2019-03-13T08:07:32.000Z","_content":"\n### 26.从排序数组中删除重复项\n\n解题思路：\n一级循环从左至右遍历数组，对比对象为该循环索引右侧的所有元素，所以二级循环取从右到左，并终止于一级循环索引数 i，\n遇到相同元素，立即删除右侧（二级循环中的）元素并变更原始数组，以保证一级循环过的元素都是唯一的。\n\n```JavaScript\n/**\n* @param {number[]} nums\n* @return {number}\n*/\nvar removeDuplicates = function(nums) {\n // return [...new Set(nums)]\n // return Array.from(new Set(nums))\n // nums = [...new Set(nums)]\n // return nums\n for(i=0;i<nums.length;i++){\n   for(j=nums.length-1;j>i;j--){\n     if(nums[i]==nums[j]){\n       nums.splice(i,1)\n     }\n   }\n }\n};\n\n```\n","source":"_posts/leetcode/LeetCode.md","raw":"---\ntitle: leetcode初级算法\ndate: 2019-03-13 16:07:32\ntags:\n  - JavaScript\n  - 算法\n  - LeetCode\ncategory: 算法\n---\n\n### 26.从排序数组中删除重复项\n\n解题思路：\n一级循环从左至右遍历数组，对比对象为该循环索引右侧的所有元素，所以二级循环取从右到左，并终止于一级循环索引数 i，\n遇到相同元素，立即删除右侧（二级循环中的）元素并变更原始数组，以保证一级循环过的元素都是唯一的。\n\n```JavaScript\n/**\n* @param {number[]} nums\n* @return {number}\n*/\nvar removeDuplicates = function(nums) {\n // return [...new Set(nums)]\n // return Array.from(new Set(nums))\n // nums = [...new Set(nums)]\n // return nums\n for(i=0;i<nums.length;i++){\n   for(j=nums.length-1;j>i;j--){\n     if(nums[i]==nums[j]){\n       nums.splice(i,1)\n     }\n   }\n }\n};\n\n```\n","slug":"leetcode/LeetCode","published":1,"updated":"2019-04-17T07:39:05.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctcz00222e475msbgfw7","content":"<h3 id=\"26-从排序数组中删除重复项\"><a href=\"#26-从排序数组中删除重复项\" class=\"headerlink\" title=\"26.从排序数组中删除重复项\"></a>26.从排序数组中删除重复项</h3><p>解题思路：<br>一级循环从左至右遍历数组，对比对象为该循环索引右侧的所有元素，所以二级循环取从右到左，并终止于一级循环索引数 i，<br>遇到相同元素，立即删除右侧（二级循环中的）元素并变更原始数组，以保证一级循环过的元素都是唯一的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\">* @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// return [...new Set(nums)]</span></span><br><span class=\"line\"> <span class=\"comment\">// return Array.from(new Set(nums))</span></span><br><span class=\"line\"> <span class=\"comment\">// nums = [...new Set(nums)]</span></span><br><span class=\"line\"> <span class=\"comment\">// return nums</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(j=nums.length<span class=\"number\">-1</span>;j&gt;i;j--)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(nums[i]==nums[j])&#123;</span><br><span class=\"line\">       nums.splice(i,<span class=\"number\">1</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"26-从排序数组中删除重复项\"><a href=\"#26-从排序数组中删除重复项\" class=\"headerlink\" title=\"26.从排序数组中删除重复项\"></a>26.从排序数组中删除重复项</h3><p>解题思路：<br>一级循环从左至右遍历数组，对比对象为该循环索引右侧的所有元素，所以二级循环取从右到左，并终止于一级循环索引数 i，<br>遇到相同元素，立即删除右侧（二级循环中的）元素并变更原始数组，以保证一级循环过的元素都是唯一的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\">* @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// return [...new Set(nums)]</span></span><br><span class=\"line\"> <span class=\"comment\">// return Array.from(new Set(nums))</span></span><br><span class=\"line\"> <span class=\"comment\">// nums = [...new Set(nums)]</span></span><br><span class=\"line\"> <span class=\"comment\">// return nums</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(j=nums.length<span class=\"number\">-1</span>;j&gt;i;j--)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(nums[i]==nums[j])&#123;</span><br><span class=\"line\">       nums.splice(i,<span class=\"number\">1</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"JavaScript 实现简单二叉查找树","date":"2018-01-13T08:07:32.000Z","_content":"\n![二叉树](http://or2vgb0pq.bkt.clouddn.com//18-10-29/46844758.jpg)\n\n二叉树：二叉树就是一种数据结构， 它的组织关系就像是自然界中的树一样。官方语言的定义是：是一个有限元素的集合,该集合或者为空、或者由一个称为根的元素及两个不相交的、被分别称为左子树和右子树的二叉树组成。\n\n节点： 树中的每个元素称为一个节点，\n\n根节点： 位于整棵树顶点的节点，它没有父节点。\n\n子节点： 其他节点的后代\n\n叶子节点: 没有子节点的元素称为叶子节点。\n\n#### 二叉树创建代码的实现\n\n> 创建二叉树\n\n```javascript\n// 声明根节点\nvar root = null\n// 声明函数\nfunction BinarSearchTree() {\n  var Node = function(key) {\n    this.key = key\n    this.left = null\n    this.right = null\n  }\n\n  // 这个方法会通过递归得调用自身，来找到新添加节点的合适位置\n  var insertNode = function(node, newNode) {\n    // 判断插入左节点还是右节点,然后递归调用\n    if (newNode.key <= node.key) {\n      if (node.left === null) {\n        node.left = newNode\n      } else {\n        insertNode(node.left, newNode)\n      }\n    } else {\n      if (node.right === null) {\n        node.right = newNode\n      } else {\n        insertNode(node.right, newNode)\n      }\n    }\n    // 判断创建根节点还是插入子节点\n    this.insert = function(key) {\n      // 创建一个用来表示新节点的Node类实例，因此需要new一下Node类并传入需要插入的key值，它会自动初始化为左右节点为null的一个新节点\n      var newNode = new Node(key)\n      // 先判断树是否为空，若为空，新插入的节点就作为根节点，如不为空，调用一个辅助方法insertNode()方法，将根节点和新节点传入\n      if (root === null) {\n        root = newNode\n      } else {\n        insertNode(root, newNode)\n      }\n    }\n  }\n}\n//定义要插入的二叉树\nvar nodes = [7, 3, 6, 2, 8, 13, 5, 15]\n// 实例化二叉树函数\nvar _binarSearchTree = new BinarSearchTree()\n// 遍历数组插入节点\nnodes.forEach(key => {\n  _binarSearchTree.insert(key)\n})\n//查看二叉树输出结果】\nconsole.log(root)\n```\n\n#### 二叉树的中序遍历\n\n中序遍历（LDR）是二叉树遍历的一种，也叫做中根遍历、中序周游。在二叉树中，先左后根再右。巧记：左根右。\n\n中序便历可用于排序。\n\n以下代码先查找最左叶子节点然后打印出来，如果没有最左叶子节点则打印根节点，最后打印右子节点。\n\n> 中序遍历\n\n```javascript\n      var inOrderTraverseNode = function (node) {\n        // 判断当前节点如果不为空则递归查找节点，按照左根右的顺序\n        if (node !== null) {\n          // 先查找左叶子节点，如果左叶子节点有值则递归此节点\n          inOrderTraverseNode(node.left)\n          // 如果没有左叶子节点则打印当前根节点\n          console.log(node.key)\n          // 最后查找右子节点\n          inOrderTraverseNode(node.right)\n        }\n      }\n      //中序遍历\n      this.inOrderTraverse = function () {\n        // 将二叉树根节点传入\n        inOrderTraverseNode(root)\n      }\n    }\n```\n\n#### 二叉树的先序遍历\n\n先序遍历(Pre-order)，按照根左右的顺序沿一定路径经过路径上所有的结点。在二叉树中，先根后左再右。巧记：根左右。\n\n先序遍历常用于复制二叉树。\n\n先序遍历与中序遍历代码很像，只不过先查找根节点打印出来，然后在查找最左叶子节点然后打印出来，最后打印右子节点。\n\n> 先序遍历\n\n```javascript\nvar preOrderTraverseNode = function(node) {\n  if (node !== null) {\n    // 先打印当前节点然后在查找左右子节点\n    console.log(node.key)\n    preOrderTraverseNode(node.left)\n    preOrderTraverseNode(node.right)\n  }\n}\nthis.preOrderTraverse = function() {\n  preOrderTraverseNode(root)\n}\n```\n\n#### 二叉树的后序遍历\n\n后序遍历（LRD）是二叉树遍历的一种，也叫做后根遍历、后序周游，可记做左右根。后序遍历有递归算法和非递归算法两种。在二叉树中，先左后右再根。巧记：左右根。\n\n后序遍历实际应用于操作系统的文件系统遍历中。\n\n后序遍历与上面两个遍历一样，这回变为左右根的顺序。\n\n> 后序遍历\n\n```javascript\nthis.postOrderTraverse = function() {\n  postOrderTraverseNode(root)\n}\nvar postOrderTraverseNode = function(node) {\n  if (node !== null) {\n    postOrderTraverseNode(node.left)\n    postOrderTraverseNode(node.right)\n    // 如果没有左右子节点最后打印根节点\n    console.log(node.key)\n  }\n}\n```\n\n#### 二叉树查找最大值与最小值\n\n二叉树的最左子节点为最小，最右节点为最大，按照这个规律我们只需要递归查找最左与最右子节点就可以查到最大与最下值。\n\n> 查找最小节点\n\n```javascript\nvar minNode = function(node) {\n  if (node) {\n    // 如果当前节点不为空并且含有左子节点\n    while (node && node.left !== null) {\n      node = node.left\n    }\n    return node.key\n  }\n}\n// 查找最小节点\nthis.min = function() {\n  return minNode(root)\n}\n```\n\n> 查找最大节点\n\n```javascript\nvar maxNode = function(node) {\n  if (node) {\n    // 如果当前节点不为空并且含有右子节点\n    while (node && node.right !== null) {\n      node = node.right\n    }\n    return node.key\n  }\n}\n// 查找最大节点\nthis.max = function() {\n  return maxNode(root)\n}\n```\n\n#### 二叉树查找指定值\n\n实现查找二叉树特定值这个方法首先检验 node 的合法性，如果为 null，直接退出，并返回 fasle。如果传入的 key 比当前传入 node 的 key 值小，它会继续递归查找 node 的左侧节点，反之，查找右侧节点。如果找到相等节点，直接退出，并返回 true。\n\n> 查找指定值\n\n```javascript\nvar searchNode = function(node, key) {\n  // 如果节点为空则返回\n  if (node === null) {\n    return false\n  }\n\n  if (key < node.key) {\n    // 如果查找值小于当前节点值则查找左子节点\n    return searchNode(node.left, key)\n  } else if (key > node.key) {\n    // 如果查找值大于当前节点值则查找右子节点\n    return searchNode(node.right, key)\n  } else {\n    return true\n  }\n}\n// 查找指定节点\nthis.search = function(key) {\n  return searchNode(root, key)\n}\n```\n\n#### 移除节点\n\n移除节点的实现情况比较复杂，它会有三种不同的情况：\n\n1.  需要移除的节点是一个叶子节点\n\n2.  需要移除的节点包含一个子节点\n\n3.  需要移除的节点包含两个子节点\n\n和实现搜索指定节点一元，要移除某个节点，必须先找到它所在的位置，因此移除方法的实现中部分代码和上面相同，其中，移除包含两个子节点的节点是最复杂的情况，它包含左侧节点和右侧节点，对它进行移除主要需要三个步骤：\n\n1.  需要找到它右侧子树中的最小节点来代替它的位置\n2.  将它右侧子树中的最小节点移除\n3.  将更新后的节点的引用指向原节点的父节点\n\n有点绕，但必须这样，因为删除元素后的二叉搜索树必须保持它的排序性质。\n\n> 移除节点\n\n```javascript\nvar removeNode = function(node, key) {\n  if (node == null) {\n    return null\n  }\n  if (key < node.key) {\n    node.left = removeNode(node.left, key)\n    return node\n  } else if (key > node.key) {\n    node.right = removeNode(node.right, key)\n    return node\n  } else {\n    // 需要移除的是一个叶子节点\n    if (node.left === null && node.right === null) {\n      node = null\n      return node\n    }\n\n    //需要移除的节点包含一个叶子节点\n\n    if (node.left === null) {\n      node = node.right\n      return node\n    } else if (node.left === null) {\n      node = node.left\n      return node\n    }\n    //需要移除的节点包含两个子节点\n    var aux = findMinNode(node.right)\n    node.key = aux.key\n    node.right = removeNode(node.right, axu.key)\n    return node\n  }\n}\nvar findMinNode = function(node) {\n  if (node) {\n    while (node && node.left !== null) {\n      node = node.left\n    }\n    return node\n  }\n  return null\n}\n//移除节点\nthis.remove = function(key) {\n  removeNode(root, key)\n}\n```\n\n> 完整代码\n\n```javascript\n// 声明根节点\nvar root = null\n// 声明函数\nfunction BinarSearchTree() {\n  var Node = function(key) {\n    this.key = key\n    this.left = null\n    this.right = null\n  }\n  // 判断创建根节点还是插入子节点\n  this.insert = function(key) {\n    var newNode = new Node(key)\n    if (root === null) {\n      root = newNode\n    } else {\n      insertNode(root, newNode)\n    }\n  }\n  // 判断插入左节点还是右节点\n  var insertNode = function(node, newNode) {\n    if (newNode.key <= node.key) {\n      if (node.left === null) {\n        node.left = newNode\n      } else {\n        insertNode(node.left, newNode)\n      }\n    } else {\n      if (node.right === null) {\n        node.right = newNode\n      } else {\n        insertNode(node.right, newNode)\n      }\n    }\n  }\n\n  var inOrderTraverseNode = function(node) {\n    // 判断当前节点如果不为空则递归查找节点，按照左根右的顺序\n    if (node !== null) {\n      // 先查找左叶子节点，如果左叶子节点有值则递归此节点\n      inOrderTraverseNode(node.left)\n      // 如果没有左叶子节点则打印当前根节点\n      console.log(node.key)\n      // 最后查找右子节点\n      inOrderTraverseNode(node.right)\n    }\n  }\n  //中序遍历\n  this.inOrderTraverse = function() {\n    // 将二叉树根节点传入\n    inOrderTraverseNode(root)\n  }\n\n  var preOrderTraverseNode = function(node) {\n    if (node !== null) {\n      console.log(node.key)\n      preOrderTraverseNode(node.left)\n      preOrderTraverseNode(node.right)\n    }\n  }\n  // 先序遍历\n  this.preOrderTraverse = function() {\n    preOrderTraverseNode(root)\n  }\n\n  var postOrderTraverseNode = function(node) {\n    if (node !== null) {\n      postOrderTraverseNode(node.left)\n      postOrderTraverseNode(node.right)\n      // 如果没有左右子节点最后打印根节点\n      console.log(node.key)\n    }\n  }\n  // 后序遍历\n  this.postOrderTraverse = function() {\n    postOrderTraverseNode(root)\n  }\n\n  var minNode = function(node) {\n    if (node) {\n      // 如果当前节点不为空并且含有左子节点\n      while (node && node.left !== null) {\n        node = node.left\n      }\n      return node.key\n    }\n  }\n  // 查找最小节点\n  this.min = function() {\n    return minNode(root)\n  }\n  var maxNode = function(node) {\n    if (node) {\n      // 如果当前节点不为空并且含有右子节点\n      while (node && node.right !== null) {\n        node = node.right\n      }\n      return node.key\n    }\n  }\n  //查找最大节点\n  this.max = function() {\n    return maxNode(root)\n  }\n  var searchNode = function(node, key) {\n    // 如果节点为空则返回\n    if (node === null) {\n      return false\n    }\n\n    if (key < node.key) {\n      // 如果查找值小于当前节点值则查找左子节点\n      return searchNode(node.left, key)\n    } else if (key > node.key) {\n      // 如果查找值大于当前节点值则查找右子节点\n      return searchNode(node.right, key)\n    } else {\n      return true\n    }\n  }\n  // 查找指定节点\n  this.search = function(key) {\n    return searchNode(root, key)\n  }\n  var removeNode = function(node, key) {\n    if (node == null) {\n      return null\n    }\n    if (key < node.key) {\n      node.left = removeNode(node.left, key)\n      return node\n    } else if (key > node.key) {\n      node.right = removeNode(node.right, key)\n      return node\n    } else {\n      // 需要移除的是一个叶子节点\n      if (node.left === null && node.right === null) {\n        node = null\n        return node\n      }\n\n      //需要移除的节点包含一个叶子节点\n\n      if (node.left === null) {\n        node = node.right\n        return node\n      } else if (node.left === null) {\n        node = node.left\n        return node\n      }\n      //需要移除的节点包含两个子节点\n      var aux = findMinNode(node.right)\n      node.key = aux.key\n      node.right = removeNode(node.right, axu.key)\n      return node\n    }\n  }\n  var findMinNode = function(node) {\n    if (node) {\n      while (node && node.left !== null) {\n        node = node.left\n      }\n      return node\n    }\n    return null\n  }\n  //移除节点\n  this.remove = function(key) {\n    removeNode(root, key)\n  }\n}\n\nvar nodes = [7, 3, 6, 2, 8, 13, 5, 15]\nvar _binarSearchTree = new BinarSearchTree()\nnodes.forEach(key => {\n  _binarSearchTree.insert(key)\n})\n// 打印插入完的二叉树\nconsole.log(root)\n// 调用中序遍历方法\n_binarSearchTree.inOrderTraverse()\n// 调用先序遍历方法\n_binarSearchTree.preOrderTraverse()\n// 调用后序遍历方法\n_binarSearchTree.postOrderTraverse()\n// 查找最小值\nconsole.log(_binarSearchTree.min())\n// 查找最大值\nconsole.log(_binarSearchTree.max())\n// 查找特定值\nconsole.log(_binarSearchTree.search(2))\n// 删除节点\n_binarSearchTree.remove(8)\n_binarSearchTree.inOrderTraverse()\n```\n\n<script>\nexport default {\n  mounted(){\n     // 声明根节点\n    var root = null;\n    // 声明函数\n    function BinarSearchTree() {\n      var Node = function (key) {\n        this.key = key;\n        this.left = null;\n        this.right = null;\n      };\n      // 判断创建根节点还是插入子节点\n      this.insert = function (key) {\n        var newNode = new Node(key)\n        if (root === null) {\n          root = newNode\n        } else {\n          insertNode(root, newNode)\n        }\n      }\n      // 判断插入左节点还是右节点\n      var insertNode = function (node, newNode) {\n        if (newNode.key <= node.key) {\n          if (node.left === null) {\n            node.left = newNode\n          } else {\n            insertNode(node.left, newNode)\n          }\n        } else {\n          if (node.right === null) {\n            node.right = newNode\n          } else {\n            insertNode(node.right, newNode)\n          }\n        }\n\n      }\n\n      var inOrderTraverseNode = function (node) {\n        // 判断当前节点如果不为空则递归查找节点，按照左根右的顺序\n        if (node !== null) {\n          // 先查找左叶子节点，如果左叶子节点有值则递归此节点\n          inOrderTraverseNode(node.left)\n          // 如果没有左叶子节点则打印当前根节点\n          console.log(node.key)\n          // 最后查找右子节点\n          inOrderTraverseNode(node.right)\n        }\n      }\n      //中序遍历\n      this.inOrderTraverse = function () {\n        // 将二叉树根节点传入\n        inOrderTraverseNode(root)\n      }\n\n      var preOrderTraverseNode = function (node) {\n        if (node !== null) {\n          console.log(node.key)\n          preOrderTraverseNode(node.left)\n          preOrderTraverseNode(node.right)\n        }\n      }\n      // 先序遍历\n      this.preOrderTraverse = function () {\n        preOrderTraverseNode(root)\n      }\n\n      var postOrderTraverseNode = function (node) {\n        if (node !== null) {\n          postOrderTraverseNode(node.left)\n          postOrderTraverseNode(node.right)\n          // 如果没有左右子节点最后打印根节点\n          console.log(node.key)\n        }\n      }\n      // 后序遍历\n      this.postOrderTraverse = function () {\n        postOrderTraverseNode(root)\n      }\n\n      var minNode = function (node) {\n        if (node) {\n          // 如果当前节点不为空并且含有左子节点\n          while (node && node.left !== null) {\n            node = node.left\n          }\n          return node.key\n        }\n      }\n      // 查找最小节点\n      this.min = function () {\n        return minNode(root)\n      }\n      var maxNode = function (node) {\n        if (node) {\n          // 如果当前节点不为空并且含有右子节点\n          while (node && node.right !== null) {\n            node = node.right\n          }\n          return node.key\n        }\n      }\n      this.max = function () {\n        return maxNode(root)\n      }\n      var searchNode = function (node, key) {\n        // 如果节点为空则返回\n        if (node === null) {\n          return false\n        }\n\n        if (key < node.key) {\n          // 如果查找值小于当前节点值则查找左子节点\n          return searchNode(node.left, key)\n        } else if (key > node.key) {\n          // 如果查找值大于当前节点值则查找右子节点\n          return searchNode(node.right, key)\n        } else {\n          return true\n        }\n      }\n      // 查找指定节点\n      this.search = function (key) {\n        return searchNode(root, key)\n      }\n      var removeNode = function (node, key) {\n        if (node == null) {\n          return null\n        }\n        if (key < node.key) {\n          node.left = removeNode(node.left, key)\n          return node\n        } else if (key > node.key) {\n          node.right = removeNode(node.right, key)\n          return node\n        } else {\n          // 需要移除的是一个叶子节点\n          if (node.left === null && node.right === null) {\n            node = null\n            return node\n          }\n\n          //需要移除的节点包含一个叶子节点\n\n          if (node.left === null) {\n            node = node.right\n            return node\n          } else if (node.left === null) {\n            node = node.left\n            return node\n          }\n          //需要移除的节点包含两个子节点\n          var aux = findMinNode(node.right)\n          node.key = aux.key\n          node.right = removeNode(node.right, axu.key)\n          return node\n        }\n      }\n      var findMinNode = function (node) {\n        if (node) {\n          while (node && node.left !== null) {\n            node = node.left\n          }\n          return node\n        }\n        return null\n      }\n      //移除节点\n      this.remove = function (key) {\n        removeNode(root, key)\n      }\n    }\n\n    var nodes = [7, 3, 6, 2, 8, 13, 5, 15];\n    var _binarSearchTree = new BinarSearchTree();\n    nodes.forEach(key => {\n      _binarSearchTree.insert(key)\n    })\n    // 打印插入完的二叉树\n    console.log(root)\n    // 调用中序遍历方法\n    _binarSearchTree.inOrderTraverse()\n    // 调用先序遍历方法\n    _binarSearchTree.preOrderTraverse()\n    // 调用后序遍历方法\n    _binarSearchTree.postOrderTraverse()\n    // 查找最小值\n    console.log(_binarSearchTree.min())\n    // 查找最大值\n    console.log(_binarSearchTree.max())\n    // 查找特定值\n    console.log(_binarSearchTree.search(2));\n    // 删除节点\n    _binarSearchTree.remove(8)\n    _binarSearchTree.inOrderTraverse()\n  }\n}\n</script>\n","source":"_posts/JavaScript/javascript实现简单二叉查找树.md","raw":"---\ntitle: JavaScript 实现简单二叉查找树\ndate: 2018-01-13 16:07:32\ntags:\n  - JavaScript\n  - 算法\ncategory: 前端\n---\n\n![二叉树](http://or2vgb0pq.bkt.clouddn.com//18-10-29/46844758.jpg)\n\n二叉树：二叉树就是一种数据结构， 它的组织关系就像是自然界中的树一样。官方语言的定义是：是一个有限元素的集合,该集合或者为空、或者由一个称为根的元素及两个不相交的、被分别称为左子树和右子树的二叉树组成。\n\n节点： 树中的每个元素称为一个节点，\n\n根节点： 位于整棵树顶点的节点，它没有父节点。\n\n子节点： 其他节点的后代\n\n叶子节点: 没有子节点的元素称为叶子节点。\n\n#### 二叉树创建代码的实现\n\n> 创建二叉树\n\n```javascript\n// 声明根节点\nvar root = null\n// 声明函数\nfunction BinarSearchTree() {\n  var Node = function(key) {\n    this.key = key\n    this.left = null\n    this.right = null\n  }\n\n  // 这个方法会通过递归得调用自身，来找到新添加节点的合适位置\n  var insertNode = function(node, newNode) {\n    // 判断插入左节点还是右节点,然后递归调用\n    if (newNode.key <= node.key) {\n      if (node.left === null) {\n        node.left = newNode\n      } else {\n        insertNode(node.left, newNode)\n      }\n    } else {\n      if (node.right === null) {\n        node.right = newNode\n      } else {\n        insertNode(node.right, newNode)\n      }\n    }\n    // 判断创建根节点还是插入子节点\n    this.insert = function(key) {\n      // 创建一个用来表示新节点的Node类实例，因此需要new一下Node类并传入需要插入的key值，它会自动初始化为左右节点为null的一个新节点\n      var newNode = new Node(key)\n      // 先判断树是否为空，若为空，新插入的节点就作为根节点，如不为空，调用一个辅助方法insertNode()方法，将根节点和新节点传入\n      if (root === null) {\n        root = newNode\n      } else {\n        insertNode(root, newNode)\n      }\n    }\n  }\n}\n//定义要插入的二叉树\nvar nodes = [7, 3, 6, 2, 8, 13, 5, 15]\n// 实例化二叉树函数\nvar _binarSearchTree = new BinarSearchTree()\n// 遍历数组插入节点\nnodes.forEach(key => {\n  _binarSearchTree.insert(key)\n})\n//查看二叉树输出结果】\nconsole.log(root)\n```\n\n#### 二叉树的中序遍历\n\n中序遍历（LDR）是二叉树遍历的一种，也叫做中根遍历、中序周游。在二叉树中，先左后根再右。巧记：左根右。\n\n中序便历可用于排序。\n\n以下代码先查找最左叶子节点然后打印出来，如果没有最左叶子节点则打印根节点，最后打印右子节点。\n\n> 中序遍历\n\n```javascript\n      var inOrderTraverseNode = function (node) {\n        // 判断当前节点如果不为空则递归查找节点，按照左根右的顺序\n        if (node !== null) {\n          // 先查找左叶子节点，如果左叶子节点有值则递归此节点\n          inOrderTraverseNode(node.left)\n          // 如果没有左叶子节点则打印当前根节点\n          console.log(node.key)\n          // 最后查找右子节点\n          inOrderTraverseNode(node.right)\n        }\n      }\n      //中序遍历\n      this.inOrderTraverse = function () {\n        // 将二叉树根节点传入\n        inOrderTraverseNode(root)\n      }\n    }\n```\n\n#### 二叉树的先序遍历\n\n先序遍历(Pre-order)，按照根左右的顺序沿一定路径经过路径上所有的结点。在二叉树中，先根后左再右。巧记：根左右。\n\n先序遍历常用于复制二叉树。\n\n先序遍历与中序遍历代码很像，只不过先查找根节点打印出来，然后在查找最左叶子节点然后打印出来，最后打印右子节点。\n\n> 先序遍历\n\n```javascript\nvar preOrderTraverseNode = function(node) {\n  if (node !== null) {\n    // 先打印当前节点然后在查找左右子节点\n    console.log(node.key)\n    preOrderTraverseNode(node.left)\n    preOrderTraverseNode(node.right)\n  }\n}\nthis.preOrderTraverse = function() {\n  preOrderTraverseNode(root)\n}\n```\n\n#### 二叉树的后序遍历\n\n后序遍历（LRD）是二叉树遍历的一种，也叫做后根遍历、后序周游，可记做左右根。后序遍历有递归算法和非递归算法两种。在二叉树中，先左后右再根。巧记：左右根。\n\n后序遍历实际应用于操作系统的文件系统遍历中。\n\n后序遍历与上面两个遍历一样，这回变为左右根的顺序。\n\n> 后序遍历\n\n```javascript\nthis.postOrderTraverse = function() {\n  postOrderTraverseNode(root)\n}\nvar postOrderTraverseNode = function(node) {\n  if (node !== null) {\n    postOrderTraverseNode(node.left)\n    postOrderTraverseNode(node.right)\n    // 如果没有左右子节点最后打印根节点\n    console.log(node.key)\n  }\n}\n```\n\n#### 二叉树查找最大值与最小值\n\n二叉树的最左子节点为最小，最右节点为最大，按照这个规律我们只需要递归查找最左与最右子节点就可以查到最大与最下值。\n\n> 查找最小节点\n\n```javascript\nvar minNode = function(node) {\n  if (node) {\n    // 如果当前节点不为空并且含有左子节点\n    while (node && node.left !== null) {\n      node = node.left\n    }\n    return node.key\n  }\n}\n// 查找最小节点\nthis.min = function() {\n  return minNode(root)\n}\n```\n\n> 查找最大节点\n\n```javascript\nvar maxNode = function(node) {\n  if (node) {\n    // 如果当前节点不为空并且含有右子节点\n    while (node && node.right !== null) {\n      node = node.right\n    }\n    return node.key\n  }\n}\n// 查找最大节点\nthis.max = function() {\n  return maxNode(root)\n}\n```\n\n#### 二叉树查找指定值\n\n实现查找二叉树特定值这个方法首先检验 node 的合法性，如果为 null，直接退出，并返回 fasle。如果传入的 key 比当前传入 node 的 key 值小，它会继续递归查找 node 的左侧节点，反之，查找右侧节点。如果找到相等节点，直接退出，并返回 true。\n\n> 查找指定值\n\n```javascript\nvar searchNode = function(node, key) {\n  // 如果节点为空则返回\n  if (node === null) {\n    return false\n  }\n\n  if (key < node.key) {\n    // 如果查找值小于当前节点值则查找左子节点\n    return searchNode(node.left, key)\n  } else if (key > node.key) {\n    // 如果查找值大于当前节点值则查找右子节点\n    return searchNode(node.right, key)\n  } else {\n    return true\n  }\n}\n// 查找指定节点\nthis.search = function(key) {\n  return searchNode(root, key)\n}\n```\n\n#### 移除节点\n\n移除节点的实现情况比较复杂，它会有三种不同的情况：\n\n1.  需要移除的节点是一个叶子节点\n\n2.  需要移除的节点包含一个子节点\n\n3.  需要移除的节点包含两个子节点\n\n和实现搜索指定节点一元，要移除某个节点，必须先找到它所在的位置，因此移除方法的实现中部分代码和上面相同，其中，移除包含两个子节点的节点是最复杂的情况，它包含左侧节点和右侧节点，对它进行移除主要需要三个步骤：\n\n1.  需要找到它右侧子树中的最小节点来代替它的位置\n2.  将它右侧子树中的最小节点移除\n3.  将更新后的节点的引用指向原节点的父节点\n\n有点绕，但必须这样，因为删除元素后的二叉搜索树必须保持它的排序性质。\n\n> 移除节点\n\n```javascript\nvar removeNode = function(node, key) {\n  if (node == null) {\n    return null\n  }\n  if (key < node.key) {\n    node.left = removeNode(node.left, key)\n    return node\n  } else if (key > node.key) {\n    node.right = removeNode(node.right, key)\n    return node\n  } else {\n    // 需要移除的是一个叶子节点\n    if (node.left === null && node.right === null) {\n      node = null\n      return node\n    }\n\n    //需要移除的节点包含一个叶子节点\n\n    if (node.left === null) {\n      node = node.right\n      return node\n    } else if (node.left === null) {\n      node = node.left\n      return node\n    }\n    //需要移除的节点包含两个子节点\n    var aux = findMinNode(node.right)\n    node.key = aux.key\n    node.right = removeNode(node.right, axu.key)\n    return node\n  }\n}\nvar findMinNode = function(node) {\n  if (node) {\n    while (node && node.left !== null) {\n      node = node.left\n    }\n    return node\n  }\n  return null\n}\n//移除节点\nthis.remove = function(key) {\n  removeNode(root, key)\n}\n```\n\n> 完整代码\n\n```javascript\n// 声明根节点\nvar root = null\n// 声明函数\nfunction BinarSearchTree() {\n  var Node = function(key) {\n    this.key = key\n    this.left = null\n    this.right = null\n  }\n  // 判断创建根节点还是插入子节点\n  this.insert = function(key) {\n    var newNode = new Node(key)\n    if (root === null) {\n      root = newNode\n    } else {\n      insertNode(root, newNode)\n    }\n  }\n  // 判断插入左节点还是右节点\n  var insertNode = function(node, newNode) {\n    if (newNode.key <= node.key) {\n      if (node.left === null) {\n        node.left = newNode\n      } else {\n        insertNode(node.left, newNode)\n      }\n    } else {\n      if (node.right === null) {\n        node.right = newNode\n      } else {\n        insertNode(node.right, newNode)\n      }\n    }\n  }\n\n  var inOrderTraverseNode = function(node) {\n    // 判断当前节点如果不为空则递归查找节点，按照左根右的顺序\n    if (node !== null) {\n      // 先查找左叶子节点，如果左叶子节点有值则递归此节点\n      inOrderTraverseNode(node.left)\n      // 如果没有左叶子节点则打印当前根节点\n      console.log(node.key)\n      // 最后查找右子节点\n      inOrderTraverseNode(node.right)\n    }\n  }\n  //中序遍历\n  this.inOrderTraverse = function() {\n    // 将二叉树根节点传入\n    inOrderTraverseNode(root)\n  }\n\n  var preOrderTraverseNode = function(node) {\n    if (node !== null) {\n      console.log(node.key)\n      preOrderTraverseNode(node.left)\n      preOrderTraverseNode(node.right)\n    }\n  }\n  // 先序遍历\n  this.preOrderTraverse = function() {\n    preOrderTraverseNode(root)\n  }\n\n  var postOrderTraverseNode = function(node) {\n    if (node !== null) {\n      postOrderTraverseNode(node.left)\n      postOrderTraverseNode(node.right)\n      // 如果没有左右子节点最后打印根节点\n      console.log(node.key)\n    }\n  }\n  // 后序遍历\n  this.postOrderTraverse = function() {\n    postOrderTraverseNode(root)\n  }\n\n  var minNode = function(node) {\n    if (node) {\n      // 如果当前节点不为空并且含有左子节点\n      while (node && node.left !== null) {\n        node = node.left\n      }\n      return node.key\n    }\n  }\n  // 查找最小节点\n  this.min = function() {\n    return minNode(root)\n  }\n  var maxNode = function(node) {\n    if (node) {\n      // 如果当前节点不为空并且含有右子节点\n      while (node && node.right !== null) {\n        node = node.right\n      }\n      return node.key\n    }\n  }\n  //查找最大节点\n  this.max = function() {\n    return maxNode(root)\n  }\n  var searchNode = function(node, key) {\n    // 如果节点为空则返回\n    if (node === null) {\n      return false\n    }\n\n    if (key < node.key) {\n      // 如果查找值小于当前节点值则查找左子节点\n      return searchNode(node.left, key)\n    } else if (key > node.key) {\n      // 如果查找值大于当前节点值则查找右子节点\n      return searchNode(node.right, key)\n    } else {\n      return true\n    }\n  }\n  // 查找指定节点\n  this.search = function(key) {\n    return searchNode(root, key)\n  }\n  var removeNode = function(node, key) {\n    if (node == null) {\n      return null\n    }\n    if (key < node.key) {\n      node.left = removeNode(node.left, key)\n      return node\n    } else if (key > node.key) {\n      node.right = removeNode(node.right, key)\n      return node\n    } else {\n      // 需要移除的是一个叶子节点\n      if (node.left === null && node.right === null) {\n        node = null\n        return node\n      }\n\n      //需要移除的节点包含一个叶子节点\n\n      if (node.left === null) {\n        node = node.right\n        return node\n      } else if (node.left === null) {\n        node = node.left\n        return node\n      }\n      //需要移除的节点包含两个子节点\n      var aux = findMinNode(node.right)\n      node.key = aux.key\n      node.right = removeNode(node.right, axu.key)\n      return node\n    }\n  }\n  var findMinNode = function(node) {\n    if (node) {\n      while (node && node.left !== null) {\n        node = node.left\n      }\n      return node\n    }\n    return null\n  }\n  //移除节点\n  this.remove = function(key) {\n    removeNode(root, key)\n  }\n}\n\nvar nodes = [7, 3, 6, 2, 8, 13, 5, 15]\nvar _binarSearchTree = new BinarSearchTree()\nnodes.forEach(key => {\n  _binarSearchTree.insert(key)\n})\n// 打印插入完的二叉树\nconsole.log(root)\n// 调用中序遍历方法\n_binarSearchTree.inOrderTraverse()\n// 调用先序遍历方法\n_binarSearchTree.preOrderTraverse()\n// 调用后序遍历方法\n_binarSearchTree.postOrderTraverse()\n// 查找最小值\nconsole.log(_binarSearchTree.min())\n// 查找最大值\nconsole.log(_binarSearchTree.max())\n// 查找特定值\nconsole.log(_binarSearchTree.search(2))\n// 删除节点\n_binarSearchTree.remove(8)\n_binarSearchTree.inOrderTraverse()\n```\n\n<script>\nexport default {\n  mounted(){\n     // 声明根节点\n    var root = null;\n    // 声明函数\n    function BinarSearchTree() {\n      var Node = function (key) {\n        this.key = key;\n        this.left = null;\n        this.right = null;\n      };\n      // 判断创建根节点还是插入子节点\n      this.insert = function (key) {\n        var newNode = new Node(key)\n        if (root === null) {\n          root = newNode\n        } else {\n          insertNode(root, newNode)\n        }\n      }\n      // 判断插入左节点还是右节点\n      var insertNode = function (node, newNode) {\n        if (newNode.key <= node.key) {\n          if (node.left === null) {\n            node.left = newNode\n          } else {\n            insertNode(node.left, newNode)\n          }\n        } else {\n          if (node.right === null) {\n            node.right = newNode\n          } else {\n            insertNode(node.right, newNode)\n          }\n        }\n\n      }\n\n      var inOrderTraverseNode = function (node) {\n        // 判断当前节点如果不为空则递归查找节点，按照左根右的顺序\n        if (node !== null) {\n          // 先查找左叶子节点，如果左叶子节点有值则递归此节点\n          inOrderTraverseNode(node.left)\n          // 如果没有左叶子节点则打印当前根节点\n          console.log(node.key)\n          // 最后查找右子节点\n          inOrderTraverseNode(node.right)\n        }\n      }\n      //中序遍历\n      this.inOrderTraverse = function () {\n        // 将二叉树根节点传入\n        inOrderTraverseNode(root)\n      }\n\n      var preOrderTraverseNode = function (node) {\n        if (node !== null) {\n          console.log(node.key)\n          preOrderTraverseNode(node.left)\n          preOrderTraverseNode(node.right)\n        }\n      }\n      // 先序遍历\n      this.preOrderTraverse = function () {\n        preOrderTraverseNode(root)\n      }\n\n      var postOrderTraverseNode = function (node) {\n        if (node !== null) {\n          postOrderTraverseNode(node.left)\n          postOrderTraverseNode(node.right)\n          // 如果没有左右子节点最后打印根节点\n          console.log(node.key)\n        }\n      }\n      // 后序遍历\n      this.postOrderTraverse = function () {\n        postOrderTraverseNode(root)\n      }\n\n      var minNode = function (node) {\n        if (node) {\n          // 如果当前节点不为空并且含有左子节点\n          while (node && node.left !== null) {\n            node = node.left\n          }\n          return node.key\n        }\n      }\n      // 查找最小节点\n      this.min = function () {\n        return minNode(root)\n      }\n      var maxNode = function (node) {\n        if (node) {\n          // 如果当前节点不为空并且含有右子节点\n          while (node && node.right !== null) {\n            node = node.right\n          }\n          return node.key\n        }\n      }\n      this.max = function () {\n        return maxNode(root)\n      }\n      var searchNode = function (node, key) {\n        // 如果节点为空则返回\n        if (node === null) {\n          return false\n        }\n\n        if (key < node.key) {\n          // 如果查找值小于当前节点值则查找左子节点\n          return searchNode(node.left, key)\n        } else if (key > node.key) {\n          // 如果查找值大于当前节点值则查找右子节点\n          return searchNode(node.right, key)\n        } else {\n          return true\n        }\n      }\n      // 查找指定节点\n      this.search = function (key) {\n        return searchNode(root, key)\n      }\n      var removeNode = function (node, key) {\n        if (node == null) {\n          return null\n        }\n        if (key < node.key) {\n          node.left = removeNode(node.left, key)\n          return node\n        } else if (key > node.key) {\n          node.right = removeNode(node.right, key)\n          return node\n        } else {\n          // 需要移除的是一个叶子节点\n          if (node.left === null && node.right === null) {\n            node = null\n            return node\n          }\n\n          //需要移除的节点包含一个叶子节点\n\n          if (node.left === null) {\n            node = node.right\n            return node\n          } else if (node.left === null) {\n            node = node.left\n            return node\n          }\n          //需要移除的节点包含两个子节点\n          var aux = findMinNode(node.right)\n          node.key = aux.key\n          node.right = removeNode(node.right, axu.key)\n          return node\n        }\n      }\n      var findMinNode = function (node) {\n        if (node) {\n          while (node && node.left !== null) {\n            node = node.left\n          }\n          return node\n        }\n        return null\n      }\n      //移除节点\n      this.remove = function (key) {\n        removeNode(root, key)\n      }\n    }\n\n    var nodes = [7, 3, 6, 2, 8, 13, 5, 15];\n    var _binarSearchTree = new BinarSearchTree();\n    nodes.forEach(key => {\n      _binarSearchTree.insert(key)\n    })\n    // 打印插入完的二叉树\n    console.log(root)\n    // 调用中序遍历方法\n    _binarSearchTree.inOrderTraverse()\n    // 调用先序遍历方法\n    _binarSearchTree.preOrderTraverse()\n    // 调用后序遍历方法\n    _binarSearchTree.postOrderTraverse()\n    // 查找最小值\n    console.log(_binarSearchTree.min())\n    // 查找最大值\n    console.log(_binarSearchTree.max())\n    // 查找特定值\n    console.log(_binarSearchTree.search(2));\n    // 删除节点\n    _binarSearchTree.remove(8)\n    _binarSearchTree.inOrderTraverse()\n  }\n}\n</script>\n","slug":"JavaScript/javascript实现简单二叉查找树","published":1,"updated":"2019-04-16T03:35:34.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctdv003o2e475cset97j","content":"<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://or2vgb0pq.bkt.clouddn.com//18-10-29/46844758.jpg\" alt=\"二叉树\" title>\n                </div>\n                <div class=\"image-caption\">二叉树</div>\n            </figure>\n\n<p>二叉树：二叉树就是一种数据结构， 它的组织关系就像是自然界中的树一样。官方语言的定义是：是一个有限元素的集合,该集合或者为空、或者由一个称为根的元素及两个不相交的、被分别称为左子树和右子树的二叉树组成。</p>\n<p>节点： 树中的每个元素称为一个节点，</p>\n<p>根节点： 位于整棵树顶点的节点，它没有父节点。</p>\n<p>子节点： 其他节点的后代</p>\n<p>叶子节点: 没有子节点的元素称为叶子节点。</p>\n<h4 id=\"二叉树创建代码的实现\"><a href=\"#二叉树创建代码的实现\" class=\"headerlink\" title=\"二叉树创建代码的实现\"></a>二叉树创建代码的实现</h4><blockquote>\n<p>创建二叉树</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明根节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"comment\">// 声明函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BinarSearchTree</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Node = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.key = key</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.left = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.right = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这个方法会通过递归得调用自身，来找到新添加节点的合适位置</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> insertNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, newNode</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断插入左节点还是右节点,然后递归调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newNode.key &lt;= node.key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.left = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        insertNode(node.left, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.right === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.right = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        insertNode(node.right, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断创建根节点还是插入子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.insert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 创建一个用来表示新节点的Node类实例，因此需要new一下Node类并传入需要插入的key值，它会自动初始化为左右节点为null的一个新节点</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> newNode = <span class=\"keyword\">new</span> Node(key)</span><br><span class=\"line\">      <span class=\"comment\">// 先判断树是否为空，若为空，新插入的节点就作为根节点，如不为空，调用一个辅助方法insertNode()方法，将根节点和新节点传入</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        root = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        insertNode(root, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义要插入的二叉树</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nodes = [<span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span>]</span><br><span class=\"line\"><span class=\"comment\">// 实例化二叉树函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> _binarSearchTree = <span class=\"keyword\">new</span> BinarSearchTree()</span><br><span class=\"line\"><span class=\"comment\">// 遍历数组插入节点</span></span><br><span class=\"line\">nodes.forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  _binarSearchTree.insert(key)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//查看二叉树输出结果】</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(root)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二叉树的中序遍历\"><a href=\"#二叉树的中序遍历\" class=\"headerlink\" title=\"二叉树的中序遍历\"></a>二叉树的中序遍历</h4><p>中序遍历（LDR）是二叉树遍历的一种，也叫做中根遍历、中序周游。在二叉树中，先左后根再右。巧记：左根右。</p>\n<p>中序便历可用于排序。</p>\n<p>以下代码先查找最左叶子节点然后打印出来，如果没有最左叶子节点则打印根节点，最后打印右子节点。</p>\n<blockquote>\n<p>中序遍历</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> inOrderTraverseNode = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断当前节点如果不为空则递归查找节点，按照左根右的顺序</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 先查找左叶子节点，如果左叶子节点有值则递归此节点</span></span><br><span class=\"line\">      inOrderTraverseNode(node.left)</span><br><span class=\"line\">      <span class=\"comment\">// 如果没有左叶子节点则打印当前根节点</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(node.key)</span><br><span class=\"line\">      <span class=\"comment\">// 最后查找右子节点</span></span><br><span class=\"line\">      inOrderTraverseNode(node.right)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.inOrderTraverse = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将二叉树根节点传入</span></span><br><span class=\"line\">    inOrderTraverseNode(root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二叉树的先序遍历\"><a href=\"#二叉树的先序遍历\" class=\"headerlink\" title=\"二叉树的先序遍历\"></a>二叉树的先序遍历</h4><p>先序遍历(Pre-order)，按照根左右的顺序沿一定路径经过路径上所有的结点。在二叉树中，先根后左再右。巧记：根左右。</p>\n<p>先序遍历常用于复制二叉树。</p>\n<p>先序遍历与中序遍历代码很像，只不过先查找根节点打印出来，然后在查找最左叶子节点然后打印出来，最后打印右子节点。</p>\n<blockquote>\n<p>先序遍历</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> preOrderTraverseNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先打印当前节点然后在查找左右子节点</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(node.key)</span><br><span class=\"line\">    preOrderTraverseNode(node.left)</span><br><span class=\"line\">    preOrderTraverseNode(node.right)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.preOrderTraverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  preOrderTraverseNode(root)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二叉树的后序遍历\"><a href=\"#二叉树的后序遍历\" class=\"headerlink\" title=\"二叉树的后序遍历\"></a>二叉树的后序遍历</h4><p>后序遍历（LRD）是二叉树遍历的一种，也叫做后根遍历、后序周游，可记做左右根。后序遍历有递归算法和非递归算法两种。在二叉树中，先左后右再根。巧记：左右根。</p>\n<p>后序遍历实际应用于操作系统的文件系统遍历中。</p>\n<p>后序遍历与上面两个遍历一样，这回变为左右根的顺序。</p>\n<blockquote>\n<p>后序遍历</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.postOrderTraverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  postOrderTraverseNode(root)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> postOrderTraverseNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    postOrderTraverseNode(node.left)</span><br><span class=\"line\">    postOrderTraverseNode(node.right)</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有左右子节点最后打印根节点</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(node.key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二叉树查找最大值与最小值\"><a href=\"#二叉树查找最大值与最小值\" class=\"headerlink\" title=\"二叉树查找最大值与最小值\"></a>二叉树查找最大值与最小值</h4><p>二叉树的最左子节点为最小，最右节点为最大，按照这个规律我们只需要递归查找最左与最右子节点就可以查到最大与最下值。</p>\n<blockquote>\n<p>查找最小节点</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> minNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前节点不为空并且含有左子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node &amp;&amp; node.left !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      node = node.left</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.key</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查找最小节点</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.min = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> minNode(root)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查找最大节点</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前节点不为空并且含有右子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node &amp;&amp; node.right !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      node = node.right</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.key</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查找最大节点</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.max = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxNode(root)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二叉树查找指定值\"><a href=\"#二叉树查找指定值\" class=\"headerlink\" title=\"二叉树查找指定值\"></a>二叉树查找指定值</h4><p>实现查找二叉树特定值这个方法首先检验 node 的合法性，如果为 null，直接退出，并返回 fasle。如果传入的 key 比当前传入 node 的 key 值小，它会继续递归查找 node 的左侧节点，反之，查找右侧节点。如果找到相等节点，直接退出，并返回 true。</p>\n<blockquote>\n<p>查找指定值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> searchNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果节点为空则返回</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key &lt; node.key) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果查找值小于当前节点值则查找左子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> searchNode(node.left, key)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; node.key) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果查找值大于当前节点值则查找右子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> searchNode(node.right, key)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查找指定节点</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.search = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> searchNode(root, key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"移除节点\"><a href=\"#移除节点\" class=\"headerlink\" title=\"移除节点\"></a>移除节点</h4><p>移除节点的实现情况比较复杂，它会有三种不同的情况：</p>\n<ol>\n<li><p>需要移除的节点是一个叶子节点</p>\n</li>\n<li><p>需要移除的节点包含一个子节点</p>\n</li>\n<li><p>需要移除的节点包含两个子节点</p>\n</li>\n</ol>\n<p>和实现搜索指定节点一元，要移除某个节点，必须先找到它所在的位置，因此移除方法的实现中部分代码和上面相同，其中，移除包含两个子节点的节点是最复杂的情况，它包含左侧节点和右侧节点，对它进行移除主要需要三个步骤：</p>\n<ol>\n<li>需要找到它右侧子树中的最小节点来代替它的位置</li>\n<li>将它右侧子树中的最小节点移除</li>\n<li>将更新后的节点的引用指向原节点的父节点</li>\n</ol>\n<p>有点绕，但必须这样，因为删除元素后的二叉搜索树必须保持它的排序性质。</p>\n<blockquote>\n<p>移除节点</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removeNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key &lt; node.key) &#123;</span><br><span class=\"line\">    node.left = removeNode(node.left, key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; node.key) &#123;</span><br><span class=\"line\">    node.right = removeNode(node.right, key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要移除的是一个叶子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span> &amp;&amp; node.right === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      node = <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//需要移除的节点包含一个叶子节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      node = node.right</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      node = node.left</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//需要移除的节点包含两个子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> aux = findMinNode(node.right)</span><br><span class=\"line\">    node.key = aux.key</span><br><span class=\"line\">    node.right = removeNode(node.right, axu.key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> findMinNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node &amp;&amp; node.left !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      node = node.left</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//移除节点</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  removeNode(root, key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>完整代码</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明根节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"comment\">// 声明函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BinarSearchTree</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Node = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.key = key</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.left = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.right = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 判断创建根节点还是插入子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newNode = <span class=\"keyword\">new</span> Node(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      root = newNode</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      insertNode(root, newNode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 判断插入左节点还是右节点</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> insertNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, newNode</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newNode.key &lt;= node.key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.left = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        insertNode(node.left, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.right === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.right = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        insertNode(node.right, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> inOrderTraverseNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断当前节点如果不为空则递归查找节点，按照左根右的顺序</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 先查找左叶子节点，如果左叶子节点有值则递归此节点</span></span><br><span class=\"line\">      inOrderTraverseNode(node.left)</span><br><span class=\"line\">      <span class=\"comment\">// 如果没有左叶子节点则打印当前根节点</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(node.key)</span><br><span class=\"line\">      <span class=\"comment\">// 最后查找右子节点</span></span><br><span class=\"line\">      inOrderTraverseNode(node.right)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.inOrderTraverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将二叉树根节点传入</span></span><br><span class=\"line\">    inOrderTraverseNode(root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> preOrderTraverseNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(node.key)</span><br><span class=\"line\">      preOrderTraverseNode(node.left)</span><br><span class=\"line\">      preOrderTraverseNode(node.right)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 先序遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.preOrderTraverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    preOrderTraverseNode(root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> postOrderTraverseNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      postOrderTraverseNode(node.left)</span><br><span class=\"line\">      postOrderTraverseNode(node.right)</span><br><span class=\"line\">      <span class=\"comment\">// 如果没有左右子节点最后打印根节点</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(node.key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 后序遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.postOrderTraverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    postOrderTraverseNode(root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> minNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前节点不为空并且含有左子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (node &amp;&amp; node.left !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = node.left</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node.key</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 查找最小节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.min = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minNode(root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> maxNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前节点不为空并且含有右子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (node &amp;&amp; node.right !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = node.right</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node.key</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//查找最大节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.max = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxNode(root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> searchNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果节点为空则返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key &lt; node.key) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果查找值小于当前节点值则查找左子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> searchNode(node.left, key)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; node.key) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果查找值大于当前节点值则查找右子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> searchNode(node.right, key)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 查找指定节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.search = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> searchNode(root, key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> removeNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key &lt; node.key) &#123;</span><br><span class=\"line\">      node.left = removeNode(node.left, key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; node.key) &#123;</span><br><span class=\"line\">      node.right = removeNode(node.right, key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 需要移除的是一个叶子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span> &amp;&amp; node.right === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//需要移除的节点包含一个叶子节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = node.right</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = node.left</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//需要移除的节点包含两个子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> aux = findMinNode(node.right)</span><br><span class=\"line\">      node.key = aux.key</span><br><span class=\"line\">      node.right = removeNode(node.right, axu.key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> findMinNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (node &amp;&amp; node.left !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = node.left</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//移除节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    removeNode(root, key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nodes = [<span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> _binarSearchTree = <span class=\"keyword\">new</span> BinarSearchTree()</span><br><span class=\"line\">nodes.forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  _binarSearchTree.insert(key)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 打印插入完的二叉树</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(root)</span><br><span class=\"line\"><span class=\"comment\">// 调用中序遍历方法</span></span><br><span class=\"line\">_binarSearchTree.inOrderTraverse()</span><br><span class=\"line\"><span class=\"comment\">// 调用先序遍历方法</span></span><br><span class=\"line\">_binarSearchTree.preOrderTraverse()</span><br><span class=\"line\"><span class=\"comment\">// 调用后序遍历方法</span></span><br><span class=\"line\">_binarSearchTree.postOrderTraverse()</span><br><span class=\"line\"><span class=\"comment\">// 查找最小值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_binarSearchTree.min())</span><br><span class=\"line\"><span class=\"comment\">// 查找最大值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_binarSearchTree.max())</span><br><span class=\"line\"><span class=\"comment\">// 查找特定值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_binarSearchTree.search(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"comment\">// 删除节点</span></span><br><span class=\"line\">_binarSearchTree.remove(<span class=\"number\">8</span>)</span><br><span class=\"line\">_binarSearchTree.inOrderTraverse()</span><br></pre></td></tr></table></figure>\n\n<script>\nexport default {\n  mounted(){\n     // 声明根节点\n    var root = null;\n    // 声明函数\n    function BinarSearchTree() {\n      var Node = function (key) {\n        this.key = key;\n        this.left = null;\n        this.right = null;\n      };\n      // 判断创建根节点还是插入子节点\n      this.insert = function (key) {\n        var newNode = new Node(key)\n        if (root === null) {\n          root = newNode\n        } else {\n          insertNode(root, newNode)\n        }\n      }\n      // 判断插入左节点还是右节点\n      var insertNode = function (node, newNode) {\n        if (newNode.key <= node.key) {\n          if (node.left === null) {\n            node.left = newNode\n          } else {\n            insertNode(node.left, newNode)\n          }\n        } else {\n          if (node.right === null) {\n            node.right = newNode\n          } else {\n            insertNode(node.right, newNode)\n          }\n        }\n\n      }\n\n      var inOrderTraverseNode = function (node) {\n        // 判断当前节点如果不为空则递归查找节点，按照左根右的顺序\n        if (node !== null) {\n          // 先查找左叶子节点，如果左叶子节点有值则递归此节点\n          inOrderTraverseNode(node.left)\n          // 如果没有左叶子节点则打印当前根节点\n          console.log(node.key)\n          // 最后查找右子节点\n          inOrderTraverseNode(node.right)\n        }\n      }\n      //中序遍历\n      this.inOrderTraverse = function () {\n        // 将二叉树根节点传入\n        inOrderTraverseNode(root)\n      }\n\n      var preOrderTraverseNode = function (node) {\n        if (node !== null) {\n          console.log(node.key)\n          preOrderTraverseNode(node.left)\n          preOrderTraverseNode(node.right)\n        }\n      }\n      // 先序遍历\n      this.preOrderTraverse = function () {\n        preOrderTraverseNode(root)\n      }\n\n      var postOrderTraverseNode = function (node) {\n        if (node !== null) {\n          postOrderTraverseNode(node.left)\n          postOrderTraverseNode(node.right)\n          // 如果没有左右子节点最后打印根节点\n          console.log(node.key)\n        }\n      }\n      // 后序遍历\n      this.postOrderTraverse = function () {\n        postOrderTraverseNode(root)\n      }\n\n      var minNode = function (node) {\n        if (node) {\n          // 如果当前节点不为空并且含有左子节点\n          while (node && node.left !== null) {\n            node = node.left\n          }\n          return node.key\n        }\n      }\n      // 查找最小节点\n      this.min = function () {\n        return minNode(root)\n      }\n      var maxNode = function (node) {\n        if (node) {\n          // 如果当前节点不为空并且含有右子节点\n          while (node && node.right !== null) {\n            node = node.right\n          }\n          return node.key\n        }\n      }\n      this.max = function () {\n        return maxNode(root)\n      }\n      var searchNode = function (node, key) {\n        // 如果节点为空则返回\n        if (node === null) {\n          return false\n        }\n\n        if (key < node.key) {\n          // 如果查找值小于当前节点值则查找左子节点\n          return searchNode(node.left, key)\n        } else if (key > node.key) {\n          // 如果查找值大于当前节点值则查找右子节点\n          return searchNode(node.right, key)\n        } else {\n          return true\n        }\n      }\n      // 查找指定节点\n      this.search = function (key) {\n        return searchNode(root, key)\n      }\n      var removeNode = function (node, key) {\n        if (node == null) {\n          return null\n        }\n        if (key < node.key) {\n          node.left = removeNode(node.left, key)\n          return node\n        } else if (key > node.key) {\n          node.right = removeNode(node.right, key)\n          return node\n        } else {\n          // 需要移除的是一个叶子节点\n          if (node.left === null && node.right === null) {\n            node = null\n            return node\n          }\n\n          //需要移除的节点包含一个叶子节点\n\n          if (node.left === null) {\n            node = node.right\n            return node\n          } else if (node.left === null) {\n            node = node.left\n            return node\n          }\n          //需要移除的节点包含两个子节点\n          var aux = findMinNode(node.right)\n          node.key = aux.key\n          node.right = removeNode(node.right, axu.key)\n          return node\n        }\n      }\n      var findMinNode = function (node) {\n        if (node) {\n          while (node && node.left !== null) {\n            node = node.left\n          }\n          return node\n        }\n        return null\n      }\n      //移除节点\n      this.remove = function (key) {\n        removeNode(root, key)\n      }\n    }\n\n    var nodes = [7, 3, 6, 2, 8, 13, 5, 15];\n    var _binarSearchTree = new BinarSearchTree();\n    nodes.forEach(key => {\n      _binarSearchTree.insert(key)\n    })\n    // 打印插入完的二叉树\n    console.log(root)\n    // 调用中序遍历方法\n    _binarSearchTree.inOrderTraverse()\n    // 调用先序遍历方法\n    _binarSearchTree.preOrderTraverse()\n    // 调用后序遍历方法\n    _binarSearchTree.postOrderTraverse()\n    // 查找最小值\n    console.log(_binarSearchTree.min())\n    // 查找最大值\n    console.log(_binarSearchTree.max())\n    // 查找特定值\n    console.log(_binarSearchTree.search(2));\n    // 删除节点\n    _binarSearchTree.remove(8)\n    _binarSearchTree.inOrderTraverse()\n  }\n}\n</script>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://or2vgb0pq.bkt.clouddn.com//18-10-29/46844758.jpg\" alt=\"二叉树\" title>\n                </div>\n                <div class=\"image-caption\">二叉树</div>\n            </figure>\n\n<p>二叉树：二叉树就是一种数据结构， 它的组织关系就像是自然界中的树一样。官方语言的定义是：是一个有限元素的集合,该集合或者为空、或者由一个称为根的元素及两个不相交的、被分别称为左子树和右子树的二叉树组成。</p>\n<p>节点： 树中的每个元素称为一个节点，</p>\n<p>根节点： 位于整棵树顶点的节点，它没有父节点。</p>\n<p>子节点： 其他节点的后代</p>\n<p>叶子节点: 没有子节点的元素称为叶子节点。</p>\n<h4 id=\"二叉树创建代码的实现\"><a href=\"#二叉树创建代码的实现\" class=\"headerlink\" title=\"二叉树创建代码的实现\"></a>二叉树创建代码的实现</h4><blockquote>\n<p>创建二叉树</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明根节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"comment\">// 声明函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BinarSearchTree</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Node = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.key = key</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.left = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.right = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这个方法会通过递归得调用自身，来找到新添加节点的合适位置</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> insertNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, newNode</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断插入左节点还是右节点,然后递归调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newNode.key &lt;= node.key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.left = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        insertNode(node.left, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.right === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.right = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        insertNode(node.right, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断创建根节点还是插入子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.insert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 创建一个用来表示新节点的Node类实例，因此需要new一下Node类并传入需要插入的key值，它会自动初始化为左右节点为null的一个新节点</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> newNode = <span class=\"keyword\">new</span> Node(key)</span><br><span class=\"line\">      <span class=\"comment\">// 先判断树是否为空，若为空，新插入的节点就作为根节点，如不为空，调用一个辅助方法insertNode()方法，将根节点和新节点传入</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        root = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        insertNode(root, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义要插入的二叉树</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nodes = [<span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span>]</span><br><span class=\"line\"><span class=\"comment\">// 实例化二叉树函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> _binarSearchTree = <span class=\"keyword\">new</span> BinarSearchTree()</span><br><span class=\"line\"><span class=\"comment\">// 遍历数组插入节点</span></span><br><span class=\"line\">nodes.forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  _binarSearchTree.insert(key)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//查看二叉树输出结果】</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(root)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二叉树的中序遍历\"><a href=\"#二叉树的中序遍历\" class=\"headerlink\" title=\"二叉树的中序遍历\"></a>二叉树的中序遍历</h4><p>中序遍历（LDR）是二叉树遍历的一种，也叫做中根遍历、中序周游。在二叉树中，先左后根再右。巧记：左根右。</p>\n<p>中序便历可用于排序。</p>\n<p>以下代码先查找最左叶子节点然后打印出来，如果没有最左叶子节点则打印根节点，最后打印右子节点。</p>\n<blockquote>\n<p>中序遍历</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> inOrderTraverseNode = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断当前节点如果不为空则递归查找节点，按照左根右的顺序</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 先查找左叶子节点，如果左叶子节点有值则递归此节点</span></span><br><span class=\"line\">      inOrderTraverseNode(node.left)</span><br><span class=\"line\">      <span class=\"comment\">// 如果没有左叶子节点则打印当前根节点</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(node.key)</span><br><span class=\"line\">      <span class=\"comment\">// 最后查找右子节点</span></span><br><span class=\"line\">      inOrderTraverseNode(node.right)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.inOrderTraverse = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将二叉树根节点传入</span></span><br><span class=\"line\">    inOrderTraverseNode(root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二叉树的先序遍历\"><a href=\"#二叉树的先序遍历\" class=\"headerlink\" title=\"二叉树的先序遍历\"></a>二叉树的先序遍历</h4><p>先序遍历(Pre-order)，按照根左右的顺序沿一定路径经过路径上所有的结点。在二叉树中，先根后左再右。巧记：根左右。</p>\n<p>先序遍历常用于复制二叉树。</p>\n<p>先序遍历与中序遍历代码很像，只不过先查找根节点打印出来，然后在查找最左叶子节点然后打印出来，最后打印右子节点。</p>\n<blockquote>\n<p>先序遍历</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> preOrderTraverseNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先打印当前节点然后在查找左右子节点</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(node.key)</span><br><span class=\"line\">    preOrderTraverseNode(node.left)</span><br><span class=\"line\">    preOrderTraverseNode(node.right)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.preOrderTraverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  preOrderTraverseNode(root)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二叉树的后序遍历\"><a href=\"#二叉树的后序遍历\" class=\"headerlink\" title=\"二叉树的后序遍历\"></a>二叉树的后序遍历</h4><p>后序遍历（LRD）是二叉树遍历的一种，也叫做后根遍历、后序周游，可记做左右根。后序遍历有递归算法和非递归算法两种。在二叉树中，先左后右再根。巧记：左右根。</p>\n<p>后序遍历实际应用于操作系统的文件系统遍历中。</p>\n<p>后序遍历与上面两个遍历一样，这回变为左右根的顺序。</p>\n<blockquote>\n<p>后序遍历</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.postOrderTraverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  postOrderTraverseNode(root)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> postOrderTraverseNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    postOrderTraverseNode(node.left)</span><br><span class=\"line\">    postOrderTraverseNode(node.right)</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有左右子节点最后打印根节点</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(node.key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二叉树查找最大值与最小值\"><a href=\"#二叉树查找最大值与最小值\" class=\"headerlink\" title=\"二叉树查找最大值与最小值\"></a>二叉树查找最大值与最小值</h4><p>二叉树的最左子节点为最小，最右节点为最大，按照这个规律我们只需要递归查找最左与最右子节点就可以查到最大与最下值。</p>\n<blockquote>\n<p>查找最小节点</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> minNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前节点不为空并且含有左子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node &amp;&amp; node.left !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      node = node.left</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.key</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查找最小节点</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.min = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> minNode(root)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查找最大节点</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前节点不为空并且含有右子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node &amp;&amp; node.right !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      node = node.right</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.key</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查找最大节点</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.max = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxNode(root)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二叉树查找指定值\"><a href=\"#二叉树查找指定值\" class=\"headerlink\" title=\"二叉树查找指定值\"></a>二叉树查找指定值</h4><p>实现查找二叉树特定值这个方法首先检验 node 的合法性，如果为 null，直接退出，并返回 fasle。如果传入的 key 比当前传入 node 的 key 值小，它会继续递归查找 node 的左侧节点，反之，查找右侧节点。如果找到相等节点，直接退出，并返回 true。</p>\n<blockquote>\n<p>查找指定值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> searchNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果节点为空则返回</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key &lt; node.key) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果查找值小于当前节点值则查找左子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> searchNode(node.left, key)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; node.key) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果查找值大于当前节点值则查找右子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> searchNode(node.right, key)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查找指定节点</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.search = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> searchNode(root, key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"移除节点\"><a href=\"#移除节点\" class=\"headerlink\" title=\"移除节点\"></a>移除节点</h4><p>移除节点的实现情况比较复杂，它会有三种不同的情况：</p>\n<ol>\n<li><p>需要移除的节点是一个叶子节点</p>\n</li>\n<li><p>需要移除的节点包含一个子节点</p>\n</li>\n<li><p>需要移除的节点包含两个子节点</p>\n</li>\n</ol>\n<p>和实现搜索指定节点一元，要移除某个节点，必须先找到它所在的位置，因此移除方法的实现中部分代码和上面相同，其中，移除包含两个子节点的节点是最复杂的情况，它包含左侧节点和右侧节点，对它进行移除主要需要三个步骤：</p>\n<ol>\n<li>需要找到它右侧子树中的最小节点来代替它的位置</li>\n<li>将它右侧子树中的最小节点移除</li>\n<li>将更新后的节点的引用指向原节点的父节点</li>\n</ol>\n<p>有点绕，但必须这样，因为删除元素后的二叉搜索树必须保持它的排序性质。</p>\n<blockquote>\n<p>移除节点</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removeNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key &lt; node.key) &#123;</span><br><span class=\"line\">    node.left = removeNode(node.left, key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; node.key) &#123;</span><br><span class=\"line\">    node.right = removeNode(node.right, key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要移除的是一个叶子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span> &amp;&amp; node.right === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      node = <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//需要移除的节点包含一个叶子节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      node = node.right</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      node = node.left</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//需要移除的节点包含两个子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> aux = findMinNode(node.right)</span><br><span class=\"line\">    node.key = aux.key</span><br><span class=\"line\">    node.right = removeNode(node.right, axu.key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> findMinNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node &amp;&amp; node.left !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      node = node.left</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//移除节点</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  removeNode(root, key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>完整代码</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明根节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"comment\">// 声明函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BinarSearchTree</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Node = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.key = key</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.left = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.right = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 判断创建根节点还是插入子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newNode = <span class=\"keyword\">new</span> Node(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      root = newNode</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      insertNode(root, newNode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 判断插入左节点还是右节点</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> insertNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, newNode</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newNode.key &lt;= node.key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.left = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        insertNode(node.left, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.right === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.right = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        insertNode(node.right, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> inOrderTraverseNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断当前节点如果不为空则递归查找节点，按照左根右的顺序</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 先查找左叶子节点，如果左叶子节点有值则递归此节点</span></span><br><span class=\"line\">      inOrderTraverseNode(node.left)</span><br><span class=\"line\">      <span class=\"comment\">// 如果没有左叶子节点则打印当前根节点</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(node.key)</span><br><span class=\"line\">      <span class=\"comment\">// 最后查找右子节点</span></span><br><span class=\"line\">      inOrderTraverseNode(node.right)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.inOrderTraverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将二叉树根节点传入</span></span><br><span class=\"line\">    inOrderTraverseNode(root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> preOrderTraverseNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(node.key)</span><br><span class=\"line\">      preOrderTraverseNode(node.left)</span><br><span class=\"line\">      preOrderTraverseNode(node.right)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 先序遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.preOrderTraverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    preOrderTraverseNode(root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> postOrderTraverseNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      postOrderTraverseNode(node.left)</span><br><span class=\"line\">      postOrderTraverseNode(node.right)</span><br><span class=\"line\">      <span class=\"comment\">// 如果没有左右子节点最后打印根节点</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(node.key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 后序遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.postOrderTraverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    postOrderTraverseNode(root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> minNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前节点不为空并且含有左子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (node &amp;&amp; node.left !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = node.left</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node.key</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 查找最小节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.min = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minNode(root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> maxNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前节点不为空并且含有右子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (node &amp;&amp; node.right !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = node.right</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node.key</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//查找最大节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.max = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxNode(root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> searchNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果节点为空则返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key &lt; node.key) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果查找值小于当前节点值则查找左子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> searchNode(node.left, key)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; node.key) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果查找值大于当前节点值则查找右子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> searchNode(node.right, key)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 查找指定节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.search = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> searchNode(root, key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> removeNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key &lt; node.key) &#123;</span><br><span class=\"line\">      node.left = removeNode(node.left, key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; node.key) &#123;</span><br><span class=\"line\">      node.right = removeNode(node.right, key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 需要移除的是一个叶子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span> &amp;&amp; node.right === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//需要移除的节点包含一个叶子节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = node.right</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = node.left</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//需要移除的节点包含两个子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> aux = findMinNode(node.right)</span><br><span class=\"line\">      node.key = aux.key</span><br><span class=\"line\">      node.right = removeNode(node.right, axu.key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> findMinNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (node &amp;&amp; node.left !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = node.left</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//移除节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    removeNode(root, key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nodes = [<span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> _binarSearchTree = <span class=\"keyword\">new</span> BinarSearchTree()</span><br><span class=\"line\">nodes.forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  _binarSearchTree.insert(key)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 打印插入完的二叉树</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(root)</span><br><span class=\"line\"><span class=\"comment\">// 调用中序遍历方法</span></span><br><span class=\"line\">_binarSearchTree.inOrderTraverse()</span><br><span class=\"line\"><span class=\"comment\">// 调用先序遍历方法</span></span><br><span class=\"line\">_binarSearchTree.preOrderTraverse()</span><br><span class=\"line\"><span class=\"comment\">// 调用后序遍历方法</span></span><br><span class=\"line\">_binarSearchTree.postOrderTraverse()</span><br><span class=\"line\"><span class=\"comment\">// 查找最小值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_binarSearchTree.min())</span><br><span class=\"line\"><span class=\"comment\">// 查找最大值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_binarSearchTree.max())</span><br><span class=\"line\"><span class=\"comment\">// 查找特定值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_binarSearchTree.search(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"comment\">// 删除节点</span></span><br><span class=\"line\">_binarSearchTree.remove(<span class=\"number\">8</span>)</span><br><span class=\"line\">_binarSearchTree.inOrderTraverse()</span><br></pre></td></tr></table></figure>\n\n<script>\nexport default {\n  mounted(){\n     // 声明根节点\n    var root = null;\n    // 声明函数\n    function BinarSearchTree() {\n      var Node = function (key) {\n        this.key = key;\n        this.left = null;\n        this.right = null;\n      };\n      // 判断创建根节点还是插入子节点\n      this.insert = function (key) {\n        var newNode = new Node(key)\n        if (root === null) {\n          root = newNode\n        } else {\n          insertNode(root, newNode)\n        }\n      }\n      // 判断插入左节点还是右节点\n      var insertNode = function (node, newNode) {\n        if (newNode.key <= node.key) {\n          if (node.left === null) {\n            node.left = newNode\n          } else {\n            insertNode(node.left, newNode)\n          }\n        } else {\n          if (node.right === null) {\n            node.right = newNode\n          } else {\n            insertNode(node.right, newNode)\n          }\n        }\n\n      }\n\n      var inOrderTraverseNode = function (node) {\n        // 判断当前节点如果不为空则递归查找节点，按照左根右的顺序\n        if (node !== null) {\n          // 先查找左叶子节点，如果左叶子节点有值则递归此节点\n          inOrderTraverseNode(node.left)\n          // 如果没有左叶子节点则打印当前根节点\n          console.log(node.key)\n          // 最后查找右子节点\n          inOrderTraverseNode(node.right)\n        }\n      }\n      //中序遍历\n      this.inOrderTraverse = function () {\n        // 将二叉树根节点传入\n        inOrderTraverseNode(root)\n      }\n\n      var preOrderTraverseNode = function (node) {\n        if (node !== null) {\n          console.log(node.key)\n          preOrderTraverseNode(node.left)\n          preOrderTraverseNode(node.right)\n        }\n      }\n      // 先序遍历\n      this.preOrderTraverse = function () {\n        preOrderTraverseNode(root)\n      }\n\n      var postOrderTraverseNode = function (node) {\n        if (node !== null) {\n          postOrderTraverseNode(node.left)\n          postOrderTraverseNode(node.right)\n          // 如果没有左右子节点最后打印根节点\n          console.log(node.key)\n        }\n      }\n      // 后序遍历\n      this.postOrderTraverse = function () {\n        postOrderTraverseNode(root)\n      }\n\n      var minNode = function (node) {\n        if (node) {\n          // 如果当前节点不为空并且含有左子节点\n          while (node && node.left !== null) {\n            node = node.left\n          }\n          return node.key\n        }\n      }\n      // 查找最小节点\n      this.min = function () {\n        return minNode(root)\n      }\n      var maxNode = function (node) {\n        if (node) {\n          // 如果当前节点不为空并且含有右子节点\n          while (node && node.right !== null) {\n            node = node.right\n          }\n          return node.key\n        }\n      }\n      this.max = function () {\n        return maxNode(root)\n      }\n      var searchNode = function (node, key) {\n        // 如果节点为空则返回\n        if (node === null) {\n          return false\n        }\n\n        if (key < node.key) {\n          // 如果查找值小于当前节点值则查找左子节点\n          return searchNode(node.left, key)\n        } else if (key > node.key) {\n          // 如果查找值大于当前节点值则查找右子节点\n          return searchNode(node.right, key)\n        } else {\n          return true\n        }\n      }\n      // 查找指定节点\n      this.search = function (key) {\n        return searchNode(root, key)\n      }\n      var removeNode = function (node, key) {\n        if (node == null) {\n          return null\n        }\n        if (key < node.key) {\n          node.left = removeNode(node.left, key)\n          return node\n        } else if (key > node.key) {\n          node.right = removeNode(node.right, key)\n          return node\n        } else {\n          // 需要移除的是一个叶子节点\n          if (node.left === null && node.right === null) {\n            node = null\n            return node\n          }\n\n          //需要移除的节点包含一个叶子节点\n\n          if (node.left === null) {\n            node = node.right\n            return node\n          } else if (node.left === null) {\n            node = node.left\n            return node\n          }\n          //需要移除的节点包含两个子节点\n          var aux = findMinNode(node.right)\n          node.key = aux.key\n          node.right = removeNode(node.right, axu.key)\n          return node\n        }\n      }\n      var findMinNode = function (node) {\n        if (node) {\n          while (node && node.left !== null) {\n            node = node.left\n          }\n          return node\n        }\n        return null\n      }\n      //移除节点\n      this.remove = function (key) {\n        removeNode(root, key)\n      }\n    }\n\n    var nodes = [7, 3, 6, 2, 8, 13, 5, 15];\n    var _binarSearchTree = new BinarSearchTree();\n    nodes.forEach(key => {\n      _binarSearchTree.insert(key)\n    })\n    // 打印插入完的二叉树\n    console.log(root)\n    // 调用中序遍历方法\n    _binarSearchTree.inOrderTraverse()\n    // 调用先序遍历方法\n    _binarSearchTree.preOrderTraverse()\n    // 调用后序遍历方法\n    _binarSearchTree.postOrderTraverse()\n    // 查找最小值\n    console.log(_binarSearchTree.min())\n    // 查找最大值\n    console.log(_binarSearchTree.max())\n    // 查找特定值\n    console.log(_binarSearchTree.search(2));\n    // 删除节点\n    _binarSearchTree.remove(8)\n    _binarSearchTree.inOrderTraverse()\n  }\n}\n</script>\n"},{"title":"面试题","date":"2018-01-13T08:07:32.000Z","_content":"\n# 面试题\n\n## HTML\n\n### <img>的 title 和 alt 有什么区别？\n\nalt 主要是无法加载显示图片时，代替文字，搜索引擎时主要是 `alt`，`alt` 只适用于图片 img。 鼠标悬浮文字上显示文字的诗 `title` 属性，`title` 适用于很多标签。\n\n### 什么是 web 语义化？html5 有哪些语义化标签？语义化有什么好处？\n\nW3C 组织意识到了之前 HTML 版本的不足，推出的 HTML5 进一步推进了 Web 语义化发展，采用了诸如 footer、section 等语义化标签，弥补了采用 id=\"footer\"或者 class=\"footer\"形式的不足，以更好的推动 Web 的发展。\n\n```html\n<nav>\n  、\n  <article>\n    、<sections\n      >、\n      <aside>\n        、\n        <footer></footer></aside\n    ></sections>\n  </article>\n</nav>\n```\n\n## CSS\n\n### display: none;与 visibility: hidden;的区别？\n\n是否是继承属性：display 不是继承属性，而 visibility 是继承属性。\n\n### 如何分别水平、垂直居中一个元素？\n\n- 行内水平居中\n\n```css\n#container {\n  text-align: center;\n}\n```\n\n- 块状水平居中\n\n```css\n#center {\n  margin: 0 auto;\n}\n```\n\n- 多个块状元素的水平居中\n\n```css\n#container {\n  text-align: center;\n}\n\n#center {\n  display: inline-block;\n}\n<!-- flex -- > #container {\n  justify-content: center;\n  display: flex;\n}\n```\n\n- 已知高度宽度元素的水平垂直居中\n\n```css\n<!-- 1 -- > #container {\n  position: relative;\n}\n\n#center {\n  width: 100px;\n  height: 100px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin: -50px 0 0 -50px;\n}\n<!-- 2 -- > #container {\n  position: relative;\n}\n\n#center {\n  position: absolute;\n  margin: auto;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n```\n\n- 未知高度和宽度元素的水平垂直居中\n\n```css\n<!-- base -- > #container {\n  display: table-cell;\n  text-align: center;\n  vertical-align: middle;\n}\n\n#center {\n}\n<!-- css3 -- > #container {\n  position: relative;\n}\n\n#center {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n<!-- flex -- > #container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#center {\n}\n```\n\n## JS\n\n### 如何实现一个 JS 对象的深度克隆？\n\n先来说一下什么是深度克隆：深拷贝是指源对象与拷贝对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。 举个例子，一个人名叫张三，后来用他克隆（假设法律允许）了另外一个人，叫李四，不管是张三缺胳膊少腿还是李四缺胳膊少腿都不会影响另外一个人。\n\n在 JavaScript 中，对于 Object 和 Array 这类引用类型值，当从一个变量向另一个变量复制引用类型值时，这个值的副本其实是一个指针，两个变量指向同一个堆对象，改变其中一个变量，另一个也会受到影响。\n\n```javascript\n// 对象\nvar o1 = { a: 1 }\nvar o2 = o1\n\nconsole.log(o1 === o2) // =>true\no2.a = 2\nconsole.log(o1.a) // => 2\n\n// 数组\nvar o1 = [1, 2, 3]\nvar o2 = o1\n\nconsole.log(o1 === o2) // => true\no2.push(4)\nconsole.log(o1) // => [1,2,3,4]\n```\n\n这种拷贝分为两种情况：拷贝引用和拷贝实例，也就是我们说的浅拷贝和深拷贝\n\n浅拷贝（shallow copy）代码实现：\n\n```javascript\nfunction shallowClone(source) {\n  if (!source || typeof source !== 'object') {\n    throw new Error('error arguments')\n  }\n  var targetObj = source.constructor === Array ? [] : {}\n  for (var keys in source) {\n    if (source.hasOwnProperty(keys)) {\n      targetObj[keys] = source[keys]\n    }\n  }\n  return targetObj\n}\n```\n\n深拷贝（deep copy）\n深拷贝也就是拷贝出一个新的实例，新的实例和之前的实例互不影响，深拷贝的实现有几种方法，首先我们可以借助 jQuery，lodash 等第三方库完成一个深拷贝实例。在 jQuery 中可以通过添加一个参数来实现递归 extend，调用\\$.extend(true, {}, ...)就可以实现一个深拷贝。\n\n深拷贝（deep copy）代码实现：\n\n```javascript\n// 递归实现一个深拷贝\nfunction deepClone(source) {\n  //判断传入的参数是否是对象\n  if (!source || typeof source !== 'object') {\n    throw new Error('error arguments', 'shallowClone')\n  }\n  //  判断要深拷贝的是数组还是对象\n  var targetObj = source.constructor === Array ? [] : {}\n  //  遍历复制对象\n  for (var keys in source) {\n    if (source.hasOwnProperty(keys)) {\n      //  判断如果为对象的key还是对象的话就递归调用\n      if (source[keys] && typeof source[keys] === 'object') {\n        targetObj[keys] = source[keys].constructor === Array ? [] : {}\n        targetObj[keys] = deepClone(source[keys])\n      } else {\n        targetObj[keys] = source[keys]\n      }\n    }\n  }\n  //  返回克隆完的对象\n  return targetObj\n}\n// test example\nvar o1 = {\n  arr: [1, 2, 3],\n  obj: {\n    key: 'value'\n  },\n  func: function() {\n    return 1\n  }\n}\nvar o3 = deepClone(o1)\nconsole.log(o3 === o1) // => false\nconsole.log(o3.obj === o1.obj) // => false\nconsole.log(o2.func === o1.func) // => true\n```\n\n> - [参考详情](https://yuchengkai.cn/docs/zh/frontend/#%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D)\n\n### 事件冒泡\n\n#### IE 与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？\n\n1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为\n2. 事件处理机制：IE 是事件冒泡、firefox 同时支持两种事件模型，也就是：捕获型事件和冒泡型事件\n3. ev.stopPropagation();\n\n- 注意旧 ie 的方法：ev.cancelBubble = true;\n\n### 在浏览器地址栏中输入一个 URL 后回车，背后会进行哪些技术步骤？\n\n> - [参考详情](https://www.zhihu.com/question/34873227)\n\n### 编程实现获取 URL 中的参数：\n\n1. 指定参数名称，返回该参数的值或者空字符串;\n\n2. 不指定参数名称，返回全部的参数对象或者{};\n\n3. 如果存在多个同名参数，则返回数组;\n\n```javascript\n/**\n * @param {string} Url\n * @param {string} Key\n * @return {Object}\n */\nfunction getUrlParam(Url, Key) {\n  var param = Url.split('#')[0].split('?')[1]\n  if (Key) {\n    //指定参数名称\n    var strs = param.split('&')\n    var arrs = new Array() //如果存在多个同名参数，则返回数组\n    for (var i = 0, len = strs.length; i < len; i++) {\n      var tmp = strs[i].split('=')\n      if (tmp[0] == Key) {\n        arrs.push(tmp[1])\n      }\n    }\n    if (arrs.length == 1) {\n      //返回该参数的值或者空字符串\n      return arrs[0]\n    } else if (arrs.length == 0) {\n      return ''\n    } else {\n      return arrs\n    }\n  } else {\n    //不指定参数名称，返回全部的参数对象 或者 {}\n    if (param == undefined || param == '') {\n      return {}\n    } else {\n      var strs = param.split('&')\n      var arrObj = new Object()\n      for (var i = 0, len = strs.length; i < len; i++) {\n        var tmp = strs[i].split('=')\n        if (!(tmp[0] in arrObj)) {\n          arrObj[tmp[0]] = []\n        }\n        arrObj[tmp[0]].push(tmp[1])\n      }\n      return arrObj\n    }\n  }\n}\n// testUrl\n//http://www.nowcoder.com?key=1&key=2&key=3&test=4#hehe\n```\n\n### 输入习题\n\n#### 以下程序输出结果是？\n\n```javascript\nfunction fn(a) {\n  console.log(a)\n  var a = 2\n  function a() {}\n  console.log(a)\n}\nfn(1)\n```\n\n#### 以下程序输出结果是？\n\n```javascript\nvar a = 10\na.pro = 10\nconsole.log(a.pro + a)\nvar s = 'hello'\ns.pro = 'world'\nconsole.log(s.pro + s)\n```\n\n#### 写出输出结果\n\n```javascript\nconsole.log(typeof null)\nconsole.log(typeof {})\nconsole.log(typeof [])\nconsole.log(typeof undefined)\n```\n\n#### 写出输出结果？\n\n```javascript\nfunction printing() {\n  console.log(1)\n  setTimeout(function() {\n    console.log(2)\n  }, 1000)\n  setTimeout(function() {\n    console.log(3)\n  }, 0)\n  console.log(4)\n}\nprinting()\n```\n\n### 如何判断一个对象是否为函数？\n\n```javascript\nfunction isFunction(fn) {\n  return Object.prototype.toString.call(fn) === '[object Function]'\n}\n```\n\n### 写出几种 js 跳转的常见方式？\n\n```html\n<!-- 第一种：直接跳转加参数 -->\n<script language=\"javascript\" type=\"text/javascript\">\n        window.location.href=\"login.jsp?backurl=\"+window.location.href;\n</script>\n<!-- 直接跳转无参数： -->\n<script>window.location.href='http://www.baidu.com';</script>\n<!-- 第二种：返回上一次预览界面 -->\n<script language=\"javascript\">\nalert(\"返回\");\nwindow.history.back(-1);\n</script>\n<!-- 标签嵌套： -->\n<a href=\"javascript:history.go(-1)\">返回上一步</a>\n\n<a href=\"<%=Request.ServerVariables(\"HTTP_REFERER\")%>\">返回上一步</a>\n<!-- 第三种：指定跳转页面 对框架无效。。。 -->\n<script language=\"javascript\">\n    window.navigate(\"top.jsp\");\n</script>\n<!-- 第四种：指定自身跳转页面 对框架无效。。 -->\n<script language=\"JavaScript\">\n  self.location='top.htm';\n</script>\n<!-- 第五种：指定自身跳转页面 对框架有效。。 -->\n<script language=\"javascript\">\n      alert(\"非法访问！\");\n      top.location='xx.aspx';\n</script>\n<!-- 第六种：按钮式 在button按钮添加 事件跳转。 -->\n<input name=\"pclog\" type=\"button\" value=\"GO\" onClick=\"location.href='login.aspx'\">\n<!-- 第七种：在新窗口打开： -->\n<a href=\"javascript:\" onClick=\"window.open('login.aspx','','height=500,width=611,scrollbars=yes,status=yes')\">开新窗口</a>\n```\n\n### 写出客户端存储 localStorage 和 sessionStorage 的 set、get 方法，localStorage 和 sessionStorage 有何区别？\n\n> [参考详情](https://blog.csdn.net/xiaoermingn/article/details/53178092)\n\n### 通过 JS 获取页面尺寸、屏幕的方法？\n\n```\n网页可见区域宽：document.body.clientWidth\n网页可见区域高：document.body.clientHeight\n网页可见区域宽：document.body.offsetWidth (包括边线的宽)\n网页可见区域高：document.body.offsetHeight (包括边线的宽)\n网页正文全文宽：document.body.scrollWidth\n网页正文全文高：document.body.scrollHeight\n网页被卷去的高：document.body.scrollTop\n网页被卷去的左：document.body.scrollLeft\n网页正文部分上：window.screenTop\n网页正文部分左：window.screenLeft\n屏幕分辨率的高：window.screen.height\n屏幕分辨率的宽：window.screen.width\n屏幕可用工作区高度：window.screen.availHeight\n屏幕可用工作区宽度：window.screen.availWidth\n```\n\n### 列举 JS 实现跨域的几种方式？\n\n> [参考详情](https://juejin.im/entry/57d21eadbf22ec005f9c7d76)\n\n### 列举几种立即执行函数的实现方式。\n\n> [参考详情](https://blog.csdn.net/wei_smile/article/details/77938180)\n\n### var numberArray = [3, 6, 2, 4, 1, 5];\n\n1.  实现对该数组的倒排，输出[5, 1, 4, 2, 6, 3]\n2.  实现对该数组的的将序排列，输出[6, 5, 4, 3, 2, 1];\n\n### 编写一个方法，去掉一个数组的重复元素\n\n```javascript\nfunction unique(arr) {\n  var newArr = []\n  for (var i = 0, item; (item = arr[i++]); ) {\n    if (newArr.indexOf(item) === -1) {\n      newArr.push(item)\n    }\n  }\n  return newArr\n}\n```\n\n### 写一个简单的 ajax 示例\n\n> [参考详情](http://www.runoob.com/try/try.php?filename=tryajax_first)\n\n### JavaScript 有哪些方法定义对象？\n\n> [参考详情](http://www.runoob.com/js/js-objects.html)\n\n## HTTP\n\n### HTTP request 报文结构是怎样的？\n\n- 请求行: {请求方法} {资源路径} {协议版本}\n\n- 请求头: 紧跟请求行的下一行，所有的请求头，除 Host 外都是可选的。\n\n- 空行: 告诉服务器请求头部到此为止。\n\n- 消息体: 消息的主体部分，消息体的数据格式通过 header 里面的 Content-Type 属性指定。\n\n### 描述常见的 HTTP 状态码和 HTTP 方法\n\n- `200` - 请求成功\n- `301` - 资源（网页等）被永久转移到其它 URL\n- `404` - 请求的资源（网页等）不存在\n- `500` - 内部服务器错误\n\n> - [参考详情](http://www.runoob.com/http/http-status-codes.html)\n\n根据 HTTP 标准，HTTP 请求可以使用多种请求方法。\n\nHTTP1.0 定义了三种请求方法： `GET`, `POST` 和 `HEAD` 方法。\n\nHTTP1.1 新增了五种请求方法：`OPTIONS`, `PUT`, `DELETE`, `TRACE` 和 `CONNECT` 方法。\n\n| 序号 | 方法    | 描述                                                                                                                                     |\n| ---- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| 1    | GET     | 请求指定的页面信息，并返回实体主体。                                                                                                     |\n| 2    | HEAD    | 类似于 get 请求，只不过返回的响应中没有具体的内容，用于获取报头                                                                          |\n| 3    | POST    | 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。 |\n| 4    | PUT     | 从客户端向服务器传送的数据取代指定的文档的内容。                                                                                         |\n| 5    | DELETE  | 请求服务器删除指定的页面。                                                                                                               |\n| 6    | CONNECT | HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。                                                                                |\n| 7    | OPTIONS | 允许客户端查看服务器的性能。                                                                                                             |\n| 8    | TRACE   | 回显服务器收到的请求，主要用于测试或诊断。                                                                                               |\n\n> - [参考详情](http://www.runoob.com/http/http-methods.html)\n\n### HTTP 状态码及其含义？\n\n> [参考链接](https://lwwtotod.github.io/doc/InterView/%E4%B8%80%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98.html#_2-%E6%8F%8F%E8%BF%B0%E5%B8%B8%E8%A7%81%E7%9A%84-http-%E7%8A%B6%E6%80%81%E7%A0%81%E5%92%8C-http-%E6%96%B9%E6%B3%95)\n\n## Vue\n\n### 请简单描述 Vue 双向绑定底层实现原理，常用到的指令及 Vue 实例的生命周期\n\n> - [参考详情](https://juejin.im/post/5abdd6f6f265da23793c4458)\n\n## 算法题\n\n### 给出两个单词 word1 和 word2，找出将 word1 转换成 word2 所使用的最少的步骤数（每个操作记为一步）。\n\n你可以对一个单词进行以下三种操作\n\n1. 插入一个字符;\n2. 删除一个字符;\n3. 替换一个字符;\n\n```javascript\n/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar minDistance = function(word1, word2) {\n  var len1 = word1.length,\n    len2 = word2.length,\n    matrix = [],\n    i,\n    j\n\n  if (len1 === 0 || len2 === 0) {\n    return Math.max(len1, len2)\n  }\n  //initialization\n  for (i = 0; i <= len1; i++) {\n    matrix[i] = []\n    matrix[i][0] = i\n  }\n  for (j = 0; j <= len2; j++) {\n    matrix[0][j] = j\n  }\n\n  for (i = 1; i <= len1; i++) {\n    for (j = 1; j <= len2; j++) {\n      if (word1.charAt(i - 1) === word2.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1]\n      } else {\n        matrix[i][j] =\n          Math.min(matrix[i - 1][j], matrix[i][j - 1], matrix[i - 1][j - 1]) + 1\n      }\n    }\n  }\n  return matrix[len1][len2]\n}\n```\n\n## 性能优化\n\n### 如何进行网站性能优化，请简述。\n\n- 代码层面：避免使用 css 表达式，避免使用高级选择器，通配选择器。\n- 缓存利用：缓存 Ajax，使用 CDN，使用外部 js 和 css 文件以便缓存，添加 Expires 头，服务端配置 Etag，减少 DNS 查找等\n- 请求数量：合并样式和脚本，使用 css 图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载。\n- 请求带宽：压缩文件，开启 GZIP，\n  代码层面的优化\n- 用 hash-table 来优化查找\n- 少用全局变量\n- 用 innerHTML 代替 DOM 操作，减少 DOM 操作次数，优化 javascript 性能\n- 用 setTimeout 来避免页面失去响应\n- 缓存 DOM 节点查找的结果\n- 避免使用 CSS Expression\n- 避免全局查询\n- 避免使用 with(with 会创建自己的作用域，会增加作用域链长度)\n- 多个变量声明合并\n- 避免图片和 iFrame 等的空 Src。空 Src 会重新加载当前页面，影响速度和效率\n- 尽量避免写在 HTML 标签中写 Style 属性\n- 移动端性能优化\n- 尽量使用 css3 动画，开启硬件加速。\n- 适当使用 touch 事件代替 click 事件。\n- 避免使用 css3 渐变阴影效果。\n- 可以用 transform: translateZ(0) 来开启硬件加速。（见下面的详细解释）\n- 不滥用 Float。Float 在渲染时计算量比较大，尽量减少使用\n- 不滥用 Web 字体。Web 字体需要下载，解析，重绘当前页面，尽量减少使用。\n- 合理使用 requestAnimationFrame 动画代替 setTimeout\n- CSS 中的属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）会触发 GPU 渲染，请合理使用。过渡使用会引发手机过耗电增加\n- PC 端的在移动端同样适用\n","source":"_posts/InterView/常见面试题.md","raw":"---\ntitle: 面试题\ndate: 2018-01-13 16:07:32\ntags:\n  - JavaScript\n  - 面试题\ncategory: 前端\n---\n\n# 面试题\n\n## HTML\n\n### <img>的 title 和 alt 有什么区别？\n\nalt 主要是无法加载显示图片时，代替文字，搜索引擎时主要是 `alt`，`alt` 只适用于图片 img。 鼠标悬浮文字上显示文字的诗 `title` 属性，`title` 适用于很多标签。\n\n### 什么是 web 语义化？html5 有哪些语义化标签？语义化有什么好处？\n\nW3C 组织意识到了之前 HTML 版本的不足，推出的 HTML5 进一步推进了 Web 语义化发展，采用了诸如 footer、section 等语义化标签，弥补了采用 id=\"footer\"或者 class=\"footer\"形式的不足，以更好的推动 Web 的发展。\n\n```html\n<nav>\n  、\n  <article>\n    、<sections\n      >、\n      <aside>\n        、\n        <footer></footer></aside\n    ></sections>\n  </article>\n</nav>\n```\n\n## CSS\n\n### display: none;与 visibility: hidden;的区别？\n\n是否是继承属性：display 不是继承属性，而 visibility 是继承属性。\n\n### 如何分别水平、垂直居中一个元素？\n\n- 行内水平居中\n\n```css\n#container {\n  text-align: center;\n}\n```\n\n- 块状水平居中\n\n```css\n#center {\n  margin: 0 auto;\n}\n```\n\n- 多个块状元素的水平居中\n\n```css\n#container {\n  text-align: center;\n}\n\n#center {\n  display: inline-block;\n}\n<!-- flex -- > #container {\n  justify-content: center;\n  display: flex;\n}\n```\n\n- 已知高度宽度元素的水平垂直居中\n\n```css\n<!-- 1 -- > #container {\n  position: relative;\n}\n\n#center {\n  width: 100px;\n  height: 100px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin: -50px 0 0 -50px;\n}\n<!-- 2 -- > #container {\n  position: relative;\n}\n\n#center {\n  position: absolute;\n  margin: auto;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n```\n\n- 未知高度和宽度元素的水平垂直居中\n\n```css\n<!-- base -- > #container {\n  display: table-cell;\n  text-align: center;\n  vertical-align: middle;\n}\n\n#center {\n}\n<!-- css3 -- > #container {\n  position: relative;\n}\n\n#center {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n<!-- flex -- > #container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#center {\n}\n```\n\n## JS\n\n### 如何实现一个 JS 对象的深度克隆？\n\n先来说一下什么是深度克隆：深拷贝是指源对象与拷贝对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。 举个例子，一个人名叫张三，后来用他克隆（假设法律允许）了另外一个人，叫李四，不管是张三缺胳膊少腿还是李四缺胳膊少腿都不会影响另外一个人。\n\n在 JavaScript 中，对于 Object 和 Array 这类引用类型值，当从一个变量向另一个变量复制引用类型值时，这个值的副本其实是一个指针，两个变量指向同一个堆对象，改变其中一个变量，另一个也会受到影响。\n\n```javascript\n// 对象\nvar o1 = { a: 1 }\nvar o2 = o1\n\nconsole.log(o1 === o2) // =>true\no2.a = 2\nconsole.log(o1.a) // => 2\n\n// 数组\nvar o1 = [1, 2, 3]\nvar o2 = o1\n\nconsole.log(o1 === o2) // => true\no2.push(4)\nconsole.log(o1) // => [1,2,3,4]\n```\n\n这种拷贝分为两种情况：拷贝引用和拷贝实例，也就是我们说的浅拷贝和深拷贝\n\n浅拷贝（shallow copy）代码实现：\n\n```javascript\nfunction shallowClone(source) {\n  if (!source || typeof source !== 'object') {\n    throw new Error('error arguments')\n  }\n  var targetObj = source.constructor === Array ? [] : {}\n  for (var keys in source) {\n    if (source.hasOwnProperty(keys)) {\n      targetObj[keys] = source[keys]\n    }\n  }\n  return targetObj\n}\n```\n\n深拷贝（deep copy）\n深拷贝也就是拷贝出一个新的实例，新的实例和之前的实例互不影响，深拷贝的实现有几种方法，首先我们可以借助 jQuery，lodash 等第三方库完成一个深拷贝实例。在 jQuery 中可以通过添加一个参数来实现递归 extend，调用\\$.extend(true, {}, ...)就可以实现一个深拷贝。\n\n深拷贝（deep copy）代码实现：\n\n```javascript\n// 递归实现一个深拷贝\nfunction deepClone(source) {\n  //判断传入的参数是否是对象\n  if (!source || typeof source !== 'object') {\n    throw new Error('error arguments', 'shallowClone')\n  }\n  //  判断要深拷贝的是数组还是对象\n  var targetObj = source.constructor === Array ? [] : {}\n  //  遍历复制对象\n  for (var keys in source) {\n    if (source.hasOwnProperty(keys)) {\n      //  判断如果为对象的key还是对象的话就递归调用\n      if (source[keys] && typeof source[keys] === 'object') {\n        targetObj[keys] = source[keys].constructor === Array ? [] : {}\n        targetObj[keys] = deepClone(source[keys])\n      } else {\n        targetObj[keys] = source[keys]\n      }\n    }\n  }\n  //  返回克隆完的对象\n  return targetObj\n}\n// test example\nvar o1 = {\n  arr: [1, 2, 3],\n  obj: {\n    key: 'value'\n  },\n  func: function() {\n    return 1\n  }\n}\nvar o3 = deepClone(o1)\nconsole.log(o3 === o1) // => false\nconsole.log(o3.obj === o1.obj) // => false\nconsole.log(o2.func === o1.func) // => true\n```\n\n> - [参考详情](https://yuchengkai.cn/docs/zh/frontend/#%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D)\n\n### 事件冒泡\n\n#### IE 与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？\n\n1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为\n2. 事件处理机制：IE 是事件冒泡、firefox 同时支持两种事件模型，也就是：捕获型事件和冒泡型事件\n3. ev.stopPropagation();\n\n- 注意旧 ie 的方法：ev.cancelBubble = true;\n\n### 在浏览器地址栏中输入一个 URL 后回车，背后会进行哪些技术步骤？\n\n> - [参考详情](https://www.zhihu.com/question/34873227)\n\n### 编程实现获取 URL 中的参数：\n\n1. 指定参数名称，返回该参数的值或者空字符串;\n\n2. 不指定参数名称，返回全部的参数对象或者{};\n\n3. 如果存在多个同名参数，则返回数组;\n\n```javascript\n/**\n * @param {string} Url\n * @param {string} Key\n * @return {Object}\n */\nfunction getUrlParam(Url, Key) {\n  var param = Url.split('#')[0].split('?')[1]\n  if (Key) {\n    //指定参数名称\n    var strs = param.split('&')\n    var arrs = new Array() //如果存在多个同名参数，则返回数组\n    for (var i = 0, len = strs.length; i < len; i++) {\n      var tmp = strs[i].split('=')\n      if (tmp[0] == Key) {\n        arrs.push(tmp[1])\n      }\n    }\n    if (arrs.length == 1) {\n      //返回该参数的值或者空字符串\n      return arrs[0]\n    } else if (arrs.length == 0) {\n      return ''\n    } else {\n      return arrs\n    }\n  } else {\n    //不指定参数名称，返回全部的参数对象 或者 {}\n    if (param == undefined || param == '') {\n      return {}\n    } else {\n      var strs = param.split('&')\n      var arrObj = new Object()\n      for (var i = 0, len = strs.length; i < len; i++) {\n        var tmp = strs[i].split('=')\n        if (!(tmp[0] in arrObj)) {\n          arrObj[tmp[0]] = []\n        }\n        arrObj[tmp[0]].push(tmp[1])\n      }\n      return arrObj\n    }\n  }\n}\n// testUrl\n//http://www.nowcoder.com?key=1&key=2&key=3&test=4#hehe\n```\n\n### 输入习题\n\n#### 以下程序输出结果是？\n\n```javascript\nfunction fn(a) {\n  console.log(a)\n  var a = 2\n  function a() {}\n  console.log(a)\n}\nfn(1)\n```\n\n#### 以下程序输出结果是？\n\n```javascript\nvar a = 10\na.pro = 10\nconsole.log(a.pro + a)\nvar s = 'hello'\ns.pro = 'world'\nconsole.log(s.pro + s)\n```\n\n#### 写出输出结果\n\n```javascript\nconsole.log(typeof null)\nconsole.log(typeof {})\nconsole.log(typeof [])\nconsole.log(typeof undefined)\n```\n\n#### 写出输出结果？\n\n```javascript\nfunction printing() {\n  console.log(1)\n  setTimeout(function() {\n    console.log(2)\n  }, 1000)\n  setTimeout(function() {\n    console.log(3)\n  }, 0)\n  console.log(4)\n}\nprinting()\n```\n\n### 如何判断一个对象是否为函数？\n\n```javascript\nfunction isFunction(fn) {\n  return Object.prototype.toString.call(fn) === '[object Function]'\n}\n```\n\n### 写出几种 js 跳转的常见方式？\n\n```html\n<!-- 第一种：直接跳转加参数 -->\n<script language=\"javascript\" type=\"text/javascript\">\n        window.location.href=\"login.jsp?backurl=\"+window.location.href;\n</script>\n<!-- 直接跳转无参数： -->\n<script>window.location.href='http://www.baidu.com';</script>\n<!-- 第二种：返回上一次预览界面 -->\n<script language=\"javascript\">\nalert(\"返回\");\nwindow.history.back(-1);\n</script>\n<!-- 标签嵌套： -->\n<a href=\"javascript:history.go(-1)\">返回上一步</a>\n\n<a href=\"<%=Request.ServerVariables(\"HTTP_REFERER\")%>\">返回上一步</a>\n<!-- 第三种：指定跳转页面 对框架无效。。。 -->\n<script language=\"javascript\">\n    window.navigate(\"top.jsp\");\n</script>\n<!-- 第四种：指定自身跳转页面 对框架无效。。 -->\n<script language=\"JavaScript\">\n  self.location='top.htm';\n</script>\n<!-- 第五种：指定自身跳转页面 对框架有效。。 -->\n<script language=\"javascript\">\n      alert(\"非法访问！\");\n      top.location='xx.aspx';\n</script>\n<!-- 第六种：按钮式 在button按钮添加 事件跳转。 -->\n<input name=\"pclog\" type=\"button\" value=\"GO\" onClick=\"location.href='login.aspx'\">\n<!-- 第七种：在新窗口打开： -->\n<a href=\"javascript:\" onClick=\"window.open('login.aspx','','height=500,width=611,scrollbars=yes,status=yes')\">开新窗口</a>\n```\n\n### 写出客户端存储 localStorage 和 sessionStorage 的 set、get 方法，localStorage 和 sessionStorage 有何区别？\n\n> [参考详情](https://blog.csdn.net/xiaoermingn/article/details/53178092)\n\n### 通过 JS 获取页面尺寸、屏幕的方法？\n\n```\n网页可见区域宽：document.body.clientWidth\n网页可见区域高：document.body.clientHeight\n网页可见区域宽：document.body.offsetWidth (包括边线的宽)\n网页可见区域高：document.body.offsetHeight (包括边线的宽)\n网页正文全文宽：document.body.scrollWidth\n网页正文全文高：document.body.scrollHeight\n网页被卷去的高：document.body.scrollTop\n网页被卷去的左：document.body.scrollLeft\n网页正文部分上：window.screenTop\n网页正文部分左：window.screenLeft\n屏幕分辨率的高：window.screen.height\n屏幕分辨率的宽：window.screen.width\n屏幕可用工作区高度：window.screen.availHeight\n屏幕可用工作区宽度：window.screen.availWidth\n```\n\n### 列举 JS 实现跨域的几种方式？\n\n> [参考详情](https://juejin.im/entry/57d21eadbf22ec005f9c7d76)\n\n### 列举几种立即执行函数的实现方式。\n\n> [参考详情](https://blog.csdn.net/wei_smile/article/details/77938180)\n\n### var numberArray = [3, 6, 2, 4, 1, 5];\n\n1.  实现对该数组的倒排，输出[5, 1, 4, 2, 6, 3]\n2.  实现对该数组的的将序排列，输出[6, 5, 4, 3, 2, 1];\n\n### 编写一个方法，去掉一个数组的重复元素\n\n```javascript\nfunction unique(arr) {\n  var newArr = []\n  for (var i = 0, item; (item = arr[i++]); ) {\n    if (newArr.indexOf(item) === -1) {\n      newArr.push(item)\n    }\n  }\n  return newArr\n}\n```\n\n### 写一个简单的 ajax 示例\n\n> [参考详情](http://www.runoob.com/try/try.php?filename=tryajax_first)\n\n### JavaScript 有哪些方法定义对象？\n\n> [参考详情](http://www.runoob.com/js/js-objects.html)\n\n## HTTP\n\n### HTTP request 报文结构是怎样的？\n\n- 请求行: {请求方法} {资源路径} {协议版本}\n\n- 请求头: 紧跟请求行的下一行，所有的请求头，除 Host 外都是可选的。\n\n- 空行: 告诉服务器请求头部到此为止。\n\n- 消息体: 消息的主体部分，消息体的数据格式通过 header 里面的 Content-Type 属性指定。\n\n### 描述常见的 HTTP 状态码和 HTTP 方法\n\n- `200` - 请求成功\n- `301` - 资源（网页等）被永久转移到其它 URL\n- `404` - 请求的资源（网页等）不存在\n- `500` - 内部服务器错误\n\n> - [参考详情](http://www.runoob.com/http/http-status-codes.html)\n\n根据 HTTP 标准，HTTP 请求可以使用多种请求方法。\n\nHTTP1.0 定义了三种请求方法： `GET`, `POST` 和 `HEAD` 方法。\n\nHTTP1.1 新增了五种请求方法：`OPTIONS`, `PUT`, `DELETE`, `TRACE` 和 `CONNECT` 方法。\n\n| 序号 | 方法    | 描述                                                                                                                                     |\n| ---- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| 1    | GET     | 请求指定的页面信息，并返回实体主体。                                                                                                     |\n| 2    | HEAD    | 类似于 get 请求，只不过返回的响应中没有具体的内容，用于获取报头                                                                          |\n| 3    | POST    | 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。 |\n| 4    | PUT     | 从客户端向服务器传送的数据取代指定的文档的内容。                                                                                         |\n| 5    | DELETE  | 请求服务器删除指定的页面。                                                                                                               |\n| 6    | CONNECT | HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。                                                                                |\n| 7    | OPTIONS | 允许客户端查看服务器的性能。                                                                                                             |\n| 8    | TRACE   | 回显服务器收到的请求，主要用于测试或诊断。                                                                                               |\n\n> - [参考详情](http://www.runoob.com/http/http-methods.html)\n\n### HTTP 状态码及其含义？\n\n> [参考链接](https://lwwtotod.github.io/doc/InterView/%E4%B8%80%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98.html#_2-%E6%8F%8F%E8%BF%B0%E5%B8%B8%E8%A7%81%E7%9A%84-http-%E7%8A%B6%E6%80%81%E7%A0%81%E5%92%8C-http-%E6%96%B9%E6%B3%95)\n\n## Vue\n\n### 请简单描述 Vue 双向绑定底层实现原理，常用到的指令及 Vue 实例的生命周期\n\n> - [参考详情](https://juejin.im/post/5abdd6f6f265da23793c4458)\n\n## 算法题\n\n### 给出两个单词 word1 和 word2，找出将 word1 转换成 word2 所使用的最少的步骤数（每个操作记为一步）。\n\n你可以对一个单词进行以下三种操作\n\n1. 插入一个字符;\n2. 删除一个字符;\n3. 替换一个字符;\n\n```javascript\n/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar minDistance = function(word1, word2) {\n  var len1 = word1.length,\n    len2 = word2.length,\n    matrix = [],\n    i,\n    j\n\n  if (len1 === 0 || len2 === 0) {\n    return Math.max(len1, len2)\n  }\n  //initialization\n  for (i = 0; i <= len1; i++) {\n    matrix[i] = []\n    matrix[i][0] = i\n  }\n  for (j = 0; j <= len2; j++) {\n    matrix[0][j] = j\n  }\n\n  for (i = 1; i <= len1; i++) {\n    for (j = 1; j <= len2; j++) {\n      if (word1.charAt(i - 1) === word2.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1]\n      } else {\n        matrix[i][j] =\n          Math.min(matrix[i - 1][j], matrix[i][j - 1], matrix[i - 1][j - 1]) + 1\n      }\n    }\n  }\n  return matrix[len1][len2]\n}\n```\n\n## 性能优化\n\n### 如何进行网站性能优化，请简述。\n\n- 代码层面：避免使用 css 表达式，避免使用高级选择器，通配选择器。\n- 缓存利用：缓存 Ajax，使用 CDN，使用外部 js 和 css 文件以便缓存，添加 Expires 头，服务端配置 Etag，减少 DNS 查找等\n- 请求数量：合并样式和脚本，使用 css 图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载。\n- 请求带宽：压缩文件，开启 GZIP，\n  代码层面的优化\n- 用 hash-table 来优化查找\n- 少用全局变量\n- 用 innerHTML 代替 DOM 操作，减少 DOM 操作次数，优化 javascript 性能\n- 用 setTimeout 来避免页面失去响应\n- 缓存 DOM 节点查找的结果\n- 避免使用 CSS Expression\n- 避免全局查询\n- 避免使用 with(with 会创建自己的作用域，会增加作用域链长度)\n- 多个变量声明合并\n- 避免图片和 iFrame 等的空 Src。空 Src 会重新加载当前页面，影响速度和效率\n- 尽量避免写在 HTML 标签中写 Style 属性\n- 移动端性能优化\n- 尽量使用 css3 动画，开启硬件加速。\n- 适当使用 touch 事件代替 click 事件。\n- 避免使用 css3 渐变阴影效果。\n- 可以用 transform: translateZ(0) 来开启硬件加速。（见下面的详细解释）\n- 不滥用 Float。Float 在渲染时计算量比较大，尽量减少使用\n- 不滥用 Web 字体。Web 字体需要下载，解析，重绘当前页面，尽量减少使用。\n- 合理使用 requestAnimationFrame 动画代替 setTimeout\n- CSS 中的属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）会触发 GPU 渲染，请合理使用。过渡使用会引发手机过耗电增加\n- PC 端的在移动端同样适用\n","slug":"InterView/常见面试题","published":1,"updated":"2019-04-16T03:35:51.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2q9ctdw003p2e47ypvhjjmr","content":"<h1 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h1><h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"的-title-和-alt-有什么区别？\"><a href=\"#的-title-和-alt-有什么区别？\" class=\"headerlink\" title=\"的 title 和 alt 有什么区别？\"></a><img>的 title 和 alt 有什么区别？</h3><p>alt 主要是无法加载显示图片时，代替文字，搜索引擎时主要是 <code>alt</code>，<code>alt</code> 只适用于图片 img。 鼠标悬浮文字上显示文字的诗 <code>title</code> 属性，<code>title</code> 适用于很多标签。</p>\n<h3 id=\"什么是-web-语义化？html5-有哪些语义化标签？语义化有什么好处？\"><a href=\"#什么是-web-语义化？html5-有哪些语义化标签？语义化有什么好处？\" class=\"headerlink\" title=\"什么是 web 语义化？html5 有哪些语义化标签？语义化有什么好处？\"></a>什么是 web 语义化？html5 有哪些语义化标签？语义化有什么好处？</h3><p>W3C 组织意识到了之前 HTML 版本的不足，推出的 HTML5 进一步推进了 Web 语义化发展，采用了诸如 footer、section 等语义化标签，弥补了采用 id=”footer”或者 class=”footer”形式的不足，以更好的推动 Web 的发展。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  、</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">    、<span class=\"tag\">&lt;<span class=\"name\">sections</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span>、</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">        、</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aside</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sections</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"display-none-与-visibility-hidden-的区别？\"><a href=\"#display-none-与-visibility-hidden-的区别？\" class=\"headerlink\" title=\"display: none;与 visibility: hidden;的区别？\"></a>display: none;与 visibility: hidden;的区别？</h3><p>是否是继承属性：display 不是继承属性，而 visibility 是继承属性。</p>\n<h3 id=\"如何分别水平、垂直居中一个元素？\"><a href=\"#如何分别水平、垂直居中一个元素？\" class=\"headerlink\" title=\"如何分别水平、垂直居中一个元素？\"></a>如何分别水平、垂直居中一个元素？</h3><ul>\n<li>行内水平居中</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>块状水平居中</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>多个块状元素的水平居中</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> <span class=\"selector-tag\">flex</span> <span class=\"selector-tag\">--</span> &gt; <span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>已知高度宽度元素的水平垂直居中</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 1 <span class=\"selector-tag\">--</span> &gt; <span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: -<span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> -<span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 2 <span class=\"selector-tag\">--</span> &gt; <span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>未知高度和宽度元素的水平垂直居中</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> <span class=\"selector-tag\">base</span> <span class=\"selector-tag\">--</span> &gt; <span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#center</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> <span class=\"selector-tag\">css3</span> <span class=\"selector-tag\">--</span> &gt; <span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> <span class=\"selector-tag\">flex</span> <span class=\"selector-tag\">--</span> &gt; <span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#center</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><h3 id=\"如何实现一个-JS-对象的深度克隆？\"><a href=\"#如何实现一个-JS-对象的深度克隆？\" class=\"headerlink\" title=\"如何实现一个 JS 对象的深度克隆？\"></a>如何实现一个 JS 对象的深度克隆？</h3><p>先来说一下什么是深度克隆：深拷贝是指源对象与拷贝对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。 举个例子，一个人名叫张三，后来用他克隆（假设法律允许）了另外一个人，叫李四，不管是张三缺胳膊少腿还是李四缺胳膊少腿都不会影响另外一个人。</p>\n<p>在 JavaScript 中，对于 Object 和 Array 这类引用类型值，当从一个变量向另一个变量复制引用类型值时，这个值的副本其实是一个指针，两个变量指向同一个堆对象，改变其中一个变量，另一个也会受到影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = o1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o1 === o2) <span class=\"comment\">// =&gt;true</span></span><br><span class=\"line\">o2.a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o1.a) <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = o1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o1 === o2) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">o2.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o1) <span class=\"comment\">// =&gt; [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n\n<p>这种拷贝分为两种情况：拷贝引用和拷贝实例，也就是我们说的浅拷贝和深拷贝</p>\n<p>浅拷贝（shallow copy）代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowClone</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!source || <span class=\"keyword\">typeof</span> source !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error arguments'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> targetObj = source.constructor === <span class=\"built_in\">Array</span> ? [] : &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> keys <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (source.hasOwnProperty(keys)) &#123;</span><br><span class=\"line\">      targetObj[keys] = source[keys]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> targetObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>深拷贝（deep copy）<br>深拷贝也就是拷贝出一个新的实例，新的实例和之前的实例互不影响，深拷贝的实现有几种方法，首先我们可以借助 jQuery，lodash 等第三方库完成一个深拷贝实例。在 jQuery 中可以通过添加一个参数来实现递归 extend，调用$.extend(true, {}, …)就可以实现一个深拷贝。</p>\n<p>深拷贝（deep copy）代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归实现一个深拷贝</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//判断传入的参数是否是对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!source || <span class=\"keyword\">typeof</span> source !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error arguments'</span>, <span class=\"string\">'shallowClone'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//  判断要深拷贝的是数组还是对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> targetObj = source.constructor === <span class=\"built_in\">Array</span> ? [] : &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">//  遍历复制对象</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> keys <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (source.hasOwnProperty(keys)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//  判断如果为对象的key还是对象的话就递归调用</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (source[keys] &amp;&amp; <span class=\"keyword\">typeof</span> source[keys] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        targetObj[keys] = source[keys].constructor === <span class=\"built_in\">Array</span> ? [] : &#123;&#125;</span><br><span class=\"line\">        targetObj[keys] = deepClone(source[keys])</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        targetObj[keys] = source[keys]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//  返回克隆完的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> targetObj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// test example</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;</span><br><span class=\"line\">  arr: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">  obj: &#123;</span><br><span class=\"line\">    key: <span class=\"string\">'value'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o3 = deepClone(o1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o3 === o1) <span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o3.obj === o1.obj) <span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o2.func === o1.func) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li><a href=\"https://yuchengkai.cn/docs/zh/frontend/#%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D\" target=\"_blank\" rel=\"noopener\">参考详情</a></li>\n</ul>\n</blockquote>\n<h3 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h3><h4 id=\"IE-与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？\"><a href=\"#IE-与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？\" class=\"headerlink\" title=\"IE 与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？\"></a>IE 与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？</h4><ol>\n<li>我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为</li>\n<li>事件处理机制：IE 是事件冒泡、firefox 同时支持两种事件模型，也就是：捕获型事件和冒泡型事件</li>\n<li>ev.stopPropagation();</li>\n</ol>\n<ul>\n<li>注意旧 ie 的方法：ev.cancelBubble = true;</li>\n</ul>\n<h3 id=\"在浏览器地址栏中输入一个-URL-后回车，背后会进行哪些技术步骤？\"><a href=\"#在浏览器地址栏中输入一个-URL-后回车，背后会进行哪些技术步骤？\" class=\"headerlink\" title=\"在浏览器地址栏中输入一个 URL 后回车，背后会进行哪些技术步骤？\"></a>在浏览器地址栏中输入一个 URL 后回车，背后会进行哪些技术步骤？</h3><blockquote>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/34873227\" target=\"_blank\" rel=\"noopener\">参考详情</a></li>\n</ul>\n</blockquote>\n<h3 id=\"编程实现获取-URL-中的参数：\"><a href=\"#编程实现获取-URL-中的参数：\" class=\"headerlink\" title=\"编程实现获取 URL 中的参数：\"></a>编程实现获取 URL 中的参数：</h3><ol>\n<li><p>指定参数名称，返回该参数的值或者空字符串;</p>\n</li>\n<li><p>不指定参数名称，返回全部的参数对象或者{};</p>\n</li>\n<li><p>如果存在多个同名参数，则返回数组;</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; Url</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; Key</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Object&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlParam</span>(<span class=\"params\">Url, Key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> param = Url.split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>].split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Key) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//指定参数名称</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> strs = param.split(<span class=\"string\">'&amp;'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arrs = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>() <span class=\"comment\">//如果存在多个同名参数，则返回数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = strs.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> tmp = strs[i].split(<span class=\"string\">'='</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (tmp[<span class=\"number\">0</span>] == Key) &#123;</span><br><span class=\"line\">        arrs.push(tmp[<span class=\"number\">1</span>])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arrs.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//返回该参数的值或者空字符串</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> arrs[<span class=\"number\">0</span>]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arrs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arrs</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//不指定参数名称，返回全部的参数对象 或者 &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (param == <span class=\"literal\">undefined</span> || param == <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> strs = param.split(<span class=\"string\">'&amp;'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> arrObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = strs.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tmp = strs[i].split(<span class=\"string\">'='</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(tmp[<span class=\"number\">0</span>] <span class=\"keyword\">in</span> arrObj)) &#123;</span><br><span class=\"line\">          arrObj[tmp[<span class=\"number\">0</span>]] = []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arrObj[tmp[<span class=\"number\">0</span>]].push(tmp[<span class=\"number\">1</span>])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arrObj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// testUrl</span></span><br><span class=\"line\"><span class=\"comment\">//http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;test=4#hehe</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输入习题\"><a href=\"#输入习题\" class=\"headerlink\" title=\"输入习题\"></a>输入习题</h3><h4 id=\"以下程序输出结果是？\"><a href=\"#以下程序输出结果是？\" class=\"headerlink\" title=\"以下程序输出结果是？\"></a>以下程序输出结果是？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"以下程序输出结果是？-1\"><a href=\"#以下程序输出结果是？-1\" class=\"headerlink\" title=\"以下程序输出结果是？\"></a>以下程序输出结果是？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\">a.pro = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.pro + a)</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello'</span></span><br><span class=\"line\">s.pro = <span class=\"string\">'world'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.pro + s)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写出输出结果\"><a href=\"#写出输出结果\" class=\"headerlink\" title=\"写出输出结果\"></a>写出输出结果</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> &#123;&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> [])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写出输出结果？\"><a href=\"#写出输出结果？\" class=\"headerlink\" title=\"写出输出结果？\"></a>写出输出结果？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printing</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printing()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何判断一个对象是否为函数？\"><a href=\"#如何判断一个对象是否为函数？\" class=\"headerlink\" title=\"如何判断一个对象是否为函数？\"></a>如何判断一个对象是否为函数？</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(fn) === <span class=\"string\">'[object Function]'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写出几种-js-跳转的常见方式？\"><a href=\"#写出几种-js-跳转的常见方式？\" class=\"headerlink\" title=\"写出几种 js 跳转的常见方式？\"></a>写出几种 js 跳转的常见方式？</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第一种：直接跳转加参数 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"javascript\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"login.jsp?backurl=\"</span>+<span class=\"built_in\">window</span>.location.href;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 直接跳转无参数： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"built_in\">window</span>.location.href=<span class=\"string\">'http://www.baidu.com'</span>;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第二种：返回上一次预览界面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">alert(<span class=\"string\">\"返回\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">window</span>.history.back(<span class=\"number\">-1</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 标签嵌套： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:history.go(-1)\"</span>&gt;</span>返回上一步<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%=Request.ServerVariables(\"</span><span class=\"attr\">HTTP_REFERER</span>\")%&gt;</span>\"&gt;返回上一步<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第三种：指定跳转页面 对框架无效。。。 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.navigate(<span class=\"string\">\"top.jsp\"</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第四种：指定自身跳转页面 对框架无效。。 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"JavaScript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">  self.location=<span class=\"string\">'top.htm'</span>;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第五种：指定自身跳转页面 对框架有效。。 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">      alert(<span class=\"string\">\"非法访问！\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">      top.location=<span class=\"string\">'xx.aspx'</span>;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第六种：按钮式 在button按钮添加 事件跳转。 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pclog\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"GO\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">\"location.href='login.aspx'\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第七种：在新窗口打开： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">\"window.open('login.aspx','','height=500,width=611,scrollbars=yes,status=yes')\"</span>&gt;</span>开新窗口<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写出客户端存储-localStorage-和-sessionStorage-的-set、get-方法，localStorage-和-sessionStorage-有何区别？\"><a href=\"#写出客户端存储-localStorage-和-sessionStorage-的-set、get-方法，localStorage-和-sessionStorage-有何区别？\" class=\"headerlink\" title=\"写出客户端存储 localStorage 和 sessionStorage 的 set、get 方法，localStorage 和 sessionStorage 有何区别？\"></a>写出客户端存储 localStorage 和 sessionStorage 的 set、get 方法，localStorage 和 sessionStorage 有何区别？</h3><blockquote>\n<p><a href=\"https://blog.csdn.net/xiaoermingn/article/details/53178092\" target=\"_blank\" rel=\"noopener\">参考详情</a></p>\n</blockquote>\n<h3 id=\"通过-JS-获取页面尺寸、屏幕的方法？\"><a href=\"#通过-JS-获取页面尺寸、屏幕的方法？\" class=\"headerlink\" title=\"通过 JS 获取页面尺寸、屏幕的方法？\"></a>通过 JS 获取页面尺寸、屏幕的方法？</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">网页可见区域宽：document.body.clientWidth</span><br><span class=\"line\">网页可见区域高：document.body.clientHeight</span><br><span class=\"line\">网页可见区域宽：document.body.offsetWidth (包括边线的宽)</span><br><span class=\"line\">网页可见区域高：document.body.offsetHeight (包括边线的宽)</span><br><span class=\"line\">网页正文全文宽：document.body.scrollWidth</span><br><span class=\"line\">网页正文全文高：document.body.scrollHeight</span><br><span class=\"line\">网页被卷去的高：document.body.scrollTop</span><br><span class=\"line\">网页被卷去的左：document.body.scrollLeft</span><br><span class=\"line\">网页正文部分上：window.screenTop</span><br><span class=\"line\">网页正文部分左：window.screenLeft</span><br><span class=\"line\">屏幕分辨率的高：window.screen.height</span><br><span class=\"line\">屏幕分辨率的宽：window.screen.width</span><br><span class=\"line\">屏幕可用工作区高度：window.screen.availHeight</span><br><span class=\"line\">屏幕可用工作区宽度：window.screen.availWidth</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"列举-JS-实现跨域的几种方式？\"><a href=\"#列举-JS-实现跨域的几种方式？\" class=\"headerlink\" title=\"列举 JS 实现跨域的几种方式？\"></a>列举 JS 实现跨域的几种方式？</h3><blockquote>\n<p><a href=\"https://juejin.im/entry/57d21eadbf22ec005f9c7d76\" target=\"_blank\" rel=\"noopener\">参考详情</a></p>\n</blockquote>\n<h3 id=\"列举几种立即执行函数的实现方式。\"><a href=\"#列举几种立即执行函数的实现方式。\" class=\"headerlink\" title=\"列举几种立即执行函数的实现方式。\"></a>列举几种立即执行函数的实现方式。</h3><blockquote>\n<p><a href=\"https://blog.csdn.net/wei_smile/article/details/77938180\" target=\"_blank\" rel=\"noopener\">参考详情</a></p>\n</blockquote>\n<h3 id=\"var-numberArray-3-6-2-4-1-5\"><a href=\"#var-numberArray-3-6-2-4-1-5\" class=\"headerlink\" title=\"var numberArray = [3, 6, 2, 4, 1, 5];\"></a>var numberArray = [3, 6, 2, 4, 1, 5];</h3><ol>\n<li>实现对该数组的倒排，输出[5, 1, 4, 2, 6, 3]</li>\n<li>实现对该数组的的将序排列，输出[6, 5, 4, 3, 2, 1];</li>\n</ol>\n<h3 id=\"编写一个方法，去掉一个数组的重复元素\"><a href=\"#编写一个方法，去掉一个数组的重复元素\" class=\"headerlink\" title=\"编写一个方法，去掉一个数组的重复元素\"></a>编写一个方法，去掉一个数组的重复元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newArr = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, item; (item = arr[i++]); ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newArr.indexOf(item) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      newArr.push(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写一个简单的-ajax-示例\"><a href=\"#写一个简单的-ajax-示例\" class=\"headerlink\" title=\"写一个简单的 ajax 示例\"></a>写一个简单的 ajax 示例</h3><blockquote>\n<p><a href=\"http://www.runoob.com/try/try.php?filename=tryajax_first\" target=\"_blank\" rel=\"noopener\">参考详情</a></p>\n</blockquote>\n<h3 id=\"JavaScript-有哪些方法定义对象？\"><a href=\"#JavaScript-有哪些方法定义对象？\" class=\"headerlink\" title=\"JavaScript 有哪些方法定义对象？\"></a>JavaScript 有哪些方法定义对象？</h3><blockquote>\n<p><a href=\"http://www.runoob.com/js/js-objects.html\" target=\"_blank\" rel=\"noopener\">参考详情</a></p>\n</blockquote>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><h3 id=\"HTTP-request-报文结构是怎样的？\"><a href=\"#HTTP-request-报文结构是怎样的？\" class=\"headerlink\" title=\"HTTP request 报文结构是怎样的？\"></a>HTTP request 报文结构是怎样的？</h3><ul>\n<li><p>请求行: {请求方法} {资源路径} {协议版本}</p>\n</li>\n<li><p>请求头: 紧跟请求行的下一行，所有的请求头，除 Host 外都是可选的。</p>\n</li>\n<li><p>空行: 告诉服务器请求头部到此为止。</p>\n</li>\n<li><p>消息体: 消息的主体部分，消息体的数据格式通过 header 里面的 Content-Type 属性指定。</p>\n</li>\n</ul>\n<h3 id=\"描述常见的-HTTP-状态码和-HTTP-方法\"><a href=\"#描述常见的-HTTP-状态码和-HTTP-方法\" class=\"headerlink\" title=\"描述常见的 HTTP 状态码和 HTTP 方法\"></a>描述常见的 HTTP 状态码和 HTTP 方法</h3><ul>\n<li><code>200</code> - 请求成功</li>\n<li><code>301</code> - 资源（网页等）被永久转移到其它 URL</li>\n<li><code>404</code> - 请求的资源（网页等）不存在</li>\n<li><code>500</code> - 内部服务器错误</li>\n</ul>\n<blockquote>\n<ul>\n<li><a href=\"http://www.runoob.com/http/http-status-codes.html\" target=\"_blank\" rel=\"noopener\">参考详情</a></li>\n</ul>\n</blockquote>\n<p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。</p>\n<p>HTTP1.0 定义了三种请求方法： <code>GET</code>, <code>POST</code> 和 <code>HEAD</code> 方法。</p>\n<p>HTTP1.1 新增了五种请求方法：<code>OPTIONS</code>, <code>PUT</code>, <code>DELETE</code>, <code>TRACE</code> 和 <code>CONNECT</code> 方法。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>GET</td>\n<td>请求指定的页面信息，并返回实体主体。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>HEAD</td>\n<td>类似于 get 请求，只不过返回的响应中没有具体的内容，用于获取报头</td>\n</tr>\n<tr>\n<td>3</td>\n<td>POST</td>\n<td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>PUT</td>\n<td>从客户端向服务器传送的数据取代指定的文档的内容。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>DELETE</td>\n<td>请求服务器删除指定的页面。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>CONNECT</td>\n<td>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td>\n</tr>\n<tr>\n<td>7</td>\n<td>OPTIONS</td>\n<td>允许客户端查看服务器的性能。</td>\n</tr>\n<tr>\n<td>8</td>\n<td>TRACE</td>\n<td>回显服务器收到的请求，主要用于测试或诊断。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<ul>\n<li><a href=\"http://www.runoob.com/http/http-methods.html\" target=\"_blank\" rel=\"noopener\">参考详情</a></li>\n</ul>\n</blockquote>\n<h3 id=\"HTTP-状态码及其含义？\"><a href=\"#HTTP-状态码及其含义？\" class=\"headerlink\" title=\"HTTP 状态码及其含义？\"></a>HTTP 状态码及其含义？</h3><blockquote>\n<p><a href=\"https://lwwtotod.github.io/doc/InterView/%E4%B8%80%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98.html#_2-%E6%8F%8F%E8%BF%B0%E5%B8%B8%E8%A7%81%E7%9A%84-http-%E7%8A%B6%E6%80%81%E7%A0%81%E5%92%8C-http-%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n</blockquote>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><h3 id=\"请简单描述-Vue-双向绑定底层实现原理，常用到的指令及-Vue-实例的生命周期\"><a href=\"#请简单描述-Vue-双向绑定底层实现原理，常用到的指令及-Vue-实例的生命周期\" class=\"headerlink\" title=\"请简单描述 Vue 双向绑定底层实现原理，常用到的指令及 Vue 实例的生命周期\"></a>请简单描述 Vue 双向绑定底层实现原理，常用到的指令及 Vue 实例的生命周期</h3><blockquote>\n<ul>\n<li><a href=\"https://juejin.im/post/5abdd6f6f265da23793c4458\" target=\"_blank\" rel=\"noopener\">参考详情</a></li>\n</ul>\n</blockquote>\n<h2 id=\"算法题\"><a href=\"#算法题\" class=\"headerlink\" title=\"算法题\"></a>算法题</h2><h3 id=\"给出两个单词-word1-和-word2，找出将-word1-转换成-word2-所使用的最少的步骤数（每个操作记为一步）。\"><a href=\"#给出两个单词-word1-和-word2，找出将-word1-转换成-word2-所使用的最少的步骤数（每个操作记为一步）。\" class=\"headerlink\" title=\"给出两个单词 word1 和 word2，找出将 word1 转换成 word2 所使用的最少的步骤数（每个操作记为一步）。\"></a>给出两个单词 word1 和 word2，找出将 word1 转换成 word2 所使用的最少的步骤数（每个操作记为一步）。</h3><p>你可以对一个单词进行以下三种操作</p>\n<ol>\n<li>插入一个字符;</li>\n<li>删除一个字符;</li>\n<li>替换一个字符;</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; word1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; word2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minDistance = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word1, word2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len1 = word1.length,</span><br><span class=\"line\">    len2 = word2.length,</span><br><span class=\"line\">    matrix = [],</span><br><span class=\"line\">    i,</span><br><span class=\"line\">    j</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len1 === <span class=\"number\">0</span> || len2 === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(len1, len2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//initialization</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= len1; i++) &#123;</span><br><span class=\"line\">    matrix[i] = []</span><br><span class=\"line\">    matrix[i][<span class=\"number\">0</span>] = i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt;= len2; j++) &#123;</span><br><span class=\"line\">    matrix[<span class=\"number\">0</span>][j] = j</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= len1; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt;= len2; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (word1.charAt(i - <span class=\"number\">1</span>) === word2.charAt(j - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        matrix[i][j] = matrix[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        matrix[i][j] =</span><br><span class=\"line\">          <span class=\"built_in\">Math</span>.min(matrix[i - <span class=\"number\">1</span>][j], matrix[i][j - <span class=\"number\">1</span>], matrix[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]) + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> matrix[len1][len2]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><h3 id=\"如何进行网站性能优化，请简述。\"><a href=\"#如何进行网站性能优化，请简述。\" class=\"headerlink\" title=\"如何进行网站性能优化，请简述。\"></a>如何进行网站性能优化，请简述。</h3><ul>\n<li>代码层面：避免使用 css 表达式，避免使用高级选择器，通配选择器。</li>\n<li>缓存利用：缓存 Ajax，使用 CDN，使用外部 js 和 css 文件以便缓存，添加 Expires 头，服务端配置 Etag，减少 DNS 查找等</li>\n<li>请求数量：合并样式和脚本，使用 css 图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载。</li>\n<li>请求带宽：压缩文件，开启 GZIP，<br>代码层面的优化</li>\n<li>用 hash-table 来优化查找</li>\n<li>少用全局变量</li>\n<li>用 innerHTML 代替 DOM 操作，减少 DOM 操作次数，优化 javascript 性能</li>\n<li>用 setTimeout 来避免页面失去响应</li>\n<li>缓存 DOM 节点查找的结果</li>\n<li>避免使用 CSS Expression</li>\n<li>避免全局查询</li>\n<li>避免使用 with(with 会创建自己的作用域，会增加作用域链长度)</li>\n<li>多个变量声明合并</li>\n<li>避免图片和 iFrame 等的空 Src。空 Src 会重新加载当前页面，影响速度和效率</li>\n<li>尽量避免写在 HTML 标签中写 Style 属性</li>\n<li>移动端性能优化</li>\n<li>尽量使用 css3 动画，开启硬件加速。</li>\n<li>适当使用 touch 事件代替 click 事件。</li>\n<li>避免使用 css3 渐变阴影效果。</li>\n<li>可以用 transform: translateZ(0) 来开启硬件加速。（见下面的详细解释）</li>\n<li>不滥用 Float。Float 在渲染时计算量比较大，尽量减少使用</li>\n<li>不滥用 Web 字体。Web 字体需要下载，解析，重绘当前页面，尽量减少使用。</li>\n<li>合理使用 requestAnimationFrame 动画代替 setTimeout</li>\n<li>CSS 中的属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）会触发 GPU 渲染，请合理使用。过渡使用会引发手机过耗电增加</li>\n<li>PC 端的在移动端同样适用</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h1><h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"的-title-和-alt-有什么区别？\"><a href=\"#的-title-和-alt-有什么区别？\" class=\"headerlink\" title=\"的 title 和 alt 有什么区别？\"></a><img>的 title 和 alt 有什么区别？</h3><p>alt 主要是无法加载显示图片时，代替文字，搜索引擎时主要是 <code>alt</code>，<code>alt</code> 只适用于图片 img。 鼠标悬浮文字上显示文字的诗 <code>title</code> 属性，<code>title</code> 适用于很多标签。</p>\n<h3 id=\"什么是-web-语义化？html5-有哪些语义化标签？语义化有什么好处？\"><a href=\"#什么是-web-语义化？html5-有哪些语义化标签？语义化有什么好处？\" class=\"headerlink\" title=\"什么是 web 语义化？html5 有哪些语义化标签？语义化有什么好处？\"></a>什么是 web 语义化？html5 有哪些语义化标签？语义化有什么好处？</h3><p>W3C 组织意识到了之前 HTML 版本的不足，推出的 HTML5 进一步推进了 Web 语义化发展，采用了诸如 footer、section 等语义化标签，弥补了采用 id=”footer”或者 class=”footer”形式的不足，以更好的推动 Web 的发展。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  、</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">    、<span class=\"tag\">&lt;<span class=\"name\">sections</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span>、</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">        、</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aside</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sections</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"display-none-与-visibility-hidden-的区别？\"><a href=\"#display-none-与-visibility-hidden-的区别？\" class=\"headerlink\" title=\"display: none;与 visibility: hidden;的区别？\"></a>display: none;与 visibility: hidden;的区别？</h3><p>是否是继承属性：display 不是继承属性，而 visibility 是继承属性。</p>\n<h3 id=\"如何分别水平、垂直居中一个元素？\"><a href=\"#如何分别水平、垂直居中一个元素？\" class=\"headerlink\" title=\"如何分别水平、垂直居中一个元素？\"></a>如何分别水平、垂直居中一个元素？</h3><ul>\n<li>行内水平居中</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>块状水平居中</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>多个块状元素的水平居中</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> <span class=\"selector-tag\">flex</span> <span class=\"selector-tag\">--</span> &gt; <span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>已知高度宽度元素的水平垂直居中</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 1 <span class=\"selector-tag\">--</span> &gt; <span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: -<span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> -<span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 2 <span class=\"selector-tag\">--</span> &gt; <span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>未知高度和宽度元素的水平垂直居中</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> <span class=\"selector-tag\">base</span> <span class=\"selector-tag\">--</span> &gt; <span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#center</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> <span class=\"selector-tag\">css3</span> <span class=\"selector-tag\">--</span> &gt; <span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> <span class=\"selector-tag\">flex</span> <span class=\"selector-tag\">--</span> &gt; <span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#center</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><h3 id=\"如何实现一个-JS-对象的深度克隆？\"><a href=\"#如何实现一个-JS-对象的深度克隆？\" class=\"headerlink\" title=\"如何实现一个 JS 对象的深度克隆？\"></a>如何实现一个 JS 对象的深度克隆？</h3><p>先来说一下什么是深度克隆：深拷贝是指源对象与拷贝对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。 举个例子，一个人名叫张三，后来用他克隆（假设法律允许）了另外一个人，叫李四，不管是张三缺胳膊少腿还是李四缺胳膊少腿都不会影响另外一个人。</p>\n<p>在 JavaScript 中，对于 Object 和 Array 这类引用类型值，当从一个变量向另一个变量复制引用类型值时，这个值的副本其实是一个指针，两个变量指向同一个堆对象，改变其中一个变量，另一个也会受到影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = o1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o1 === o2) <span class=\"comment\">// =&gt;true</span></span><br><span class=\"line\">o2.a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o1.a) <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = o1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o1 === o2) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">o2.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o1) <span class=\"comment\">// =&gt; [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n\n<p>这种拷贝分为两种情况：拷贝引用和拷贝实例，也就是我们说的浅拷贝和深拷贝</p>\n<p>浅拷贝（shallow copy）代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowClone</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!source || <span class=\"keyword\">typeof</span> source !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error arguments'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> targetObj = source.constructor === <span class=\"built_in\">Array</span> ? [] : &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> keys <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (source.hasOwnProperty(keys)) &#123;</span><br><span class=\"line\">      targetObj[keys] = source[keys]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> targetObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>深拷贝（deep copy）<br>深拷贝也就是拷贝出一个新的实例，新的实例和之前的实例互不影响，深拷贝的实现有几种方法，首先我们可以借助 jQuery，lodash 等第三方库完成一个深拷贝实例。在 jQuery 中可以通过添加一个参数来实现递归 extend，调用$.extend(true, {}, …)就可以实现一个深拷贝。</p>\n<p>深拷贝（deep copy）代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归实现一个深拷贝</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//判断传入的参数是否是对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!source || <span class=\"keyword\">typeof</span> source !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error arguments'</span>, <span class=\"string\">'shallowClone'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//  判断要深拷贝的是数组还是对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> targetObj = source.constructor === <span class=\"built_in\">Array</span> ? [] : &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">//  遍历复制对象</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> keys <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (source.hasOwnProperty(keys)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//  判断如果为对象的key还是对象的话就递归调用</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (source[keys] &amp;&amp; <span class=\"keyword\">typeof</span> source[keys] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        targetObj[keys] = source[keys].constructor === <span class=\"built_in\">Array</span> ? [] : &#123;&#125;</span><br><span class=\"line\">        targetObj[keys] = deepClone(source[keys])</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        targetObj[keys] = source[keys]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//  返回克隆完的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> targetObj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// test example</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;</span><br><span class=\"line\">  arr: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">  obj: &#123;</span><br><span class=\"line\">    key: <span class=\"string\">'value'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o3 = deepClone(o1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o3 === o1) <span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o3.obj === o1.obj) <span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o2.func === o1.func) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li><a href=\"https://yuchengkai.cn/docs/zh/frontend/#%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D\" target=\"_blank\" rel=\"noopener\">参考详情</a></li>\n</ul>\n</blockquote>\n<h3 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h3><h4 id=\"IE-与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？\"><a href=\"#IE-与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？\" class=\"headerlink\" title=\"IE 与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？\"></a>IE 与火狐的事件机制有什么区别？什么是事件冒泡？如何阻止冒泡？</h4><ol>\n<li>我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为</li>\n<li>事件处理机制：IE 是事件冒泡、firefox 同时支持两种事件模型，也就是：捕获型事件和冒泡型事件</li>\n<li>ev.stopPropagation();</li>\n</ol>\n<ul>\n<li>注意旧 ie 的方法：ev.cancelBubble = true;</li>\n</ul>\n<h3 id=\"在浏览器地址栏中输入一个-URL-后回车，背后会进行哪些技术步骤？\"><a href=\"#在浏览器地址栏中输入一个-URL-后回车，背后会进行哪些技术步骤？\" class=\"headerlink\" title=\"在浏览器地址栏中输入一个 URL 后回车，背后会进行哪些技术步骤？\"></a>在浏览器地址栏中输入一个 URL 后回车，背后会进行哪些技术步骤？</h3><blockquote>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/34873227\" target=\"_blank\" rel=\"noopener\">参考详情</a></li>\n</ul>\n</blockquote>\n<h3 id=\"编程实现获取-URL-中的参数：\"><a href=\"#编程实现获取-URL-中的参数：\" class=\"headerlink\" title=\"编程实现获取 URL 中的参数：\"></a>编程实现获取 URL 中的参数：</h3><ol>\n<li><p>指定参数名称，返回该参数的值或者空字符串;</p>\n</li>\n<li><p>不指定参数名称，返回全部的参数对象或者{};</p>\n</li>\n<li><p>如果存在多个同名参数，则返回数组;</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; Url</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; Key</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Object&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlParam</span>(<span class=\"params\">Url, Key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> param = Url.split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>].split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Key) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//指定参数名称</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> strs = param.split(<span class=\"string\">'&amp;'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arrs = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>() <span class=\"comment\">//如果存在多个同名参数，则返回数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = strs.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> tmp = strs[i].split(<span class=\"string\">'='</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (tmp[<span class=\"number\">0</span>] == Key) &#123;</span><br><span class=\"line\">        arrs.push(tmp[<span class=\"number\">1</span>])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arrs.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//返回该参数的值或者空字符串</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> arrs[<span class=\"number\">0</span>]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arrs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arrs</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//不指定参数名称，返回全部的参数对象 或者 &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (param == <span class=\"literal\">undefined</span> || param == <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> strs = param.split(<span class=\"string\">'&amp;'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> arrObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = strs.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tmp = strs[i].split(<span class=\"string\">'='</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(tmp[<span class=\"number\">0</span>] <span class=\"keyword\">in</span> arrObj)) &#123;</span><br><span class=\"line\">          arrObj[tmp[<span class=\"number\">0</span>]] = []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arrObj[tmp[<span class=\"number\">0</span>]].push(tmp[<span class=\"number\">1</span>])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arrObj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// testUrl</span></span><br><span class=\"line\"><span class=\"comment\">//http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;test=4#hehe</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输入习题\"><a href=\"#输入习题\" class=\"headerlink\" title=\"输入习题\"></a>输入习题</h3><h4 id=\"以下程序输出结果是？\"><a href=\"#以下程序输出结果是？\" class=\"headerlink\" title=\"以下程序输出结果是？\"></a>以下程序输出结果是？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"以下程序输出结果是？-1\"><a href=\"#以下程序输出结果是？-1\" class=\"headerlink\" title=\"以下程序输出结果是？\"></a>以下程序输出结果是？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\">a.pro = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.pro + a)</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello'</span></span><br><span class=\"line\">s.pro = <span class=\"string\">'world'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.pro + s)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写出输出结果\"><a href=\"#写出输出结果\" class=\"headerlink\" title=\"写出输出结果\"></a>写出输出结果</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> &#123;&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> [])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写出输出结果？\"><a href=\"#写出输出结果？\" class=\"headerlink\" title=\"写出输出结果？\"></a>写出输出结果？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printing</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printing()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何判断一个对象是否为函数？\"><a href=\"#如何判断一个对象是否为函数？\" class=\"headerlink\" title=\"如何判断一个对象是否为函数？\"></a>如何判断一个对象是否为函数？</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(fn) === <span class=\"string\">'[object Function]'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写出几种-js-跳转的常见方式？\"><a href=\"#写出几种-js-跳转的常见方式？\" class=\"headerlink\" title=\"写出几种 js 跳转的常见方式？\"></a>写出几种 js 跳转的常见方式？</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第一种：直接跳转加参数 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"javascript\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"login.jsp?backurl=\"</span>+<span class=\"built_in\">window</span>.location.href;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 直接跳转无参数： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"built_in\">window</span>.location.href=<span class=\"string\">'http://www.baidu.com'</span>;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第二种：返回上一次预览界面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">alert(<span class=\"string\">\"返回\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">window</span>.history.back(<span class=\"number\">-1</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 标签嵌套： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:history.go(-1)\"</span>&gt;</span>返回上一步<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%=Request.ServerVariables(\"</span><span class=\"attr\">HTTP_REFERER</span>\")%&gt;</span>\"&gt;返回上一步<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第三种：指定跳转页面 对框架无效。。。 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.navigate(<span class=\"string\">\"top.jsp\"</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第四种：指定自身跳转页面 对框架无效。。 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"JavaScript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">  self.location=<span class=\"string\">'top.htm'</span>;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第五种：指定自身跳转页面 对框架有效。。 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">      alert(<span class=\"string\">\"非法访问！\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">      top.location=<span class=\"string\">'xx.aspx'</span>;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第六种：按钮式 在button按钮添加 事件跳转。 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pclog\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"GO\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">\"location.href='login.aspx'\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第七种：在新窗口打开： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">\"window.open('login.aspx','','height=500,width=611,scrollbars=yes,status=yes')\"</span>&gt;</span>开新窗口<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写出客户端存储-localStorage-和-sessionStorage-的-set、get-方法，localStorage-和-sessionStorage-有何区别？\"><a href=\"#写出客户端存储-localStorage-和-sessionStorage-的-set、get-方法，localStorage-和-sessionStorage-有何区别？\" class=\"headerlink\" title=\"写出客户端存储 localStorage 和 sessionStorage 的 set、get 方法，localStorage 和 sessionStorage 有何区别？\"></a>写出客户端存储 localStorage 和 sessionStorage 的 set、get 方法，localStorage 和 sessionStorage 有何区别？</h3><blockquote>\n<p><a href=\"https://blog.csdn.net/xiaoermingn/article/details/53178092\" target=\"_blank\" rel=\"noopener\">参考详情</a></p>\n</blockquote>\n<h3 id=\"通过-JS-获取页面尺寸、屏幕的方法？\"><a href=\"#通过-JS-获取页面尺寸、屏幕的方法？\" class=\"headerlink\" title=\"通过 JS 获取页面尺寸、屏幕的方法？\"></a>通过 JS 获取页面尺寸、屏幕的方法？</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">网页可见区域宽：document.body.clientWidth</span><br><span class=\"line\">网页可见区域高：document.body.clientHeight</span><br><span class=\"line\">网页可见区域宽：document.body.offsetWidth (包括边线的宽)</span><br><span class=\"line\">网页可见区域高：document.body.offsetHeight (包括边线的宽)</span><br><span class=\"line\">网页正文全文宽：document.body.scrollWidth</span><br><span class=\"line\">网页正文全文高：document.body.scrollHeight</span><br><span class=\"line\">网页被卷去的高：document.body.scrollTop</span><br><span class=\"line\">网页被卷去的左：document.body.scrollLeft</span><br><span class=\"line\">网页正文部分上：window.screenTop</span><br><span class=\"line\">网页正文部分左：window.screenLeft</span><br><span class=\"line\">屏幕分辨率的高：window.screen.height</span><br><span class=\"line\">屏幕分辨率的宽：window.screen.width</span><br><span class=\"line\">屏幕可用工作区高度：window.screen.availHeight</span><br><span class=\"line\">屏幕可用工作区宽度：window.screen.availWidth</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"列举-JS-实现跨域的几种方式？\"><a href=\"#列举-JS-实现跨域的几种方式？\" class=\"headerlink\" title=\"列举 JS 实现跨域的几种方式？\"></a>列举 JS 实现跨域的几种方式？</h3><blockquote>\n<p><a href=\"https://juejin.im/entry/57d21eadbf22ec005f9c7d76\" target=\"_blank\" rel=\"noopener\">参考详情</a></p>\n</blockquote>\n<h3 id=\"列举几种立即执行函数的实现方式。\"><a href=\"#列举几种立即执行函数的实现方式。\" class=\"headerlink\" title=\"列举几种立即执行函数的实现方式。\"></a>列举几种立即执行函数的实现方式。</h3><blockquote>\n<p><a href=\"https://blog.csdn.net/wei_smile/article/details/77938180\" target=\"_blank\" rel=\"noopener\">参考详情</a></p>\n</blockquote>\n<h3 id=\"var-numberArray-3-6-2-4-1-5\"><a href=\"#var-numberArray-3-6-2-4-1-5\" class=\"headerlink\" title=\"var numberArray = [3, 6, 2, 4, 1, 5];\"></a>var numberArray = [3, 6, 2, 4, 1, 5];</h3><ol>\n<li>实现对该数组的倒排，输出[5, 1, 4, 2, 6, 3]</li>\n<li>实现对该数组的的将序排列，输出[6, 5, 4, 3, 2, 1];</li>\n</ol>\n<h3 id=\"编写一个方法，去掉一个数组的重复元素\"><a href=\"#编写一个方法，去掉一个数组的重复元素\" class=\"headerlink\" title=\"编写一个方法，去掉一个数组的重复元素\"></a>编写一个方法，去掉一个数组的重复元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newArr = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, item; (item = arr[i++]); ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newArr.indexOf(item) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      newArr.push(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写一个简单的-ajax-示例\"><a href=\"#写一个简单的-ajax-示例\" class=\"headerlink\" title=\"写一个简单的 ajax 示例\"></a>写一个简单的 ajax 示例</h3><blockquote>\n<p><a href=\"http://www.runoob.com/try/try.php?filename=tryajax_first\" target=\"_blank\" rel=\"noopener\">参考详情</a></p>\n</blockquote>\n<h3 id=\"JavaScript-有哪些方法定义对象？\"><a href=\"#JavaScript-有哪些方法定义对象？\" class=\"headerlink\" title=\"JavaScript 有哪些方法定义对象？\"></a>JavaScript 有哪些方法定义对象？</h3><blockquote>\n<p><a href=\"http://www.runoob.com/js/js-objects.html\" target=\"_blank\" rel=\"noopener\">参考详情</a></p>\n</blockquote>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><h3 id=\"HTTP-request-报文结构是怎样的？\"><a href=\"#HTTP-request-报文结构是怎样的？\" class=\"headerlink\" title=\"HTTP request 报文结构是怎样的？\"></a>HTTP request 报文结构是怎样的？</h3><ul>\n<li><p>请求行: {请求方法} {资源路径} {协议版本}</p>\n</li>\n<li><p>请求头: 紧跟请求行的下一行，所有的请求头，除 Host 外都是可选的。</p>\n</li>\n<li><p>空行: 告诉服务器请求头部到此为止。</p>\n</li>\n<li><p>消息体: 消息的主体部分，消息体的数据格式通过 header 里面的 Content-Type 属性指定。</p>\n</li>\n</ul>\n<h3 id=\"描述常见的-HTTP-状态码和-HTTP-方法\"><a href=\"#描述常见的-HTTP-状态码和-HTTP-方法\" class=\"headerlink\" title=\"描述常见的 HTTP 状态码和 HTTP 方法\"></a>描述常见的 HTTP 状态码和 HTTP 方法</h3><ul>\n<li><code>200</code> - 请求成功</li>\n<li><code>301</code> - 资源（网页等）被永久转移到其它 URL</li>\n<li><code>404</code> - 请求的资源（网页等）不存在</li>\n<li><code>500</code> - 内部服务器错误</li>\n</ul>\n<blockquote>\n<ul>\n<li><a href=\"http://www.runoob.com/http/http-status-codes.html\" target=\"_blank\" rel=\"noopener\">参考详情</a></li>\n</ul>\n</blockquote>\n<p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。</p>\n<p>HTTP1.0 定义了三种请求方法： <code>GET</code>, <code>POST</code> 和 <code>HEAD</code> 方法。</p>\n<p>HTTP1.1 新增了五种请求方法：<code>OPTIONS</code>, <code>PUT</code>, <code>DELETE</code>, <code>TRACE</code> 和 <code>CONNECT</code> 方法。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>GET</td>\n<td>请求指定的页面信息，并返回实体主体。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>HEAD</td>\n<td>类似于 get 请求，只不过返回的响应中没有具体的内容，用于获取报头</td>\n</tr>\n<tr>\n<td>3</td>\n<td>POST</td>\n<td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>PUT</td>\n<td>从客户端向服务器传送的数据取代指定的文档的内容。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>DELETE</td>\n<td>请求服务器删除指定的页面。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>CONNECT</td>\n<td>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td>\n</tr>\n<tr>\n<td>7</td>\n<td>OPTIONS</td>\n<td>允许客户端查看服务器的性能。</td>\n</tr>\n<tr>\n<td>8</td>\n<td>TRACE</td>\n<td>回显服务器收到的请求，主要用于测试或诊断。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<ul>\n<li><a href=\"http://www.runoob.com/http/http-methods.html\" target=\"_blank\" rel=\"noopener\">参考详情</a></li>\n</ul>\n</blockquote>\n<h3 id=\"HTTP-状态码及其含义？\"><a href=\"#HTTP-状态码及其含义？\" class=\"headerlink\" title=\"HTTP 状态码及其含义？\"></a>HTTP 状态码及其含义？</h3><blockquote>\n<p><a href=\"https://lwwtotod.github.io/doc/InterView/%E4%B8%80%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98.html#_2-%E6%8F%8F%E8%BF%B0%E5%B8%B8%E8%A7%81%E7%9A%84-http-%E7%8A%B6%E6%80%81%E7%A0%81%E5%92%8C-http-%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n</blockquote>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><h3 id=\"请简单描述-Vue-双向绑定底层实现原理，常用到的指令及-Vue-实例的生命周期\"><a href=\"#请简单描述-Vue-双向绑定底层实现原理，常用到的指令及-Vue-实例的生命周期\" class=\"headerlink\" title=\"请简单描述 Vue 双向绑定底层实现原理，常用到的指令及 Vue 实例的生命周期\"></a>请简单描述 Vue 双向绑定底层实现原理，常用到的指令及 Vue 实例的生命周期</h3><blockquote>\n<ul>\n<li><a href=\"https://juejin.im/post/5abdd6f6f265da23793c4458\" target=\"_blank\" rel=\"noopener\">参考详情</a></li>\n</ul>\n</blockquote>\n<h2 id=\"算法题\"><a href=\"#算法题\" class=\"headerlink\" title=\"算法题\"></a>算法题</h2><h3 id=\"给出两个单词-word1-和-word2，找出将-word1-转换成-word2-所使用的最少的步骤数（每个操作记为一步）。\"><a href=\"#给出两个单词-word1-和-word2，找出将-word1-转换成-word2-所使用的最少的步骤数（每个操作记为一步）。\" class=\"headerlink\" title=\"给出两个单词 word1 和 word2，找出将 word1 转换成 word2 所使用的最少的步骤数（每个操作记为一步）。\"></a>给出两个单词 word1 和 word2，找出将 word1 转换成 word2 所使用的最少的步骤数（每个操作记为一步）。</h3><p>你可以对一个单词进行以下三种操作</p>\n<ol>\n<li>插入一个字符;</li>\n<li>删除一个字符;</li>\n<li>替换一个字符;</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; word1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; word2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minDistance = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word1, word2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len1 = word1.length,</span><br><span class=\"line\">    len2 = word2.length,</span><br><span class=\"line\">    matrix = [],</span><br><span class=\"line\">    i,</span><br><span class=\"line\">    j</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len1 === <span class=\"number\">0</span> || len2 === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(len1, len2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//initialization</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= len1; i++) &#123;</span><br><span class=\"line\">    matrix[i] = []</span><br><span class=\"line\">    matrix[i][<span class=\"number\">0</span>] = i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt;= len2; j++) &#123;</span><br><span class=\"line\">    matrix[<span class=\"number\">0</span>][j] = j</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= len1; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt;= len2; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (word1.charAt(i - <span class=\"number\">1</span>) === word2.charAt(j - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        matrix[i][j] = matrix[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        matrix[i][j] =</span><br><span class=\"line\">          <span class=\"built_in\">Math</span>.min(matrix[i - <span class=\"number\">1</span>][j], matrix[i][j - <span class=\"number\">1</span>], matrix[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]) + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> matrix[len1][len2]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><h3 id=\"如何进行网站性能优化，请简述。\"><a href=\"#如何进行网站性能优化，请简述。\" class=\"headerlink\" title=\"如何进行网站性能优化，请简述。\"></a>如何进行网站性能优化，请简述。</h3><ul>\n<li>代码层面：避免使用 css 表达式，避免使用高级选择器，通配选择器。</li>\n<li>缓存利用：缓存 Ajax，使用 CDN，使用外部 js 和 css 文件以便缓存，添加 Expires 头，服务端配置 Etag，减少 DNS 查找等</li>\n<li>请求数量：合并样式和脚本，使用 css 图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载。</li>\n<li>请求带宽：压缩文件，开启 GZIP，<br>代码层面的优化</li>\n<li>用 hash-table 来优化查找</li>\n<li>少用全局变量</li>\n<li>用 innerHTML 代替 DOM 操作，减少 DOM 操作次数，优化 javascript 性能</li>\n<li>用 setTimeout 来避免页面失去响应</li>\n<li>缓存 DOM 节点查找的结果</li>\n<li>避免使用 CSS Expression</li>\n<li>避免全局查询</li>\n<li>避免使用 with(with 会创建自己的作用域，会增加作用域链长度)</li>\n<li>多个变量声明合并</li>\n<li>避免图片和 iFrame 等的空 Src。空 Src 会重新加载当前页面，影响速度和效率</li>\n<li>尽量避免写在 HTML 标签中写 Style 属性</li>\n<li>移动端性能优化</li>\n<li>尽量使用 css3 动画，开启硬件加速。</li>\n<li>适当使用 touch 事件代替 click 事件。</li>\n<li>避免使用 css3 渐变阴影效果。</li>\n<li>可以用 transform: translateZ(0) 来开启硬件加速。（见下面的详细解释）</li>\n<li>不滥用 Float。Float 在渲染时计算量比较大，尽量减少使用</li>\n<li>不滥用 Web 字体。Web 字体需要下载，解析，重绘当前页面，尽量减少使用。</li>\n<li>合理使用 requestAnimationFrame 动画代替 setTimeout</li>\n<li>CSS 中的属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）会触发 GPU 渲染，请合理使用。过渡使用会引发手机过耗电增加</li>\n<li>PC 端的在移动端同样适用</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck2q9ctc700072e47f021nci1","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctcd000d2e47nncxl0tv"},{"post_id":"ck2q9ctby00022e47hqp33oaj","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctcf000h2e47dexu2vt1"},{"post_id":"ck2q9ctc700082e47wyn32zow","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctch000k2e47qucsiqvx"},{"post_id":"ck2q9ctca000b2e47w8e26eq9","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctci000o2e470igyxyrm"},{"post_id":"ck2q9ctc200032e47dwhfwcff","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctcj000r2e47jmn7zieq"},{"post_id":"ck2q9ctcb000c2e47owrtj88t","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctcl000u2e47ewbtu51w"},{"post_id":"ck2q9ctce000g2e47esg66pqd","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctcm000x2e47777q9mqq"},{"post_id":"ck2q9ctc600062e474725abd9","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctcn00102e47dtvroloz"},{"post_id":"ck2q9ctcg000j2e47jz2uccz4","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctco00132e47qaymxpdr"},{"post_id":"ck2q9ctci000n2e47lehnibpw","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctcp00162e471nn05yrr"},{"post_id":"ck2q9ctcj000q2e47v26ubo29","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctcr001a2e473xb362wq"},{"post_id":"ck2q9ctck000t2e472915bgw2","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctcs001d2e47hp2t3t3k"},{"post_id":"ck2q9ctcl000w2e471zo13uwf","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctct001i2e47iblm117o"},{"post_id":"ck2q9ctcm000z2e47efhvhq07","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctcu001k2e47cjosyrsi"},{"post_id":"ck2q9ctcp00152e47tvkzq4pv","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctcv001n2e47l86k8c4x"},{"post_id":"ck2q9ctco00122e47o37fzwut","category_id":"ck2q9ctcq00182e47qmko4iel","_id":"ck2q9ctcw001r2e47ev65kl8w"},{"post_id":"ck2q9ctct001j2e4776zddnsz","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctcx001v2e47xwuys1ci"},{"post_id":"ck2q9ctcu001m2e47ansn82gk","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctcy001z2e47wehvuev2"},{"post_id":"ck2q9ctcr001c2e478lgyt1w2","category_id":"ck2q9ctcv001p2e47fen54kge","_id":"ck2q9ctd000242e47ls4u9oa4"},{"post_id":"ck2q9ctcy001y2e47eolb6pgm","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctd100282e47thqjd0k4"},{"post_id":"ck2q9ctcs001g2e47s43db4ho","category_id":"ck2q9ctcy001x2e47ul7jjigb","_id":"ck2q9ctd1002a2e473zgo5khc"},{"post_id":"ck2q9ctcq00192e474fcc78q6","category_id":"ck2q9ctct001h2e47jcpdlgqr","_id":"ck2q9ctd2002f2e47aat8wgku"},{"post_id":"ck2q9ctcq00192e474fcc78q6","category_id":"ck2q9ctd000252e47quixekju","_id":"ck2q9ctd3002j2e47z4iaqidb"},{"post_id":"ck2q9ctcv001q2e47d65h1983","category_id":"ck2q9ctd1002b2e47qbe9igz3","_id":"ck2q9ctd4002m2e47pk9nk8st"},{"post_id":"ck2q9ctcz00222e475msbgfw7","category_id":"ck2q9ctd2002h2e472ij5e1xv","_id":"ck2q9ctd5002q2e479e0dcqna"},{"post_id":"ck2q9ctdv003o2e475cset97j","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctdx003t2e47wulhtb10"},{"post_id":"ck2q9ctdw003p2e47ypvhjjmr","category_id":"ck2q9ctc400042e47vizjpkix","_id":"ck2q9ctdy003u2e47eum9nmx9"}],"PostTag":[{"post_id":"ck2q9ctby00022e47hqp33oaj","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctcf000i2e47sflafwxo"},{"post_id":"ck2q9ctby00022e47hqp33oaj","tag_id":"ck2q9ctc8000a2e47nalnxxq3","_id":"ck2q9ctch000l2e47pjlqh4u3"},{"post_id":"ck2q9ctc200032e47dwhfwcff","tag_id":"ck2q9ctce000f2e47tqcfwdam","_id":"ck2q9ctcj000p2e47ohjva2an"},{"post_id":"ck2q9ctc600062e474725abd9","tag_id":"ck2q9ctce000f2e47tqcfwdam","_id":"ck2q9ctcl000v2e4793a44nrm"},{"post_id":"ck2q9ctc700072e47f021nci1","tag_id":"ck2q9ctck000s2e47h60mxb1p","_id":"ck2q9ctcn00112e476d82p9zp"},{"post_id":"ck2q9ctc700082e47wyn32zow","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctcq00172e4781srg6tm"},{"post_id":"ck2q9ctc700082e47wyn32zow","tag_id":"ck2q9ctc8000a2e47nalnxxq3","_id":"ck2q9ctcr001b2e47ef36gd4e"},{"post_id":"ck2q9ctca000b2e47w8e26eq9","tag_id":"ck2q9ctcp00142e47icl3eczx","_id":"ck2q9ctcs001f2e47dca9jksh"},{"post_id":"ck2q9ctcb000c2e47owrtj88t","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctcv001o2e47qifdrm1h"},{"post_id":"ck2q9ctcb000c2e47owrtj88t","tag_id":"ck2q9ctcs001e2e47pwddnflb","_id":"ck2q9ctcw001s2e47ice7l37w"},{"post_id":"ck2q9ctct001j2e4776zddnsz","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctcx001w2e47mw6mfa4w"},{"post_id":"ck2q9ctcu001m2e47ansn82gk","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctcy00202e474nc9xlli"},{"post_id":"ck2q9ctce000g2e47esg66pqd","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctcz00232e47lwl8lu62"},{"post_id":"ck2q9ctce000g2e47esg66pqd","tag_id":"ck2q9ctcs001e2e47pwddnflb","_id":"ck2q9ctd000262e47chxj0df4"},{"post_id":"ck2q9ctcg000j2e47jz2uccz4","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctd100292e47sve6cf18"},{"post_id":"ck2q9ctcg000j2e47jz2uccz4","tag_id":"ck2q9ctcs001e2e47pwddnflb","_id":"ck2q9ctd1002c2e472hfbqrss"},{"post_id":"ck2q9ctci000n2e47lehnibpw","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctd2002e2e4752f7nhhp"},{"post_id":"ck2q9ctci000n2e47lehnibpw","tag_id":"ck2q9ctcs001e2e47pwddnflb","_id":"ck2q9ctd2002g2e47b4fw10m3"},{"post_id":"ck2q9ctcj000q2e47v26ubo29","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctd3002k2e4728rv0ln4"},{"post_id":"ck2q9ctcj000q2e47v26ubo29","tag_id":"ck2q9ctcs001e2e47pwddnflb","_id":"ck2q9ctd4002l2e479mcg46rd"},{"post_id":"ck2q9ctck000t2e472915bgw2","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctd4002o2e47ozfhpe9l"},{"post_id":"ck2q9ctck000t2e472915bgw2","tag_id":"ck2q9ctcs001e2e47pwddnflb","_id":"ck2q9ctd4002p2e47r7wqw359"},{"post_id":"ck2q9ctcl000w2e471zo13uwf","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctd5002s2e471ukv17f9"},{"post_id":"ck2q9ctcl000w2e471zo13uwf","tag_id":"ck2q9ctcs001e2e47pwddnflb","_id":"ck2q9ctd5002t2e47ufsttv9u"},{"post_id":"ck2q9ctcm000z2e47efhvhq07","tag_id":"ck2q9ctd4002n2e475tll4bro","_id":"ck2q9ctd5002v2e47mgsou82c"},{"post_id":"ck2q9ctco00122e47o37fzwut","tag_id":"ck2q9ctd5002r2e475w89abz7","_id":"ck2q9ctd6002x2e47obl454vx"},{"post_id":"ck2q9ctco00122e47o37fzwut","tag_id":"ck2q9ctd5002u2e47o1aqfjbf","_id":"ck2q9ctd6002y2e47oabrpcno"},{"post_id":"ck2q9ctcp00152e47tvkzq4pv","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctd600302e4795tbg0l7"},{"post_id":"ck2q9ctcp00152e47tvkzq4pv","tag_id":"ck2q9ctd5002w2e47eooilvjc","_id":"ck2q9ctd600312e473uqpycjm"},{"post_id":"ck2q9ctcq00192e474fcc78q6","tag_id":"ck2q9ctd6002z2e4721485s8a","_id":"ck2q9ctd700342e47m8olsqjd"},{"post_id":"ck2q9ctcq00192e474fcc78q6","tag_id":"ck2q9ctd700322e47e1d827gi","_id":"ck2q9ctd700352e472sox1ypj"},{"post_id":"ck2q9ctcr001c2e478lgyt1w2","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctd800372e47nhmx8zu4"},{"post_id":"ck2q9ctcr001c2e478lgyt1w2","tag_id":"ck2q9ctd700332e47ea2jv9ia","_id":"ck2q9ctd800382e47q65pzytz"},{"post_id":"ck2q9ctcs001g2e47s43db4ho","tag_id":"ck2q9ctd700362e471r4orann","_id":"ck2q9ctd9003b2e478zjdmmhw"},{"post_id":"ck2q9ctcs001g2e47s43db4ho","tag_id":"ck2q9ctd800392e475svtk26b","_id":"ck2q9ctd9003c2e47yipeblxv"},{"post_id":"ck2q9ctcv001q2e47d65h1983","tag_id":"ck2q9ctd9003a2e47xywusv94","_id":"ck2q9ctda003f2e47ivp0lc44"},{"post_id":"ck2q9ctcv001q2e47d65h1983","tag_id":"ck2q9ctd9003d2e47ll5p2xg3","_id":"ck2q9ctda003g2e4767768znv"},{"post_id":"ck2q9ctcy001y2e47eolb6pgm","tag_id":"ck2q9ctd9003e2e47cq9hj3ll","_id":"ck2q9ctda003j2e47c3c4r6ab"},{"post_id":"ck2q9ctcy001y2e47eolb6pgm","tag_id":"ck2q9ctda003h2e47uba5j6fw","_id":"ck2q9ctda003k2e471nmh6a1s"},{"post_id":"ck2q9ctcz00222e475msbgfw7","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctdb003l2e47txwsox7i"},{"post_id":"ck2q9ctcz00222e475msbgfw7","tag_id":"ck2q9ctcs001e2e47pwddnflb","_id":"ck2q9ctdb003m2e47k5v8rcbp"},{"post_id":"ck2q9ctcz00222e475msbgfw7","tag_id":"ck2q9ctda003i2e47gb7jn2sh","_id":"ck2q9ctdb003n2e471cwpgyg5"},{"post_id":"ck2q9ctdv003o2e475cset97j","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctdx003q2e47xlr5g9gs"},{"post_id":"ck2q9ctdv003o2e475cset97j","tag_id":"ck2q9ctcs001e2e47pwddnflb","_id":"ck2q9ctdx003s2e473k2fgyfd"},{"post_id":"ck2q9ctdw003p2e47ypvhjjmr","tag_id":"ck2q9ctc500052e47otes582y","_id":"ck2q9ctdy003v2e47j7u9fa95"},{"post_id":"ck2q9ctdw003p2e47ypvhjjmr","tag_id":"ck2q9ctdx003r2e476l09cc74","_id":"ck2q9ctdy003w2e47foei6q13"}],"Tag":[{"name":"JavaScript","_id":"ck2q9ctc500052e47otes582y"},{"name":"ElementUI","_id":"ck2q9ctc8000a2e47nalnxxq3"},{"name":"JavaScript hexo","_id":"ck2q9ctce000f2e47tqcfwdam"},{"name":"hexo","_id":"ck2q9ctck000s2e47h60mxb1p"},{"name":"CSS","_id":"ck2q9ctcp00142e47icl3eczx"},{"name":"算法","_id":"ck2q9ctcs001e2e47pwddnflb"},{"name":"设计模式","_id":"ck2q9ctd4002n2e475tll4bro"},{"name":"Koa","_id":"ck2q9ctd5002r2e475w89abz7"},{"name":"Sequelize","_id":"ck2q9ctd5002u2e47o1aqfjbf"},{"name":"vscode","_id":"ck2q9ctd5002w2e47eooilvjc"},{"name":"ngxin","_id":"ck2q9ctd6002z2e4721485s8a"},{"name":"Mac","_id":"ck2q9ctd700322e47e1d827gi"},{"name":"git","_id":"ck2q9ctd700332e47ea2jv9ia"},{"name":"npm","_id":"ck2q9ctd700362e471r4orann"},{"name":"yarn","_id":"ck2q9ctd800392e475svtk26b"},{"name":"mac","_id":"ck2q9ctd9003a2e47xywusv94"},{"name":"hosts","_id":"ck2q9ctd9003d2e47ll5p2xg3"},{"name":"Vue","_id":"ck2q9ctd9003e2e47cq9hj3ll"},{"name":"Axios","_id":"ck2q9ctda003h2e47uba5j6fw"},{"name":"LeetCode","_id":"ck2q9ctda003i2e47gb7jn2sh"},{"name":"面试题","_id":"ck2q9ctdx003r2e476l09cc74"}]}}